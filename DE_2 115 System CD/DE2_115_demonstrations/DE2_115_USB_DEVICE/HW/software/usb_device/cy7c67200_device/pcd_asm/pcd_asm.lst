QTASM rev 1.18x
   1                     ;*************************************************************************************************
   2                     ;	Copyright (2004), Cypress Semiconductor Corporation
   3                     ;
   4                     ;	This software is owned by Cypress Semiconductor Corporation (Cypress) and is
   5                     ;	protected by United States copyright laws and international treaty provisions. Cypress
   6                     ;	hereby grants to Licensee a personal, non-exclusive, non-transferable license to copy,
   7                     ;	use, modify, create derivative works of, and compile the Cypress Source Code and
   8                     ;	derivative works for the sole purpose of creating custom software in support of Licensee
   9                     ;	product ("Licensee Product") to be used only in conjunction with a Cypress integrated
  10                     ;	circuit. Any reproduction, modification, translation, compilation, or representation of this
  11                     ;	software except as specified above is prohibited without the express written permission of
  12                     ;	Cypress.
  13                     ;	Disclaimer: Cypress makes no warranty of any kind, express or implied, with regard to
  14                     ;	this material, including, but not limited to, the implied warranties of merchantability and
  15                     ;	fitness for a particular purpose. Cypress reserves the right to make changes without
  16                     ;	further notice to the materials described herein. Cypress does not assume any liability
  17                     ;	arising out of the application or use of any product or circuit described herein. Cypress?
  18                     ;	products described herein are not authorized for use as components in life-support
  19                     ;	devices.
  20                     ;	This software is protected by and subject to worldwide patent coverage, including U.S.
  21                     ;	and foreign patents. Use may be limited by and subject to the Cypress Software License
  22                     ;	Agreement.
  23                     ;
  24                     ;	Module Name:
  25                     ;	    	pcd_asm.asm
  26                     ;
  27                     ;	Created:
  28                     ;	    	9/2/2003
  29                     ;
  30                     ;	Description:
  31                     ;	     	This file implements the chapter 9 function from ez-host
  32                     ;           generate code (pcd_asm.h) to download into 67200 interal ram -Dee
  33                     ;   Source from :  WINCE ver 1.1 drivers for peripheral mode 
  34                     ;                 http://www.cypress.com/?rID=14386    
  35                     ;	Notes:
  36                     ;
  37                     ;*************************************************************************************************/
  38                     
  39                     .xlist
  43                     .list
  44                     
  45                     
  46                     
  47                     ;=============================================================
  48                     ; For descritor
  49                     ;=============================================================
  50                     
  51                     
  52                     ;Descriptor Types
  53           00000001  DEVICE					equ     0x01
  54           00000002  CONFIGURATION   		equ		0x02
  55           00000003  STRING          		equ		0x03
  56           00000004  INTERFACE       		equ		0x04
  57           00000005  ENDPOINT        		equ		0x05
  58                     
  59           00000040  EP0Len          		equ		64
  60           00000040  EP1Len          		equ		64
  61           00000040  EP2Len          		equ		64
  62           00000040  EP3Len          		equ		64      	
  63           00000040  EP4Len                  equ     64
  64                     
  65                     ;=============================================================
  66                     ; For standard command and class command
  67                     ;=============================================================
  68                     ; Device Request Offsets
  69           00000000  o_bmRequest				equ		0
  70           00000001  o_bRequest				equ		1
  71           00000002  o_wValue  				equ		2
  72           00000004  o_wIndex  				equ		4
  73           00000006  o_wLength 				equ		6
  74                     
  75                     ;Common memory for pass data between ez-host and external CPU
  76           000001e0  CLASS_COMMAND_ADDR		equ		0x1E0
  77                     
  78                     ;buffer for the SIE2 mailbox
  79           00000404  mbx_msg2				equ     0x404
  80                     
  81                     ;Message for SIE mailbox
  82           00002000  SUSB_CLASS_MSG			equ     0x2000	
  83                     
  84           00000022  SET_CONTROL_LINE_STATE 	equ 	0x22
  85                     
  86                     ;=============================================================
  87                     ; USB variables
  88                     ;=============================================================
  89           00000040  EP_DATA1      			equ 	0x40
  90           00000020  EP_STALL      			equ 	0x20
  91           00000010  EP_ISO        			equ 	0x10
  92           00000004  EP_DIR_IN     			equ 	0x04
  93           00000002  EP_ENB        			equ 	0x02
  94           00000001  EP_ARM        			equ 	0x01
  95           00000080  EP_STICKY     			equ 	0x80
  96                     ;=============================================================
  97                     ; offset for DEVx_EPx_CTL_REG
  98                     ;=============================================================
  99           00000000  o_ctl         			equ 	0x00
 100           00000002  o_base        			equ 	0x02
 101           00000004  o_cnt         			equ 	0x04
 102           00000006  o_status      			equ 	0x06
 103           00000008  o_residue     			equ 	0x08
 104           0000000a  o_ep_len      			equ 	0x0a    	; contain endpoint payload
 105           0000000c  o_ep_link     			equ 	0x0c    	; link buffer for each endpoint, 0xe reserved
 106                     
 107                     ;=============================================================
 108                     ; flag for o_status register
 109                     ;=============================================================
 110           00000080  STALL_FLG     			equ 	0x80
 111           00000002  ERR_FLG       			equ 	2
 112           00000001  ACK_FLG       			equ 	1
 113           00000300  INV_DIR_FLG   			equ 	0x300
 114           00000020  OVF_FLG       			equ 	0x20    	; overflow flag
 115           00000400  UNF_FLG       			equ 	0x400   	; underflow flag
 116                     
 117                     
 118                     ;=============================================================
 119                     ; address in bios for functions and variables
 120                     ;=============================================================
 121           fffff048  clr_int		  			equ 	0xf048
 122           0000004e  o_call_chain  			equ 	0x4e
 123           00000004  o_mbx_msg	  			equ 	4
 124           fffff16c  USB_finish_do 			equ 	0xf16c
 125           fffff50e  bitm		  			equ 	0xf50e
 126                     
 127                     
 128                     
 129                     
 130           00003e00  IRAM 					equ 	0x3E00 ; Dee-> make sure (0x3fff - IRAM ) ram space is enough for the code
 131 3df0                	org (IRAM-16)
 132                     
 133 3df0 c3b6           	dw 0xc3b6
 134 3df2 0004           	dw 4
 135 3df4 00             	db 0
 136 3df5 e000           	dw 0xe000
 137 3df7 0000           	dw 0
 138                     
 139 3df9 c3b6           	dw 0xc3b6
 140 3dfb 0194           	dw ((END - START) +2)
 141 3dfd 00             	db 0
 142 3dfe 3e00           	dw IRAM
 143                     
 144           00000000  	reloc IRAM
 145                     
 146                     
 147 3e00                START:
 148                     	;replace the device and configuration descriptor
 149 3e00 07e7 3f1a 00d4 	mov 	[SUSB2_DEV_DESC_VEC], dev_desc
 150 3e06 07e7 3f2c 00d6 	mov 	[SUSB2_CONFIG_DESC_VEC], conf_desc
 151 3e0c 07e7 3f5a 00d8         mov     [SUSB2_STRING_DESC_VEC], str_desc   ; Dee Add string descirptor
 152                     
 153 3e12 07e7 3e46 00ce 	mov 	[(SUSB2_CLASS_INT*2)], sie2_class_int  ;install the SIE2 class command handler
 154 3e18 07e7 3e46 00ca 	mov 	[(SUSB2_VENDOR_INT*2)], sie2_class_int  ;install the SIE2 vendor command handler
 155                     
 156                     	; Load new ISR
 157 3e1e 07e7 3e66 0054 	mov 	[SIE2_EP2_VEC], USB2_EP2_Isr
 158                     
 159 3e24 07e7 0380 c0aa 	mov     [USB2_CTL_REG], 0x380			; pull D+ and D- down
 160                     	; delay 1000 ms
 161 3e2a 07c1 03e8      	mov  	r1,1000                    ;10000							
 162 3e2e                mdelay1:									; 1 ms
 163 3e2e 07c2 1a5f        	mov 	r2, 6751
 164 3e32 da02           @@: dec  	r2                         		; take 148ns for each pass
 165 3e34 c17e             	jnz  	@b
 166 3e36 da01           	dec  	r1
 167 3e38 c17a           	jnz  	mdelay1
 168                     
 169                     	; start peripheral 
 170 3e3a 07c1 0000      	mov 	r1, 0							;full speed
 171 3e3e 07c2 0002      	mov 	r2, 2							;SIE2 to be peripheral
 172 3e42 af71           	int 	SUSB_INIT_INT	
 173 3e44 cf97           	ret 
 174                     
 175                     
 176                     ;=============================================================
 177                     ; process class commands
 178                     ;=============================================================
 179 3e46                sie2_class_int:
 180 3e46 07c8 0308      	mov		r8, SIE2_DEV_REQ				; SIE2 setup buffer
 181 3e4a 57f8 0022 0001 	cmp		b[r8+o_bRequest], SET_CONTROL_LINE_STATE
 182 3e50 c106           	jne		@f
 183 3e52 0c27 0002 01e0 	mov     [CLASS_COMMAND_ADDR], [r8+o_wValue]
 184 3e58 87e7 2000 0404 	or      [mbx_msg2], SUSB_CLASS_MSG		;write to SIE2 message mailbox
 185 3e5e 07c0 0000      @@:	mov     r0, 0
 186 3e62 af69           	int 	SUSB2_FINISH_INT
 187 3e64 cf97           	ret      
 188                     
 189                     
 190                     
 191                     ;=============================================================
 192                     ; ISR for ep2 of usb1
 193                     ;=============================================================
 194                     
 195 3e66                USB2_EP2_Isr:
 196 3e66 af4d           	int   	HW_SWAP_REG
 197 3e68 07c9 02a0          mov   	r9,DEV2_EP2_CTL_REG
 198 3e6c af9f f048          call  	clr_int
 199                     
 200 3e70                ISR_common1:
 201 3e70 77c0 0002          test  	r0,ERR_FLG
 202 3e74 c003               jz    	@f
 203 3e76                arm0: 
 204 3e76 87d1 0001      	or    	[r9],EP_ARM               		; if USB Error, retry again
 205 3e7a                iex2: 
 206 3e7a af4e           	int   	HW_REST_REG                  	; restore all regs + sti + ret
 207                     
 208 3e7c 6208           @@: and   	r8,r8                     		; if o_ep_link=0, just do nothing
 209 3e7e c07d               jz    	iex2                      		; do nothing, should not happen
 210 3e80 0c41 000a          mov   	r1,[r9+o_ep_len]          		; get current ep payload
 211                     	; r8-> o_ep_link->loc
 212 3e84 1050               add   	[r8],r1                   		; update next address, r8->cnt
 213 3e86 080a               mov   	r10,[r8++]                		; next address
 214 3e88 97d1 0040          xor   	[r9],EP_DATA1             		; toggle DATA0/DATA1
 215                     	; check if require data copy
 216 3e8c 57ca 4000          cmp   	r10,XRAM_BEGIN            		; check if external ram, require copy
 217 3e90 c218               jb    	skip_copy                	 	; if r10 < XRAM_BEGIN, skip copy
 218 3e92 57ca e000          cmp   	r10,IROM_BEGIN          
 219 3e96 c315               jae   	skip_copy
 220 3e98 0c4c 0002          mov   	r12,[r9+o_base]           		; get temporary buffer
 221 3e9c 0042               mov   	r2,r1
 222 3e9e 77d1 0004          test  	[r9],EP_DIR_IN            		; check direction
 223 3ea2 c007               jz    	dcpy
 224 3ea4 0297               push  	r10
 225 3ea6 030a               mov   	r10,r12                   		; swap r10 and r12
 226 3ea8 05cc               pop   	r12
 227 3eaa 3050               sub   	[r8],r1
 228 3eac c301               jnc   	@f
 229 3eae 1402               add   	r2,[r8]                   		; get correct byte len
 230 3eb0 1050           @@: add   	[r8],r1
 231 3eb2                dcpy: 
 232 3eb2 d802           	inc   	r2                        		; align the word copy
 233 3eb4 d002               shr   	r2,1
 234 3eb6 c003               jz    	xsk0                      		; skip if zero length
 235 3eb8 0922           @@: mov   	[r10++],[r12++]           		; copy all the data
 236 3eba da02               dec   	r2
 237 3ebc c17d               jnz   	@b
 238 3ebe                xsk0: 
 239 3ebe 0c4a 0002      	mov   	r10,[r9+o_base]           		; use ctl_buf 
 240 3ec2                skip_copy:
 241 3ec2 6410               and   	[r8],[r8]                 		; if len=0, check transfer done
 242 3ec4 c00c               jz    	xfer_done0
 243 3ec6 77c0 0400          test  	r0,UNF_FLG                		; short package, then finish
 244 3eca c109               jnz   	xfer_done0
 245                     
 246 3ecc 3050               sub   	[r8],r1
 247 3ece c302               jnc   	@f
 248 3ed0 1401               add   	r1,[r8]                   		; adjust the length
 249 3ed2 9410               xor   	[r8],[r8]                 		; clear len
 250 3ed4                @@:   
 251 3ed4 02b1 0002          mov   	[r9+o_base],r10           		; new base address
 252 3ed8 0071 0004          mov   	[r9+o_cnt],r1             		; new length
 253 3edc cf4c               jmp   	arm0                      		; ready for next package
 254 3ede                xfer_done0:
 255 3ede 1c50 0008          add   	[r8],[r9+o_residue]       		; update the residue
 256 3ee2                xfer_done:
 257 3ee2 07f1 0000 000c     mov   	[r9+o_ep_link],0          		; clear the link, r8->call back
 258 3ee8 0c00 0002          mov   	r0,[r8+2]                 		; submit to usb_idle task
 259 3eec 0248               mov   	r8,r9                     		; extract endpoint info
 260 3eee 67c8 0070          and   	r8,0x70                   		; just get the endpoint info
 261 3ef2 d0c8               shr   	r8,4
 262 3ef4 8e33 f50e 0004     or    	[r11+o_mbx_msg],b[r8+bitm] 		; Notify via Mailbox MSG
 263 3efa 6000               and   	r0,r0                     		; if empty just return
 264 3efc c009               jz    	chk_ep0_done
 265 3efe 57f3 0000 004e     cmp   	[r11+o_call_chain],0      		; check this incase
 266 3f04 c002               je    	@f
 267 3f06 af80               call  	r0                        		; this should never happen, but incase
 268 3f08 af4e               int  	HW_REST_REG                		; restore all regs + sti + ret
 269                     
 270 3f0a 0033 004e      @@: mov   	[r11+o_call_chain],r0     		; submit to usb_idle task
 271 3f0e af4e               int  	HW_REST_REG                		; restore all regs + sti + ret
 272                     
 273 3f10                chk_ep0_done:
 274 3f10 77c9 0070          test  	r9,0x70                   		; only use for endpoint 0
 275 3f14 a09f f16c          cz    	USB_finish_do             		; new feature for LYBERTY
 276 3f18 af4e               int  	HW_REST_REG                		; restore all regs + sti + ret
 277                     
 278                     
 279                     ;=============================================================
 280                     ; Descriptor
 281                     ;=============================================================
 282           0000      align 2
 283 3f1a                dev_desc:
 284 3f1a 12             	db    	18           					; bLength
 285 3f1b 01                 db     	DEVICE             				; bDescriptorType
 286 3f1c 0200               dw  	0x0200              			; bcdUSB
 287 3f1e ff                 db  	0xff               				; bDeviceClass (0xFF = Vendor Specific)
 288 3f1f ff                 db		0xff               				; bDeviceSubClass
 289 3f20 ff                 db		0xff               				; bDeviceProtocol
 290 3f21 40                 db		EP0Len             				; bMaxPacketSize0
 291 3f22 09fb               dw		0x09fb					; idVendor
 292 3f24 0de2               dw		0x0de2        					; idProduct
 293 3f26 0000               dw      0x0               				; bcdDevice
 294 3f28 01                 db		1                  				; iManufacturer - index of Manf String Descriptor
 295 3f29 01                 db		1                  				; iProduct - index of Product String Descriptor
 296 3f2a 01                 db		1                  				; iSerialNumber - Index of Serial Number String
 297 3f2b 01                 db		1                  				; bNumConfigurations
 298                     
 299 3f2c                conf_desc:
 300 3f2c 09                 db		9                  				; bLength
 301 3f2d 02                 db		CONFIGURATION      				; bDescriptorType
 302 3f2e 002e               dw		46     ;(9+9+7*4)  						; wTotalLength
 303 3f30 01                 db		1                  				; bNumInterfaces
 304 3f31 01                 db		1                  				; bConfigurationValue
 305 3f32 00                 db		0                  				; iConfiguration
 306 3f33 c0                 db		0xc0               				; bmAttributes
 307 3f34 32                 db		50                  			; MaxPower (x2 mA)
 308                     
 309 3f35                interface_desc:
 310 3f35 09                 db		9                  				; bLength
 311 3f36 04                 db		INTERFACE          				; bDescriptorType
 312 3f37 00                 db		0                  				; bInterfaceNumber
 313 3f38 00                 db		0                  				; bAlternateSetting
 314 3f39 04                 db		4                  				; bNumEndpoints (number endpoints used, excluding EP0)
 315 3f3a ff                 db		0xff               				; bInterfaceClass
 316 3f3b ff                 db		0xff               				; bInterfaceSubClass
 317 3f3c ff                 db		0xff               				; bInterfaceProtocol
 318 3f3d 00                 db		0                  				; ilInterface  (Index of this interface string desc.)
 319                     
 320                     ;In endpoint
 321 3f3e                ep1: 	
 322 3f3e 07                 db		7                  				; bLength
 323 3f3f 05                 db		ENDPOINT           				; bDescriptorType
 324 3f40 81                 db		0x81               				; bEndpointAddress (EP 1, IN)
 325 3f41 02                 db		2                  				; bmAttributes  (0010 = Bulk)
 326 3f42 0040               dw		EP1Len          				; wMaxPacketSize
 327 3f44 00                 db		0                  				; bInterval (ignored for Bulk)
 328                     
 329                     ;Out endpoint
 330 3f45                ep2: 	
 331 3f45 07                 db		7                  				; bLength
 332 3f46 05                 db		ENDPOINT           				; bDescriptorType
 333 3f47 02                 db		0x02               				; bEndpointAddress (EP 2, Out)
 334 3f48 02                 db		2                  				; bmAttributes  (0010 = Bulk)
 335 3f49 0040               dw		EP2Len          				; wMaxPacketSize
 336 3f4b 00                 db		0                  				; bInterval (ignored for Bulk)
 337                     ;In endpoint
 338 3f4c                ep3: 	;just for show how to add a endpoint  change  config_descriptor->wTotalLength  interface->bNumEndpoints
 339 3f4c 07                 db		7                  				; bLength
 340 3f4d 05                 db		ENDPOINT           				; bDescriptorType
 341 3f4e 83                 db		0x83               				; bEndpointAddress (EP 1, IN)
 342 3f4f 02                 db		2                  				; bmAttributes  (0010 = Bulk)
 343 3f50 0040               dw		EP3Len          				; wMaxPacketSize
 344 3f52 00                 db		0                  				; bInterval (ignored for Bulk)
 345                     
 346                     ;Out endpoint
 347 3f53                ep4: 	;just for show how to add a endpoint  change  config_descriptor->wTotalLength  interface->bNumEndpoints
 348 3f53 07                 db		7                  				; bLength
 349 3f54 05                 db		ENDPOINT           				; bDescriptorType
 350 3f55 04                 db		0x04               				; bEndpointAddress (EP 2, Out)
 351 3f56 02                 db		2                  				; bmAttributes  (0010 = Bulk)
 352 3f57 0040               dw		EP4Len          				; wMaxPacketSize
 353 3f59 00                 db		0                  				; bInterval (ignored for Bulk)
 354                     
 355           0000      align 2  ;Require the string must be align 2
 356                     ;string descriptor
 357 3f5a                str_desc:
 358 3f5a 04                 db 4
 359 3f5b 03                 db 3
 360 3f5c 0409               dw 0x409 ; english language id
 361 3f5e                str1:
 362 3f5e 34                 db STR1_LEN
 363 3f5f 03                 db 3
 364 3f60 0054 0065 0072     dw 'Terasic Technologies Inc.' ;Terasic EZO USB
          0061 0073 0069 
          0063 0020 0054 
          0065 0063 0068 
          006e 006f 006c 
          006f 0067 0069 
          0065 0073 0020 
          0049 006e 0063 
          002e 
 365           00000034     STR1_LEN equ ($-str1)
 366                     
 367 3f92                END:
Total Passes = 4
