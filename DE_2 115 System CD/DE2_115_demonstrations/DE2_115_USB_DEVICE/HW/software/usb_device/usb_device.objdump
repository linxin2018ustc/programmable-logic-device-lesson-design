
usb_device.elf:     file format elf32-littlenios2
usb_device.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x000001b4

Program Header:
    LOAD off    0x00001000 vaddr 0x00000000 paddr 0x00000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00000020 paddr 0x00000020 align 2**12
         filesz 0x0000f7ac memsz 0x0000f7ac flags r-x
    LOAD off    0x000107cc vaddr 0x0000f7cc paddr 0x000114f4 align 2**12
         filesz 0x00001d28 memsz 0x00001d28 flags rw-
    LOAD off    0x0001321c vaddr 0x0001321c paddr 0x0001321c align 2**12
         filesz 0x00000000 memsz 0x00000308 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00000000  00000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000194  00000020  00000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         0000eab8  000001b4  000001b4  000011b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000b60  0000ec6c  0000ec6c  0000fc6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001d28  0000f7cc  000114f4  000107cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000308  0001321c  0001321c  0001321c  2**2
                  ALLOC, SMALL_DATA
  6 .comment      00000023  00000000  00000000  000124f4  2**0
                  CONTENTS, READONLY
  7 .debug_aranges 00000d98  00000000  00000000  00012518  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_pubnames 00001696  00000000  00000000  000132b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   00026a4f  00000000  00000000  00014946  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0000839f  00000000  00000000  0003b395  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   00015aa1  00000000  00000000  00043734  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00001d60  00000000  00000000  000591d8  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0000236f  00000000  00000000  0005af38  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0000c489  00000000  00000000  0005d2a7  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000050  00000000  00000000  00069730  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000990  00000000  00000000  00069780  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  0006d66a  2**0
                  CONTENTS, READONLY
 18 .cpu          00000005  00000000  00000000  0006d66d  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  0006d672  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  0006d673  2**0
                  CONTENTS, READONLY
 21 .stderr_dev   0000000b  00000000  00000000  0006d674  2**0
                  CONTENTS, READONLY
 22 .stdin_dev    0000000b  00000000  00000000  0006d67f  2**0
                  CONTENTS, READONLY
 23 .stdout_dev   0000000b  00000000  00000000  0006d68a  2**0
                  CONTENTS, READONLY
 24 .sopc_system_name 0000000c  00000000  00000000  0006d695  2**0
                  CONTENTS, READONLY
 25 .quartus_project_dir 0000005e  00000000  00000000  0006d6a1  2**0
                  CONTENTS, READONLY
 26 .jdi          00004b47  00000000  00000000  0006d6ff  2**0
                  CONTENTS, READONLY
 27 .sopcinfo     0005f5e9  00000000  00000000  00072246  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00000000 l    d  .entry	00000000 .entry
00000020 l    d  .exceptions	00000000 .exceptions
000001b4 l    d  .text	00000000 .text
0000ec6c l    d  .rodata	00000000 .rodata
0000f7cc l    d  .rwdata	00000000 .rwdata
0001321c l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_pubnames	00000000 .debug_pubnames
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
000001ec l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 LCD.c
00000000 l    df *ABS*	00000000 usb_device.c
00000000 l    df *ABS*	00000000 usb_device_control.c
00000f88 l     F .text	00000168 ep2_isr
00000000 l    df *ABS*	00000000 usb_hal.c
000017e8 l     F .text	0000007c hpi_read_words
000018d4 l     F .text	00000048 writeable_region
0000176c l     F .text	0000007c hpi_write_words
00000000 l    df *ABS*	00000000 main.c
0000f7cc l     O .rwdata	000001a2 pcd_asm
00000000 l    df *ABS*	00000000 lib2-divmod.c
000019c8 l     F .text	0000007c udivmodsi4
00000000 l    df *ABS*	00000000 malloc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
0000248c l     F .text	00000058 __sprint_r
0000f262 l     O .rodata	00000010 blanks.3452
0000f252 l     O .rodata	00000010 zeroes.3453
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
000044f0 l     F .text	00000218 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
00005eec l     F .text	00000058 std
00005ff8 l     F .text	00000008 __fp_lock
00006000 l     F .text	00000008 __fp_unlock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
0000fd78 l     O .rwdata	00000400 impure_data
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 locale.c
000114c0 l     O .rwdata	00000004 charset
0000f298 l     O .rodata	00000030 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mprec.c
0000f3e0 l     O .rodata	0000000c p05.2458
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_isinfd.c
00000000 l    df *ABS*	00000000 s_isnand.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 dp-bit.c
000099dc l     F .text	00000410 _fpadd_parts
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 alt_close.c
0000b230 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
0000b290 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
0000b390 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
0000b4b0 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
0000b590 l     F .text	0000006c alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
0000b6ec l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
0000b918 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
000114dc l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_write.c
0000bd88 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
0001032c l     O .rwdata	00001060 jtag_uart_0
0001138c l     O .rwdata	00000120 lcd_16207_0
0000be8c l     F .text	00000038 alt_dev_reg
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
0000c0cc l     F .text	00000228 altera_avalon_jtag_uart_irq
0000c2f4 l     F .text	000000b0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_lcd_16207.c
000114e8 l     O .rwdata	00000004 colstart
0000c970 l     F .text	000000b8 lcd_write_command
0000ca28 l     F .text	000000d4 lcd_write_data
0000cafc l     F .text	000000c4 lcd_clear_screen
0000cbc0 l     F .text	000001ec lcd_repaint_screen
0000cdac l     F .text	000000c8 lcd_scroll_up
0000ce74 l     F .text	000002d0 lcd_handle_escape
0000d650 l     F .text	000000cc alt_lcd_16207_timeout
00000000 l    df *ABS*	00000000 altera_avalon_lcd_16207_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
0000d8b0 l     F .text	00000070 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
0000dd20 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
0000e144 l     F .text	000000c4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
0000e280 l     F .text	000000dc alt_file_locked
0000e4e4 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 ctype_.c
0000f649 l     O .rodata	00000180 _ctype_b
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
0000ea54 l     F .text	00000004 register_fini
00000000 l    df *ABS*	00000000 alt_exit.c
0000ec08 l     F .text	00000040 alt_sim_halt
00000314 g     F .text	0000003c LCD_Line1
00007568 g     F .text	00000094 _mprec_log10
00007654 g     F .text	00000088 __any_on
00008cf0 g     F .text	00000070 _isatty_r
0000f3b8 g     O .rodata	00000028 __mprec_tinytens
0000b74c g     F .text	0000006c alt_main
000022f4 g     F .text	000000a0 _puts_r
00013294 g     O .bss	00000100 alt_irq
00008d60 g     F .text	00000078 _lseek_r
00000418 g     F .text	00000058 dc_init_struct
000114f4 g       *ABS*	00000000 __flash_rwdata_start
0000a4fc g     F .text	00000088 __eqdf2
00013524 g       *ABS*	00000000 __alt_heap_start
00001618 g     F .text	0000003c hpi_write_reg
0000227c g     F .text	00000044 printf
000087bc g     F .text	00000068 __sseek
00005f54 g     F .text	000000a4 __sinit
00006c2c g     F .text	00000084 _setlocale_r
00001654 g     F .text	00000030 hpi_read_status
00006054 g     F .text	00000068 __sfmoreglue
0000b7d8 g     F .text	00000020 __malloc_unlock
000012c8 g     F .text	00000130 hpi_read_memory
00006fe4 g     F .text	000000e0 memmove
00006044 g     F .text	00000010 _cleanup
000076dc g     F .text	000000bc _Balloc
0000038c g     F .text	0000008c LCD_Test
0001321c g     O .bss	00000008 old_button_sw_status
0000a60c g     F .text	00000088 __gtdf2
00000000  w      *UND*	00000000 __errno
00000000 g     F .entry	0000001c __reset
00000b94 g     F .text	000003f4 sie2_msg_handler
00000020 g       *ABS*	00000000 __flash_exceptions_start
00008c7c g     F .text	00000074 _fstat_r
00013230 g     O .bss	00000004 errno
00000470 g     F .text	0000008c dc_clear_bug
00013244 g     O .bss	00000004 alt_argv
000194ac g       *ABS*	00000000 _gp
0000bc38 g     F .text	00000030 usleep
000015d4 g     F .text	00000044 hpi_read_reg
000101ac g     O .rwdata	00000180 alt_fd_list
0000e564 g     F .text	00000094 alt_find_dev
00006f44 g     F .text	000000a0 memcpy
000009e0 g     F .text	00000140 usb_enable_receive_data
00006038 g     F .text	0000000c _cleanup_r
0000a7a4 g     F .text	000000f8 __floatsidf
0000e208 g     F .text	00000078 alt_io_redirect
0000a71c g     F .text	00000088 __ltdf2
0000ec6c g       *ABS*	00000000 __DTOR_END__
00002394 g     F .text	00000014 puts
000074b8 g     F .text	000000b0 __ratio
0000c50c g     F .text	00000224 altera_avalon_jtag_uart_read
00001b28 g     F .text	00000014 malloc
000022c0 g     F .text	00000034 _printf_r
00001b04 g     F .text	00000008 __udivsi3
0000b3f0 g     F .text	000000c0 isatty
0000f2c8 g     O .rodata	000000c8 __mprec_tens
00006c08 g     F .text	00000008 __locale_charset
0000e7d0 g     F .text	00000090 alt_icache_flush
00013224 g     O .bss	00000004 __malloc_top_pad
000114bc g     O .rwdata	00000004 __mb_cur_max
00006c10 g     F .text	0000000c _localeconv_r
00007dd4 g     F .text	0000003c __i2b
000065ec g     F .text	0000049c __sfvwrite_r
000023a8 g     F .text	00000070 _sbrk_r
00001728 g     F .text	00000044 hpi_read_word
00008dd8 g     F .text	00000078 _read_r
00010178 g     O .rwdata	0000000c __lc_ctype
000114d4 g     O .rwdata	00000004 alt_max_fd
0000af34 g     F .text	00000138 __unpack_d
00008b58 g     F .text	00000110 _fclose_r
00005eb8 g     F .text	00000034 fflush
00013228 g     O .bss	00000004 __malloc_max_sbrked_mem
00009e6c g     F .text	00000074 __adddf3
000010f0 g     F .text	000001b8 check_button_sw_status
00007398 g     F .text	00000120 __b2d
0000942c g     F .text	000005b0 __umoddi3
0000b5fc g     F .text	000000f0 lseek
000114b8 g     O .rwdata	00000004 _global_impure_ptr
00008150 g     F .text	000005f4 _realloc_r
00013524 g       *ABS*	00000000 __bss_end
0000e04c g     F .text	000000f8 alt_iic_isr_register
0000bb2c g     F .text	0000010c alt_tick
00008e50 g     F .text	000005dc __udivdi3
0000f390 g     O .rodata	00000028 __mprec_bigtens
00008030 g     F .text	00000120 __s2b
0000a974 g     F .text	00000194 __floatunsidf
000072b8 g     F .text	00000060 __mcmp
000114f0 g     O .rwdata	00000004 __ctype_ptr
00006020 g     F .text	00000018 __fp_lock_all
0000e004 g     F .text	00000048 alt_ic_irq_enabled
000016b4 g     F .text	00000030 hpi_read_mbx
0000ba94 g     F .text	00000098 alt_alarm_stop
00013254 g     O .bss	00000004 alt_irq_active
00013280 g     O .bss	00000014 device_status
000000ec g     F .exceptions	000000c8 alt_irq_handler
00010184 g     O .rwdata	00000028 alt_dev_null
0000dc50 g     F .text	0000001c alt_dcache_flush_all
00007184 g     F .text	00000070 __hi0bits
0000a89c g     F .text	000000d8 __fixdfsi
000114f4 g       *ABS*	00000000 __ram_rwdata_end
000114cc g     O .rwdata	00000008 alt_dev_list
0000bc68 g     F .text	00000120 write
0000f7cc g       *ABS*	00000000 __ram_rodata_end
0000b2bc g     F .text	000000d4 fstat
00007f10 g     F .text	00000120 __pow5mult
00013234 g     O .bss	00000004 __nlocale_changed
00001b0c g     F .text	00000008 __umodsi3
00013524 g       *ABS*	00000000 end
0000d144 g     F .text	0000050c altera_avalon_lcd_16207_write
00001684 g     F .text	00000030 hpi_write_mbx
0000c00c g     F .text	000000c0 altera_avalon_jtag_uart_init
0000ec68 g       *ABS*	00000000 __CTOR_LIST__
08000000 g       *ABS*	00000000 __alt_stack_pointer
0000d920 g     F .text	00000090 alt_avalon_timer_sc_init
0000aba0 g     F .text	00000080 __clzsi2
0000c730 g     F .text	00000240 altera_avalon_jtag_uart_write
00005f44 g     F .text	00000004 __sfp_lock_acquire
00006e60 g     F .text	000000e4 memchr
000024e4 g     F .text	00001eac ___vfprintf_internal_r
000062d8 g     F .text	00000314 _free_r
0000ea58 g     F .text	000001b0 __call_exitprocs
00013238 g     O .bss	00000004 __mlocale_changed
000114b0 g     O .rwdata	00000004 __malloc_sbrk_base
000001b4 g     F .text	0000003c _start
0001324c g     O .bss	00000004 _alt_tick_rate
00007aa0 g     F .text	0000014c __lshift
00013250 g     O .bss	00000004 _alt_nticks
000012a8 g     F .text	00000020 hpi_init
0000b7f8 g     F .text	00000120 read
00000790 g     F .text	00000128 hpi_command
0000be1c g     F .text	00000070 alt_sys_init
0000e920 g     F .text	00000134 __register_exitproc
00007bec g     F .text	000001e8 __multiply
0000c3a4 g     F .text	00000074 altera_avalon_jtag_uart_close
0000f7cc g       *ABS*	00000000 __ram_rwdata_start
0000ec6c g       *ABS*	00000000 __ram_rodata_start
00013258 g     O .bss	00000028 __malloc_current_mallinfo
00007798 g     F .text	0000017c __d2b
00000b20 g     F .text	00000074 dcProcessEvent
0000bec4 g     F .text	00000058 altera_avalon_jtag_uart_read_fd
0000e718 g     F .text	000000b8 alt_get_fd
0000db04 g     F .text	0000014c alt_busy_sleep
0000b06c g     F .text	000000c8 __fpcmp_parts_d
00008ae8 g     F .text	00000070 _close_r
0000e8ac g     F .text	00000074 memcmp
0000bf74 g     F .text	00000048 altera_avalon_jtag_uart_close_fd
00013524 g       *ABS*	00000000 __alt_stack_base
0000bfbc g     F .text	00000050 altera_avalon_jtag_uart_ioctl_fd
000043b4 g     F .text	0000013c __swsetup_r
0000a2a4 g     F .text	00000258 __divdf3
000060bc g     F .text	000000f0 __sfp
000075fc g     F .text	00000058 __copybits
0000f970 g     O .rwdata	00000408 __malloc_av_
00005f50 g     F .text	00000004 __sinit_lock_release
00009ee0 g     F .text	000003c4 __muldf3
000088a0 g     F .text	00000060 __sread
0000e5f8 g     F .text	00000120 alt_find_file
0000dc6c g     F .text	000000b4 alt_dev_llist_insert
0000b7b8 g     F .text	00000020 __malloc_lock
0000b9d8 g     F .text	000000bc sbrk
00000650 g     F .text	00000140 dc_download_code
00005cbc g     F .text	000001fc _fflush_r
00008a34 g     F .text	000000b4 _calloc_r
0001321c g       *ABS*	00000000 __bss_start
000001f0 g     F .text	0000009c LCD_Init
000070c4 g     F .text	00000098 memset
0000191c g     F .text	000000ac main
00013248 g     O .bss	00000004 alt_envp
0001322c g     O .bss	00000004 __malloc_max_total_mem
0000bf1c g     F .text	00000058 altera_avalon_jtag_uart_write_fd
0000d71c g     F .text	0000013c altera_avalon_lcd_16207_init
00000350 g     F .text	0000003c LCD_Line2
000087b4 g     F .text	00000008 __sclose
08000000 g       *ABS*	00000000 __alt_heap_limit
00008c68 g     F .text	00000014 fclose
00013394 g     O .bss	00000190 _atexit0
00004708 g     F .text	000015b4 _dtoa_r
00001b3c g     F .text	00000740 _malloc_r
000114d8 g     O .rwdata	00000004 alt_errno
00006b50 g     F .text	000000b8 _fwalk
00001a44 g     F .text	00000060 __divsi3
0000f3ec g     O .rodata	00000014 __thenan_df
000061ac g     F .text	0000012c _malloc_trim_r
0000ec6c g       *ABS*	00000000 __CTOR_END__
00008900 g     F .text	000000bc strcmp
0000ec6c g       *ABS*	00000000 __flash_rodata_start
0000ec6c g       *ABS*	00000000 __DTOR_LIST__
0000a584 g     F .text	00000088 __nedf2
0000bde8 g     F .text	00000034 alt_irq_init
0000028c g     F .text	00000088 LCD_Show_Text
0000b978 g     F .text	00000060 alt_release_fd
0000f400 g     O .rodata	00000100 __clz_tab
0001323c g     O .bss	00000004 _PathLocale
0000e860 g     F .text	00000014 atexit
000013f8 g     F .text	000001dc hpi_write_memory
000089bc g     F .text	00000078 _write_r
00006cb0 g     F .text	0000001c setlocale
000114b4 g     O .rwdata	00000004 _impure_ptr
00013240 g     O .bss	00000004 alt_argc
0000dde4 g     F .text	00000064 _do_dtors
00000000 g       *ABS*	00000000 __alt_mem_sdram_0
00000020 g       .exceptions	00000000 alt_irq_entry
00007318 g     F .text	00000080 __ulp
00008744 g     F .text	00000040 __isinfd
00006008 g     F .text	00000018 __fp_unlock_all
0000d858 g     F .text	00000058 altera_avalon_lcd_16207_write_fd
000114c4 g     O .rwdata	00000008 alt_fs_list
00000020 g       *ABS*	00000000 __ram_exceptions_start
00006c1c g     F .text	00000010 localeconv
000008b8 g     F .text	00000128 usb_send_data
0000de78 g     F .text	00000050 alt_ic_isr_register
000114f4 g       *ABS*	00000000 _edata
00013524 g       *ABS*	00000000 _end
000001b4 g       *ABS*	00000000 __ram_exceptions_end
0000c418 g     F .text	000000f4 altera_avalon_jtag_uart_ioctl
0000df64 g     F .text	000000a0 alt_ic_irq_disable
00008824 g     F .text	0000007c __swrite
000004fc g     F .text	00000154 dc_download
000114ac g     O .rwdata	00000004 __malloc_trim_threshold
0000e544 g     F .text	00000020 altera_nios2_qsys_irq_init
0000e874 g     F .text	00000038 exit
00001864 g     F .text	00000070 get_ushort
00006a88 g     F .text	000000c8 _fwalk_reent
00007914 g     F .text	0000018c __mdiff
00001aa4 g     F .text	00000060 __modsi3
08000000 g       *ABS*	00000000 __alt_data_end
00000020 g     F .exceptions	00000000 alt_exception
00005f48 g     F .text	00000004 __sfp_lock_release
0000f548 g     O .rodata	00000101 _ctype_
0000ec48 g     F .text	00000020 _exit
00008784 g     F .text	00000030 __isnand
0000d9b0 g     F .text	00000154 alt_alarm_start
0000ab08 g     F .text	00000098 __muldi3
00006ccc g     F .text	00000194 __smakebuf_r
00002418 g     F .text	00000074 strlen
0000e35c g     F .text	00000188 open
0000a694 g     F .text	00000088 __gedf2
0000de48 g     F .text	00000030 alt_icache_flush_all
000114ec g     O .rwdata	00000004 alt_priority_mask
0000dec8 g     F .text	0000009c alt_ic_irq_enable
00004390 g     F .text	00000024 __vfprintf_internal
00009dec g     F .text	00000080 __subdf3
000071f4 g     F .text	000000c4 __lo0bits
000114e0 g     O .rwdata	00000008 alt_alarm_list
0000dd80 g     F .text	00000064 _do_ctors
0000b134 g     F .text	000000fc close
0000b510 g     F .text	00000080 alt_load
0000ac20 g     F .text	00000314 __pack_d
00001b14 g     F .text	00000014 free
00005f4c g     F .text	00000004 __sinit_lock_acquire
00007e10 g     F .text	00000100 __multadd
000016e4 g     F .text	00000044 hpi_write_word
0000715c g     F .text	00000028 _Bfree



Disassembly of section .entry:

00000000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && !defined(ALT_SIM_OPTIMIZE)
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
   0:	00840014 	movui	r2,4096
#endif

0:
    initi r2
   4:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
   8:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
   c:	00bffd16 	blt	zero,r2,4 <__reset+0x4>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
  10:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
  14:	08406d14 	ori	at,at,436
    jmp r1
  18:	0800683a 	jmp	at
  1c:	00000000 	call	0 <__reset>

Disassembly of section .exceptions:

00000020 <alt_exception>:
         * Process an exception.  For all exceptions we must preserve all
         * caller saved registers on the stack (See the Nios2 ABI
         * documentation for details).
         */

        addi  sp, sp, -76
  20:	deffed04 	addi	sp,sp,-76

#endif

#endif

        stw   ra,  0(sp)
  24:	dfc00015 	stw	ra,0(sp)
        /*
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */

        stw   r1,   8(sp)
  28:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
  2c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
  30:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
  34:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
  38:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
  3c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
  40:	d9c00815 	stw	r7,32(sp)

        rdctl r5, estatus
  44:	000b307a 	rdctl	r5,estatus

        stw   r8,  36(sp)
  48:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
  4c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
  50:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
  54:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
  58:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
  5c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
  60:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
  64:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
  68:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
  6c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  70:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
  74:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
  78:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
  7c:	10000326 	beq	r2,zero,8c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
  80:	20000226 	beq	r4,zero,8c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
  84:	00000ec0 	call	ec <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
  88:	00000306 	br	98 <alt_exception+0x78>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
  8c:	df401215 	stw	ea,72(sp)
        ldw   r2, -4(ea)   /* Instruction that caused exception */
  90:	e8bfff17 	ldw	r2,-4(ea)
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
  94:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
  98:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
  9c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
  a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
  a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
  a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
  ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
  b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
  b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
  b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
  bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
  c0:	d9c00817 	ldw	r7,32(sp)
#ifdef ALT_STACK_CHECK
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif
#endif

        ldw   r8,  36(sp)
  c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
  c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
  cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
  d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
  d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
  d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
  dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
  e0:	dbc01017 	ldw	r15,64(sp)
#endif

        ldw   sp,  76(sp)

#else
        addi  sp, sp, 76
  e4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
  e8:	ef80083a 	eret

000000ec <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
  ec:	defff904 	addi	sp,sp,-28
  f0:	dfc00615 	stw	ra,24(sp)
  f4:	df000515 	stw	fp,20(sp)
  f8:	df000504 	addi	fp,sp,20
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
  fc:	0005313a 	rdctl	r2,ipending
 100:	e0bffc15 	stw	r2,-16(fp)

  return active;
 104:	e0bffc17 	ldw	r2,-16(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 108:	e0bfff15 	stw	r2,-4(fp)

  do
  {
    i = 0;
 10c:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 110:	00800044 	movi	r2,1
 114:	e0bffe15 	stw	r2,-8(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 118:	e0ffff17 	ldw	r3,-4(fp)
 11c:	e0bffe17 	ldw	r2,-8(fp)
 120:	1884703a 	and	r2,r3,r2
 124:	1005003a 	cmpeq	r2,r2,zero
 128:	1000161e 	bne	r2,zero,184 <alt_irq_handler+0x98>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 12c:	e0bffd17 	ldw	r2,-12(fp)
 130:	00c00074 	movhi	r3,1
 134:	18cca504 	addi	r3,r3,12948
 138:	100490fa 	slli	r2,r2,3
 13c:	10c5883a 	add	r2,r2,r3
 140:	11400017 	ldw	r5,0(r2)
 144:	e0bffd17 	ldw	r2,-12(fp)
 148:	00c00074 	movhi	r3,1
 14c:	18cca504 	addi	r3,r3,12948
 150:	100490fa 	slli	r2,r2,3
 154:	10c5883a 	add	r2,r2,r3
 158:	10800104 	addi	r2,r2,4
 15c:	11000017 	ldw	r4,0(r2)
 160:	283ee83a 	callr	r5
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 164:	0005313a 	rdctl	r2,ipending
 168:	e0bffb15 	stw	r2,-20(fp)

  return active;
 16c:	e0bffb17 	ldw	r2,-20(fp)
      mask <<= 1;
      i++;

    } while (1);

    active = alt_irq_pending ();
 170:	e0bfff15 	stw	r2,-4(fp)
    
  } while (active);
 174:	e0bfff17 	ldw	r2,-4(fp)
 178:	1004c03a 	cmpne	r2,r2,zero
 17c:	103fe31e 	bne	r2,zero,10c <alt_irq_handler+0x20>
 180:	00000706 	br	1a0 <alt_irq_handler+0xb4>
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
 184:	e0bffe17 	ldw	r2,-8(fp)
 188:	1085883a 	add	r2,r2,r2
 18c:	e0bffe15 	stw	r2,-8(fp)
      i++;
 190:	e0bffd17 	ldw	r2,-12(fp)
 194:	10800044 	addi	r2,r2,1
 198:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 19c:	003fde06 	br	118 <alt_irq_handler+0x2c>
  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
}
 1a0:	e037883a 	mov	sp,fp
 1a4:	dfc00117 	ldw	ra,4(sp)
 1a8:	df000017 	ldw	fp,0(sp)
 1ac:	dec00204 	addi	sp,sp,8
 1b0:	f800283a 	ret

Disassembly of section .text:

000001b4 <_start>:
#if (NIOS2_NUM_OF_SHADOW_REG_SETS == 0)    
    /*
     * Now that the caches are initialized, set up the stack pointer.
     * The value provided by the linker is assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
     1b4:	06c20034 	movhi	sp,2048
    ori sp, sp, %lo(__alt_stack_pointer)
     1b8:	dec00014 	ori	sp,sp,0

    /* Set up the global pointer. */
    movhi gp, %hi(_gp)
     1bc:	06800074 	movhi	gp,1
    ori gp, gp, %lo(_gp)
     1c0:	d6a52b14 	ori	gp,gp,38060
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
     1c4:	00800074 	movhi	r2,1
    ori r2, r2, %lo(__bss_start)
     1c8:	108c8714 	ori	r2,r2,12828

    movhi r3, %hi(__bss_end)
     1cc:	00c00074 	movhi	r3,1
    ori r3, r3, %lo(__bss_end)
     1d0:	18cd4914 	ori	r3,r3,13604

    beq r2, r3, 1f
     1d4:	10c00326 	beq	r2,r3,1e4 <_start+0x30>

0:
    stw zero, (r2)
     1d8:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
     1dc:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
     1e0:	10fffd36 	bltu	r2,r3,1d8 <_start+0x24>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
     1e4:	000b5100 	call	b510 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
     1e8:	000b74c0 	call	b74c <alt_main>

000001ec <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
     1ec:	003fff06 	br	1ec <alt_after_alt_main>

000001f0 <LCD_Init>:
#include <io.h>
#include "system.h"
#include "LCD.h"
//-------------------------------------------------------------------------
void LCD_Init()
{
     1f0:	defffe04 	addi	sp,sp,-8
     1f4:	dfc00115 	stw	ra,4(sp)
     1f8:	df000015 	stw	fp,0(sp)
     1fc:	d839883a 	mov	fp,sp
  lcd_write_cmd(LCD_BASE,0x38); 
     200:	00c20034 	movhi	r3,2048
     204:	18c02404 	addi	r3,r3,144
     208:	00800e04 	movi	r2,56
     20c:	18800035 	stwio	r2,0(r3)
  usleep(2000);
     210:	0101f404 	movi	r4,2000
     214:	000bc380 	call	bc38 <usleep>
  lcd_write_cmd(LCD_BASE,0x0C);
     218:	00c20034 	movhi	r3,2048
     21c:	18c02404 	addi	r3,r3,144
     220:	00800304 	movi	r2,12
     224:	18800035 	stwio	r2,0(r3)
  usleep(2000);
     228:	0101f404 	movi	r4,2000
     22c:	000bc380 	call	bc38 <usleep>
  lcd_write_cmd(LCD_BASE,0x01);
     230:	00c20034 	movhi	r3,2048
     234:	18c02404 	addi	r3,r3,144
     238:	00800044 	movi	r2,1
     23c:	18800035 	stwio	r2,0(r3)
  usleep(2000);
     240:	0101f404 	movi	r4,2000
     244:	000bc380 	call	bc38 <usleep>
  lcd_write_cmd(LCD_BASE,0x06);
     248:	00c20034 	movhi	r3,2048
     24c:	18c02404 	addi	r3,r3,144
     250:	00800184 	movi	r2,6
     254:	18800035 	stwio	r2,0(r3)
  usleep(2000);
     258:	0101f404 	movi	r4,2000
     25c:	000bc380 	call	bc38 <usleep>
  lcd_write_cmd(LCD_BASE,0x80);
     260:	00c20034 	movhi	r3,2048
     264:	18c02404 	addi	r3,r3,144
     268:	00802004 	movi	r2,128
     26c:	18800035 	stwio	r2,0(r3)
  usleep(2000);
     270:	0101f404 	movi	r4,2000
     274:	000bc380 	call	bc38 <usleep>
}
     278:	e037883a 	mov	sp,fp
     27c:	dfc00117 	ldw	ra,4(sp)
     280:	df000017 	ldw	fp,0(sp)
     284:	dec00204 	addi	sp,sp,8
     288:	f800283a 	ret

0000028c <LCD_Show_Text>:
//-------------------------------------------------------------------------
void LCD_Show_Text(char* Text)
{
     28c:	defffb04 	addi	sp,sp,-20
     290:	dfc00415 	stw	ra,16(sp)
     294:	df000315 	stw	fp,12(sp)
     298:	dc000215 	stw	r16,8(sp)
     29c:	df000204 	addi	fp,sp,8
     2a0:	e13fff15 	stw	r4,-4(fp)
  int i;
  for(i=0;i<strlen(Text);i++)
     2a4:	e03ffe15 	stw	zero,-8(fp)
     2a8:	00001006 	br	2ec <LCD_Show_Text+0x60>
  {
    lcd_write_data(LCD_BASE,Text[i]);
     2ac:	e0bffe17 	ldw	r2,-8(fp)
     2b0:	1007883a 	mov	r3,r2
     2b4:	e0bfff17 	ldw	r2,-4(fp)
     2b8:	1885883a 	add	r2,r3,r2
     2bc:	10800003 	ldbu	r2,0(r2)
     2c0:	10c03fcc 	andi	r3,r2,255
     2c4:	18c0201c 	xori	r3,r3,128
     2c8:	18ffe004 	addi	r3,r3,-128
     2cc:	00820034 	movhi	r2,2048
     2d0:	10802604 	addi	r2,r2,152
     2d4:	10c00035 	stwio	r3,0(r2)
    usleep(2000);
     2d8:	0101f404 	movi	r4,2000
     2dc:	000bc380 	call	bc38 <usleep>
}
//-------------------------------------------------------------------------
void LCD_Show_Text(char* Text)
{
  int i;
  for(i=0;i<strlen(Text);i++)
     2e0:	e0bffe17 	ldw	r2,-8(fp)
     2e4:	10800044 	addi	r2,r2,1
     2e8:	e0bffe15 	stw	r2,-8(fp)
     2ec:	e43ffe17 	ldw	r16,-8(fp)
     2f0:	e13fff17 	ldw	r4,-4(fp)
     2f4:	00024180 	call	2418 <strlen>
     2f8:	80bfec36 	bltu	r16,r2,2ac <LCD_Show_Text+0x20>
  {
    lcd_write_data(LCD_BASE,Text[i]);
    usleep(2000);
  }
}
     2fc:	e037883a 	mov	sp,fp
     300:	dfc00217 	ldw	ra,8(sp)
     304:	df000117 	ldw	fp,4(sp)
     308:	dc000017 	ldw	r16,0(sp)
     30c:	dec00304 	addi	sp,sp,12
     310:	f800283a 	ret

00000314 <LCD_Line1>:
//-------------------------------------------------------------------------
void LCD_Line1()
{
     314:	defffe04 	addi	sp,sp,-8
     318:	dfc00115 	stw	ra,4(sp)
     31c:	df000015 	stw	fp,0(sp)
     320:	d839883a 	mov	fp,sp
  lcd_write_cmd(LCD_BASE,0x80);
     324:	00c20034 	movhi	r3,2048
     328:	18c02404 	addi	r3,r3,144
     32c:	00802004 	movi	r2,128
     330:	18800035 	stwio	r2,0(r3)
  usleep(2000);
     334:	0101f404 	movi	r4,2000
     338:	000bc380 	call	bc38 <usleep>
}
     33c:	e037883a 	mov	sp,fp
     340:	dfc00117 	ldw	ra,4(sp)
     344:	df000017 	ldw	fp,0(sp)
     348:	dec00204 	addi	sp,sp,8
     34c:	f800283a 	ret

00000350 <LCD_Line2>:
void LCD_Line2()
{
     350:	defffe04 	addi	sp,sp,-8
     354:	dfc00115 	stw	ra,4(sp)
     358:	df000015 	stw	fp,0(sp)
     35c:	d839883a 	mov	fp,sp
  lcd_write_cmd(LCD_BASE,0xC0);
     360:	00c20034 	movhi	r3,2048
     364:	18c02404 	addi	r3,r3,144
     368:	00803004 	movi	r2,192
     36c:	18800035 	stwio	r2,0(r3)
  usleep(2000);
     370:	0101f404 	movi	r4,2000
     374:	000bc380 	call	bc38 <usleep>
}
     378:	e037883a 	mov	sp,fp
     37c:	dfc00117 	ldw	ra,4(sp)
     380:	df000017 	ldw	fp,0(sp)
     384:	dec00204 	addi	sp,sp,8
     388:	f800283a 	ret

0000038c <LCD_Test>:
//-------------------------------------------------------------------------
void LCD_Test()
{
     38c:	defff604 	addi	sp,sp,-40
     390:	dfc00915 	stw	ra,36(sp)
     394:	df000815 	stw	fp,32(sp)
     398:	df000804 	addi	fp,sp,32
  char Text1[16] = " Altera DE2-115 ";
     39c:	00c00074 	movhi	r3,1
     3a0:	18fb1b04 	addi	r3,r3,-5012
     3a4:	18800017 	ldw	r2,0(r3)
     3a8:	e0bff815 	stw	r2,-32(fp)
     3ac:	18800117 	ldw	r2,4(r3)
     3b0:	e0bff915 	stw	r2,-28(fp)
     3b4:	18800217 	ldw	r2,8(r3)
     3b8:	e0bffa15 	stw	r2,-24(fp)
     3bc:	18800317 	ldw	r2,12(r3)
     3c0:	e0bffb15 	stw	r2,-20(fp)
  char Text2[16] = "USB Device Test ";
     3c4:	00c00074 	movhi	r3,1
     3c8:	18fb2004 	addi	r3,r3,-4992
     3cc:	18800017 	ldw	r2,0(r3)
     3d0:	e0bffc15 	stw	r2,-16(fp)
     3d4:	18800117 	ldw	r2,4(r3)
     3d8:	e0bffd15 	stw	r2,-12(fp)
     3dc:	18800217 	ldw	r2,8(r3)
     3e0:	e0bffe15 	stw	r2,-8(fp)
     3e4:	18800317 	ldw	r2,12(r3)
     3e8:	e0bfff15 	stw	r2,-4(fp)
  //  Initial LCD
  LCD_Init();
     3ec:	00001f00 	call	1f0 <LCD_Init>
  //  Show Text to LCD
  LCD_Show_Text(Text1);
     3f0:	e13ff804 	addi	r4,fp,-32
     3f4:	000028c0 	call	28c <LCD_Show_Text>
  //  Change Line2
  LCD_Line2();
     3f8:	00003500 	call	350 <LCD_Line2>
  //  Show Text to LCD
  LCD_Show_Text(Text2);
     3fc:	e13ffc04 	addi	r4,fp,-16
     400:	000028c0 	call	28c <LCD_Show_Text>
}
     404:	e037883a 	mov	sp,fp
     408:	dfc00117 	ldw	ra,4(sp)
     40c:	df000017 	ldw	fp,0(sp)
     410:	dec00204 	addi	sp,sp,8
     414:	f800283a 	ret

00000418 <dc_init_struct>:

DEVICE_STATUS device_status;


void dc_init_struct(void)
{
     418:	deffff04 	addi	sp,sp,-4
     41c:	df000015 	stw	fp,0(sp)
     420:	d839883a 	mov	fp,sp
    device_status.hpi_status = 0; 
     424:	00800074 	movhi	r2,1
     428:	108ca004 	addi	r2,r2,12928
     42c:	1000000d 	sth	zero,0(r2)
    device_status.bEP1InTransfer = FALSE;
     430:	00800074 	movhi	r2,1
     434:	108ca004 	addi	r2,r2,12928
     438:	10000115 	stw	zero,4(r2)
    device_status.bEP2InTransfer = FALSE;
     43c:	00800074 	movhi	r2,1
     440:	108ca004 	addi	r2,r2,12928
     444:	10000215 	stw	zero,8(r2)
    device_status.EP1_Transfer_Timeout = 0;
     448:	00800074 	movhi	r2,1
     44c:	108ca004 	addi	r2,r2,12928
     450:	10000415 	stw	zero,16(r2)
    device_status.bEP1_Transfer_Judge = FALSE;
     454:	00800074 	movhi	r2,1
     458:	108ca004 	addi	r2,r2,12928
     45c:	10000315 	stw	zero,12(r2)
}
     460:	e037883a 	mov	sp,fp
     464:	df000017 	ldw	fp,0(sp)
     468:	dec00104 	addi	sp,sp,4
     46c:	f800283a 	ret

00000470 <dc_clear_bug>:

void dc_clear_bug(void)
{
     470:	defffd04 	addi	sp,sp,-12
     474:	dfc00215 	stw	ra,8(sp)
     478:	df000115 	stw	fp,4(sp)
     47c:	df000104 	addi	fp,sp,4
            DEBUG_OUT("Clear up the interrupt\r\n");
     480:	01000074 	movhi	r4,1
     484:	213b2504 	addi	r4,r4,-4972
     488:	000227c0 	call	227c <printf>
     48c:	01000074 	movhi	r4,1
     490:	213b2704 	addi	r4,r4,-4964
     494:	00023940 	call	2394 <puts>
            alt_u16 intStat;
            hpi_read_mbx();
     498:	00016b40 	call	16b4 <hpi_read_mbx>
            hpi_read_status();
     49c:	00016540 	call	1654 <hpi_read_status>

            // Had to add the write due to a bug in BIOS where they overwrite
            // the mailbox after initialization with garbage.  The read clears
            // any pending interrupts.
             hpi_read_reg (HPI_SIE1_MSG_ADR, &intStat);
     4a0:	01005104 	movi	r4,324
     4a4:	e17fff04 	addi	r5,fp,-4
     4a8:	00015d40 	call	15d4 <hpi_read_reg>
             hpi_write_reg (HPI_SIE1_MSG_ADR, 0);
     4ac:	01005104 	movi	r4,324
     4b0:	000b883a 	mov	r5,zero
     4b4:	00016180 	call	1618 <hpi_write_reg>
            hpi_read_reg (HPI_SIE2_MSG_ADR, &intStat);
     4b8:	01005204 	movi	r4,328
     4bc:	e17fff04 	addi	r5,fp,-4
     4c0:	00015d40 	call	15d4 <hpi_read_reg>
            hpi_write_reg (HPI_SIE2_MSG_ADR, 0);
     4c4:	01005204 	movi	r4,328
     4c8:	000b883a 	mov	r5,zero
     4cc:	00016180 	call	1618 <hpi_write_reg>

            hpi_write_reg (HOST1_STAT_REG, 0xFFFF);
     4d0:	01302414 	movui	r4,49296
     4d4:	017fffd4 	movui	r5,65535
     4d8:	00016180 	call	1618 <hpi_write_reg>
            hpi_write_reg (HOST2_STAT_REG, 0xFFFF);   
     4dc:	01302c14 	movui	r4,49328
     4e0:	017fffd4 	movui	r5,65535
     4e4:	00016180 	call	1618 <hpi_write_reg>
}
     4e8:	e037883a 	mov	sp,fp
     4ec:	dfc00117 	ldw	ra,4(sp)
     4f0:	df000017 	ldw	fp,0(sp)
     4f4:	dec00204 	addi	sp,sp,8
     4f8:	f800283a 	ret

000004fc <dc_download>:
 *  RETURNS: 
 *    SUCCESS         - Success
 *    ERROR           - Failure
 */
int dc_download(char * download_data,int max_try)
{
     4fc:	defff904 	addi	sp,sp,-28
     500:	dfc00615 	stw	ra,24(sp)
     504:	df000515 	stw	fp,20(sp)
     508:	df000504 	addi	fp,sp,20
     50c:	e13ffe15 	stw	r4,-8(fp)
     510:	e17fff15 	stw	r5,-4(fp)
    DEBUG_OUT("+ dc_download ---- \n");
     514:	01000074 	movhi	r4,1
     518:	213b2504 	addi	r4,r4,-4972
     51c:	000227c0 	call	227c <printf>
     520:	01000074 	movhi	r4,1
     524:	213b2d04 	addi	r4,r4,-4940
     528:	00023940 	call	2394 <puts>
    int try_i=0;
     52c:	e03ffd15 	stw	zero,-12(fp)
    int response = ERROR;
     530:	00bfffc4 	movi	r2,-1
     534:	e0bffc15 	stw	r2,-16(fp)
    unsigned short address;
    unsigned short download_length;   

    while((try_i<max_try)&&(response == ERROR)){
     538:	00003306 	br	608 <dc_download+0x10c>

       /* Download asm code array to ASIC RAM  */
       if (download_data != NULL) {
     53c:	e0bffe17 	ldw	r2,-8(fp)
     540:	1005003a 	cmpeq	r2,r2,zero
     544:	1000231e 	bne	r2,zero,5d4 <dc_download+0xd8>
           dc_clear_bug();
     548:	00004700 	call	470 <dc_clear_bug>

          /* Org address */
          address = get_ushort(download_data, 0xe);
     54c:	e13ffe17 	ldw	r4,-8(fp)
     550:	01400384 	movi	r5,14
     554:	00018640 	call	1864 <get_ushort>
     558:	e0bffb8d 	sth	r2,-18(fp)

          download_length = get_ushort(download_data, 0xb) - 2;
     55c:	e13ffe17 	ldw	r4,-8(fp)
     560:	014002c4 	movi	r5,11
     564:	00018640 	call	1864 <get_ushort>
     568:	10bfff84 	addi	r2,r2,-2
     56c:	e0bffb0d 	sth	r2,-20(fp)

          DEBUG_OUT("dc_download: address=0x%x, download_length=0x%x\r\n", address, download_length);
     570:	01000074 	movhi	r4,1
     574:	213b2504 	addi	r4,r4,-4972
     578:	000227c0 	call	227c <printf>
     57c:	e17ffb8b 	ldhu	r5,-18(fp)
     580:	e1bffb0b 	ldhu	r6,-20(fp)
     584:	01000074 	movhi	r4,1
     588:	213b3204 	addi	r4,r4,-4920
     58c:	000227c0 	call	227c <printf>

          if ((response = dc_download_code(address, download_length,
     590:	e13ffb8b 	ldhu	r4,-18(fp)
     594:	e17ffb0b 	ldhu	r5,-20(fp)
     598:	e0bffe17 	ldw	r2,-8(fp)
     59c:	11800404 	addi	r6,r2,16
     5a0:	00006500 	call	650 <dc_download_code>
     5a4:	e0bffc15 	stw	r2,-16(fp)
     5a8:	e0bffc17 	ldw	r2,-16(fp)
     5ac:	10bfffd8 	cmpnei	r2,r2,-1
     5b0:	10001b1e 	bne	r2,zero,620 <dc_download+0x124>
                              &download_data[16] )) == ERROR) 
           {
             DEBUG_ERR("dc_download: download error,  try_count=%d\r\n",try_i);
     5b4:	01000074 	movhi	r4,1
     5b8:	213b3f04 	addi	r4,r4,-4868
     5bc:	000227c0 	call	227c <printf>
     5c0:	01000074 	movhi	r4,1
     5c4:	213b4204 	addi	r4,r4,-4856
     5c8:	e17ffd17 	ldw	r5,-12(fp)
     5cc:	000227c0 	call	227c <printf>
     5d0:	00000806 	br	5f4 <dc_download+0xf8>
           }else{
               goto _Finished_Download;
           }
    
         } else {
            DEBUG_OUT("dc_download:Null Code--Nothing had being download to the ASIC Ram!!");
     5d4:	01000074 	movhi	r4,1
     5d8:	213b2504 	addi	r4,r4,-4972
     5dc:	000227c0 	call	227c <printf>
     5e0:	01000074 	movhi	r4,1
     5e4:	213b4e04 	addi	r4,r4,-4808
     5e8:	000227c0 	call	227c <printf>
            response = ERROR;
     5ec:	00bfffc4 	movi	r2,-1
     5f0:	e0bffc15 	stw	r2,-16(fp)
      }
       try_i++;
     5f4:	e0bffd17 	ldw	r2,-12(fp)
     5f8:	10800044 	addi	r2,r2,1
     5fc:	e0bffd15 	stw	r2,-12(fp)
       usleep(10000);
     600:	0109c404 	movi	r4,10000
     604:	000bc380 	call	bc38 <usleep>
    int try_i=0;
    int response = ERROR;
    unsigned short address;
    unsigned short download_length;   

    while((try_i<max_try)&&(response == ERROR)){
     608:	e0fffd17 	ldw	r3,-12(fp)
     60c:	e0bfff17 	ldw	r2,-4(fp)
     610:	1880030e 	bge	r3,r2,620 <dc_download+0x124>
     614:	e0bffc17 	ldw	r2,-16(fp)
     618:	10bfffe0 	cmpeqi	r2,r2,-1
     61c:	103fc71e 	bne	r2,zero,53c <dc_download+0x40>
      }
       try_i++;
       usleep(10000);
    }
_Finished_Download:
    DEBUG_OUT("- dc_download ---- \n");
     620:	01000074 	movhi	r4,1
     624:	213b2504 	addi	r4,r4,-4972
     628:	000227c0 	call	227c <printf>
     62c:	01000074 	movhi	r4,1
     630:	213b5f04 	addi	r4,r4,-4740
     634:	00023940 	call	2394 <puts>
return response;
     638:	e0bffc17 	ldw	r2,-16(fp)


}
     63c:	e037883a 	mov	sp,fp
     640:	dfc00117 	ldw	ra,4(sp)
     644:	df000017 	ldw	fp,0(sp)
     648:	dec00204 	addi	sp,sp,8
     64c:	f800283a 	ret

00000650 <dc_download_code>:
 */

int dc_download_code(unsigned short chip_addr,
                      int byte_length,
                      char * data)
{
     650:	defff704 	addi	sp,sp,-36
     654:	dfc00815 	stw	ra,32(sp)
     658:	df000715 	stw	fp,28(sp)
     65c:	df000704 	addi	fp,sp,28
     660:	e17ffe15 	stw	r5,-8(fp)
     664:	e1bfff15 	stw	r6,-4(fp)
     668:	e13ffd0d 	sth	r4,-12(fp)
    int response = ERROR;
     66c:	00bfffc4 	movi	r2,-1
     670:	e0bffc15 	stw	r2,-16(fp)

    if (byte_length > 0) {
     674:	e0bffe17 	ldw	r2,-8(fp)
     678:	10800050 	cmplti	r2,r2,1
     67c:	10003e1e 	bne	r2,zero,778 <dc_download_code+0x128>

        response = hpi_write_memory(chip_addr, data,byte_length);
     680:	e13ffd0b 	ldhu	r4,-12(fp)
     684:	e17fff17 	ldw	r5,-4(fp)
     688:	e1bffe17 	ldw	r6,-8(fp)
     68c:	00013f80 	call	13f8 <hpi_write_memory>
     690:	e0bffc15 	stw	r2,-16(fp)
        char *cmpdata;
        cmpdata = malloc(byte_length);
     694:	e13ffe17 	ldw	r4,-8(fp)
     698:	0001b280 	call	1b28 <malloc>
     69c:	e0bffb15 	stw	r2,-20(fp)
        hpi_read_memory(chip_addr,cmpdata,byte_length);
     6a0:	e13ffd0b 	ldhu	r4,-12(fp)
     6a4:	e17ffb17 	ldw	r5,-20(fp)
     6a8:	e1bffe17 	ldw	r6,-8(fp)
     6ac:	00012c80 	call	12c8 <hpi_read_memory>
        int  i;
        bool data_checker = TRUE;
     6b0:	00800044 	movi	r2,1
     6b4:	e0bff915 	stw	r2,-28(fp)
        for(i=0;i<byte_length; i++)
     6b8:	e03ffa15 	stw	zero,-24(fp)
     6bc:	00001706 	br	71c <dc_download_code+0xcc>
        {
         if(*(data+i) != *(cmpdata+i)) {
     6c0:	e0bffa17 	ldw	r2,-24(fp)
     6c4:	1007883a 	mov	r3,r2
     6c8:	e0bfff17 	ldw	r2,-4(fp)
     6cc:	1885883a 	add	r2,r3,r2
     6d0:	11000003 	ldbu	r4,0(r2)
     6d4:	e0bffa17 	ldw	r2,-24(fp)
     6d8:	1007883a 	mov	r3,r2
     6dc:	e0bffb17 	ldw	r2,-20(fp)
     6e0:	1885883a 	add	r2,r3,r2
     6e4:	10800003 	ldbu	r2,0(r2)
     6e8:	20c03fcc 	andi	r3,r4,255
     6ec:	18c0201c 	xori	r3,r3,128
     6f0:	18ffe004 	addi	r3,r3,-128
     6f4:	10803fcc 	andi	r2,r2,255
     6f8:	1080201c 	xori	r2,r2,128
     6fc:	10bfe004 	addi	r2,r2,-128
     700:	18800326 	beq	r3,r2,710 <dc_download_code+0xc0>
            //DEBUG_OUT("err[%d]: wrdata:0x%02X,rddata :0x%02X\n",i,(char)*(data+i),(char)*(cmpdata+i));
           // DEBUG_OUT("err[%d],",i);
            data_checker =  FALSE ;
     704:	e03ff915 	stw	zero,-28(fp)
            response     =  ERROR;
     708:	00bfffc4 	movi	r2,-1
     70c:	e0bffc15 	stw	r2,-16(fp)
        char *cmpdata;
        cmpdata = malloc(byte_length);
        hpi_read_memory(chip_addr,cmpdata,byte_length);
        int  i;
        bool data_checker = TRUE;
        for(i=0;i<byte_length; i++)
     710:	e0bffa17 	ldw	r2,-24(fp)
     714:	10800044 	addi	r2,r2,1
     718:	e0bffa15 	stw	r2,-24(fp)
     71c:	e0fffa17 	ldw	r3,-24(fp)
     720:	e0bffe17 	ldw	r2,-8(fp)
     724:	18bfe616 	blt	r3,r2,6c0 <dc_download_code+0x70>
            data_checker =  FALSE ;
            response     =  ERROR;
            }
        }

       free(cmpdata);
     728:	e13ffb17 	ldw	r4,-20(fp)
     72c:	0001b140 	call	1b14 <free>

       if( data_checker == FALSE )
     730:	e0bff917 	ldw	r2,-28(fp)
     734:	1004c03a 	cmpne	r2,r2,zero
     738:	1000061e 	bne	r2,zero,754 <dc_download_code+0x104>
       {
        DEBUG_ERR("Data Checker ERROR! \n");
     73c:	01000074 	movhi	r4,1
     740:	213b3f04 	addi	r4,r4,-4868
     744:	000227c0 	call	227c <printf>
     748:	01000074 	movhi	r4,1
     74c:	213b6404 	addi	r4,r4,-4720
     750:	00023940 	call	2394 <puts>
       }

       if ( response == SUCCESS) {
     754:	e0bffc17 	ldw	r2,-16(fp)
     758:	1004c03a 	cmpne	r2,r2,zero
     75c:	1000061e 	bne	r2,zero,778 <dc_download_code+0x128>
           
             //COMM_JUMP2CODE flag,it will be cleared when mailbox Ack
              hpi_write_reg(COMM_CODE_ADDR, chip_addr);
     760:	e17ffd0b 	ldhu	r5,-12(fp)
     764:	01006f04 	movi	r4,444
     768:	00016180 	call	1618 <hpi_write_reg>

              response = hpi_command(COMM_JUMP2CODE);
     76c:	01338014 	movui	r4,52736
     770:	00007900 	call	790 <hpi_command>
     774:	e0bffc15 	stw	r2,-16(fp)
          }
    }
    return response;
     778:	e0bffc17 	ldw	r2,-16(fp)
}
     77c:	e037883a 	mov	sp,fp
     780:	dfc00117 	ldw	ra,4(sp)
     784:	df000017 	ldw	fp,0(sp)
     788:	dec00204 	addi	sp,sp,8
     78c:	f800283a 	ret

00000790 <hpi_command>:

int hpi_command( unsigned short cmd)
{ 
     790:	defffa04 	addi	sp,sp,-24
     794:	dfc00515 	stw	ra,20(sp)
     798:	df000415 	stw	fp,16(sp)
     79c:	df000404 	addi	fp,sp,16
     7a0:	e13ffe0d 	sth	r4,-8(fp)
	alt_u32 Timeout;
    alt_u16 IntStat;
    
    IntStat= hpi_read_status();  // clear interrupt status register
     7a4:	00016540 	call	1654 <hpi_read_status>
     7a8:	e0bffc0d 	sth	r2,-16(fp)
    
    device_status.hpi_status |= IntStat; //record into hpi_status
     7ac:	00800074 	movhi	r2,1
     7b0:	108ca004 	addi	r2,r2,12928
     7b4:	10c0000b 	ldhu	r3,0(r2)
     7b8:	e0bffc0b 	ldhu	r2,-16(fp)
     7bc:	1884b03a 	or	r2,r3,r2
     7c0:	1007883a 	mov	r3,r2
     7c4:	00800074 	movhi	r2,1
     7c8:	108ca004 	addi	r2,r2,12928
     7cc:	10c0000d 	sth	r3,0(r2)
    
    hpi_write_mbx(cmd);
     7d0:	e13ffe0b 	ldhu	r4,-8(fp)
     7d4:	00016840 	call	1684 <hpi_write_mbx>
       
       IntStat= hpi_read_status();      
     7d8:	00016540 	call	1654 <hpi_read_status>
     7dc:	e0bffc0d 	sth	r2,-16(fp)
          device_status.hpi_status |= IntStat;   //record into hpi_status
     7e0:	00800074 	movhi	r2,1
     7e4:	108ca004 	addi	r2,r2,12928
     7e8:	10c0000b 	ldhu	r3,0(r2)
     7ec:	e0bffc0b 	ldhu	r2,-16(fp)
     7f0:	1884b03a 	or	r2,r3,r2
     7f4:	1007883a 	mov	r3,r2
     7f8:	00800074 	movhi	r2,1
     7fc:	108ca004 	addi	r2,r2,12928
     800:	10c0000d 	sth	r3,0(r2)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
     804:	00800074 	movhi	r2,1
     808:	108c9404 	addi	r2,r2,12880
     80c:	10800017 	ldw	r2,0(r2)
     810:	1007883a 	mov	r3,r2
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
     814:	00800074 	movhi	r2,1
     818:	108c9304 	addi	r2,r2,12876
     81c:	10800017 	ldw	r2,0(r2)

      Timeout = alt_nticks() + alt_ticks_per_second();
     820:	1885883a 	add	r2,r3,r2
     824:	e0bffd15 	stw	r2,-12(fp)
      while(((IntStat& MBX_OUT_FLG) == 0)&&(alt_nticks() < Timeout))
     828:	00000b06 	br	858 <hpi_command+0xc8>
      {
          IntStat= hpi_read_status();      
     82c:	00016540 	call	1654 <hpi_read_status>
     830:	e0bffc0d 	sth	r2,-16(fp)
          device_status.hpi_status |= IntStat;   //record into hpi_status
     834:	00800074 	movhi	r2,1
     838:	108ca004 	addi	r2,r2,12928
     83c:	10c0000b 	ldhu	r3,0(r2)
     840:	e0bffc0b 	ldhu	r2,-16(fp)
     844:	1884b03a 	or	r2,r3,r2
     848:	1007883a 	mov	r3,r2
     84c:	00800074 	movhi	r2,1
     850:	108ca004 	addi	r2,r2,12928
     854:	10c0000d 	sth	r3,0(r2)
       
       IntStat= hpi_read_status();      
          device_status.hpi_status |= IntStat;   //record into hpi_status

      Timeout = alt_nticks() + alt_ticks_per_second();
      while(((IntStat& MBX_OUT_FLG) == 0)&&(alt_nticks() < Timeout))
     858:	e0bffc0b 	ldhu	r2,-16(fp)
     85c:	1080004c 	andi	r2,r2,1
     860:	1004c03a 	cmpne	r2,r2,zero
     864:	1000061e 	bne	r2,zero,880 <hpi_command+0xf0>
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
     868:	00800074 	movhi	r2,1
     86c:	108c9404 	addi	r2,r2,12880
     870:	10800017 	ldw	r2,0(r2)
     874:	1007883a 	mov	r3,r2
     878:	e0bffd17 	ldw	r2,-12(fp)
     87c:	18bfeb36 	bltu	r3,r2,82c <hpi_command+0x9c>
      {
          IntStat= hpi_read_status();      
          device_status.hpi_status |= IntStat;   //record into hpi_status
       }

        return (( hpi_read_mbx() == COMM_ACK) ? SUCCESS : ERROR );
     880:	00016b40 	call	16b4 <hpi_read_mbx>
     884:	10bfffcc 	andi	r2,r2,65535
     888:	1083fb58 	cmpnei	r2,r2,4077
     88c:	1000021e 	bne	r2,zero,898 <hpi_command+0x108>
     890:	e03fff15 	stw	zero,-4(fp)
     894:	00000206 	br	8a0 <hpi_command+0x110>
     898:	00bfffc4 	movi	r2,-1
     89c:	e0bfff15 	stw	r2,-4(fp)
     8a0:	e0bfff17 	ldw	r2,-4(fp)
}
     8a4:	e037883a 	mov	sp,fp
     8a8:	dfc00117 	ldw	ra,4(sp)
     8ac:	df000017 	ldw	fp,0(sp)
     8b0:	dec00204 	addi	sp,sp,8
     8b4:	f800283a 	ret

000008b8 <usb_send_data>:
                  unsigned short send_buffer_location,
                  unsigned char * data,  // 
                  int byte_length
                  )

{
     8b8:	defff704 	addi	sp,sp,-36
     8bc:	dfc00815 	stw	ra,32(sp)
     8c0:	df000715 	stw	fp,28(sp)
     8c4:	df000704 	addi	fp,sp,28
     8c8:	e1bffe15 	stw	r6,-8(fp)
     8cc:	e1ffff15 	stw	r7,-4(fp)
     8d0:	e13ffc0d 	sth	r4,-16(fp)
     8d4:	e17ffd0d 	sth	r5,-12(fp)
    int response = ERROR;
     8d8:	00bfffc4 	movi	r2,-1
     8dc:	e0bff915 	stw	r2,-28(fp)
    if(endpoint == 1) {
     8e0:	e0bffc0b 	ldhu	r2,-16(fp)
     8e4:	10800058 	cmpnei	r2,r2,1
     8e8:	1000371e 	bne	r2,zero,9c8 <usb_send_data+0x110>
  
       if(device_status.bEP1InTransfer == FALSE) {     
     8ec:	00800074 	movhi	r2,1
     8f0:	108ca004 	addi	r2,r2,12928
     8f4:	10800117 	ldw	r2,4(r2)
     8f8:	1004c03a 	cmpne	r2,r2,zero
     8fc:	1000321e 	bne	r2,zero,9c8 <usb_send_data+0x110>
       //you can set bEP1InTransfer TRUE when you want to make sure this transaction to finish
       //then you also need to do something when  you need to send data while endpoint is in transfer (list to send ??)
       
              TRANSFER_FRAME frame;
    
              frame.wNextLink = 0;
     900:	e03ffa0d 	sth	zero,-24(fp)
              frame.wAddress = send_buffer_location;
     904:	e0bffd0b 	ldhu	r2,-12(fp)
     908:	e0bffa8d 	sth	r2,-22(fp)
              frame.wLength  = byte_length; 
     90c:	e0bfff17 	ldw	r2,-4(fp)
     910:	e0bffb0d 	sth	r2,-20(fp)
              frame.wCallBack = 0;
     914:	e03ffb8d 	sth	zero,-18(fp)
    
              /* write the data to the RAM buffer */
              hpi_write_memory(send_buffer_location,(char *)data,byte_length);
     918:	e13ffd0b 	ldhu	r4,-12(fp)
     91c:	e17ffe17 	ldw	r5,-8(fp)
     920:	e1bfff17 	ldw	r6,-4(fp)
     924:	00013f80 	call	13f8 <hpi_write_memory>
    
              /* Write control structure to the RAM buffer */
              hpi_write_memory(EP1_TRANSFER_STRUCT_ADDRESS,(char*)&frame,sizeof(TRANSFER_FRAME));
     928:	e17ffa04 	addi	r5,fp,-24
     92c:	01040004 	movi	r4,4096
     930:	01800204 	movi	r6,8
     934:	00013f80 	call	13f8 <hpi_write_memory>
           
             //execute SUSB2_SEND_INT
                hpi_write_reg(COMM_INT_NUM,SUSB2_SEND_INT);
     938:	01007084 	movi	r4,450
     93c:	01401804 	movi	r5,96
     940:	00016180 	call	1618 <hpi_write_reg>
    
                /* Set Register values */
                hpi_write_reg(COMM_R0, 0);
     944:	01007104 	movi	r4,452
     948:	000b883a 	mov	r5,zero
     94c:	00016180 	call	1618 <hpi_write_reg>
                hpi_write_reg(COMM_R1, endpoint&0x000f);
     950:	e0bffc0b 	ldhu	r2,-16(fp)
     954:	114003cc 	andi	r5,r2,15
     958:	01007184 	movi	r4,454
     95c:	00016180 	call	1618 <hpi_write_reg>
                hpi_write_reg(COMM_R8, EP1_TRANSFER_STRUCT_ADDRESS);
     960:	01007504 	movi	r4,468
     964:	01440004 	movi	r5,4096
     968:	00016180 	call	1618 <hpi_write_reg>
          
                response = hpi_command(COMM_EXEC_INT);
     96c:	01338054 	movui	r4,52737
     970:	00007900 	call	790 <hpi_command>
     974:	e0bff915 	stw	r2,-28(fp)
            
              if(response == SUCCESS){ DEBUG_OUT("send success!\n");
     978:	e0bff917 	ldw	r2,-28(fp)
     97c:	1004c03a 	cmpne	r2,r2,zero
     980:	10000b1e 	bne	r2,zero,9b0 <usb_send_data+0xf8>
     984:	01000074 	movhi	r4,1
     988:	213b2504 	addi	r4,r4,-4972
     98c:	000227c0 	call	227c <printf>
     990:	01000074 	movhi	r4,1
     994:	213b6a04 	addi	r4,r4,-4696
     998:	00023940 	call	2394 <puts>
              device_status.bEP1InTransfer = TRUE;
     99c:	00c00074 	movhi	r3,1
     9a0:	18cca004 	addi	r3,r3,12928
     9a4:	00800044 	movi	r2,1
     9a8:	18800115 	stw	r2,4(r3)
     9ac:	00000606 	br	9c8 <usb_send_data+0x110>
              }
              else   { DEBUG_OUT("send failed!\n");}
     9b0:	01000074 	movhi	r4,1
     9b4:	213b2504 	addi	r4,r4,-4972
     9b8:	000227c0 	call	227c <printf>
     9bc:	01000074 	movhi	r4,1
     9c0:	213b6e04 	addi	r4,r4,-4680
     9c4:	00023940 	call	2394 <puts>
    }
    else{
     // Do something here for other endpoint 
    // DEBUG_OUT("usb_send_data: endpoint %d. Nothing had beeing done!\n",endpoint);
    }
   return response ;
     9c8:	e0bff917 	ldw	r2,-28(fp)
}
     9cc:	e037883a 	mov	sp,fp
     9d0:	dfc00117 	ldw	ra,4(sp)
     9d4:	df000017 	ldw	fp,0(sp)
     9d8:	dec00204 	addi	sp,sp,8
     9dc:	f800283a 	ret

000009e0 <usb_enable_receive_data>:
                  unsigned short endpoint,
                  unsigned short receive_buffer_location,
                  int byte_length
                  )

{
     9e0:	defff804 	addi	sp,sp,-32
     9e4:	dfc00715 	stw	ra,28(sp)
     9e8:	df000615 	stw	fp,24(sp)
     9ec:	df000604 	addi	fp,sp,24
     9f0:	e1bfff15 	stw	r6,-4(fp)
     9f4:	e13ffd0d 	sth	r4,-12(fp)
     9f8:	e17ffe0d 	sth	r5,-8(fp)
    int response = ERROR;
     9fc:	00bfffc4 	movi	r2,-1
     a00:	e0bffa15 	stw	r2,-24(fp)
        if(endpoint == 2) {
     a04:	e0bffd0b 	ldhu	r2,-12(fp)
     a08:	10800098 	cmpnei	r2,r2,2
     a0c:	1000371e 	bne	r2,zero,aec <usb_enable_receive_data+0x10c>
  
       if(device_status.bEP2InTransfer == FALSE) {   
     a10:	00800074 	movhi	r2,1
     a14:	108ca004 	addi	r2,r2,12928
     a18:	10800217 	ldw	r2,8(r2)
     a1c:	1004c03a 	cmpne	r2,r2,zero
     a20:	10002b1e 	bne	r2,zero,ad0 <usb_enable_receive_data+0xf0>
        
//            device_status.bEP2InTransfer = TRUE;
      
            TRANSFER_FRAME frame;
            
            frame.wNextLink = 0;
     a24:	e03ffb0d 	sth	zero,-20(fp)
            frame.wAddress = receive_buffer_location;
     a28:	e0bffe0b 	ldhu	r2,-8(fp)
     a2c:	e0bffb8d 	sth	r2,-18(fp)
            frame.wLength  = byte_length;
     a30:	e0bfff17 	ldw	r2,-4(fp)
     a34:	e0bffc0d 	sth	r2,-16(fp)
            frame.wCallBack = 0;
     a38:	e03ffc8d 	sth	zero,-14(fp)
            
           
            /* Write control structure to the RAM buffer */
            hpi_write_memory(EP2_TRANSFER_STRUCT_ADDRESS,(char*)&frame,sizeof(TRANSFER_FRAME));
     a3c:	e17ffb04 	addi	r5,fp,-20
     a40:	01080004 	movi	r4,8192
     a44:	01800204 	movi	r6,8
     a48:	00013f80 	call	13f8 <hpi_write_memory>
                   
                 //execute SUSB2_SEND_INT
                hpi_write_reg(COMM_INT_NUM,SUSB2_RECEIVE_INT);
     a4c:	01007084 	movi	r4,450
     a50:	01401844 	movi	r5,97
     a54:	00016180 	call	1618 <hpi_write_reg>
    
                /* Set Register values */
                hpi_write_reg(COMM_R0, 0);
     a58:	01007104 	movi	r4,452
     a5c:	000b883a 	mov	r5,zero
     a60:	00016180 	call	1618 <hpi_write_reg>
                hpi_write_reg(COMM_R1, endpoint&0x000f);
     a64:	e0bffd0b 	ldhu	r2,-12(fp)
     a68:	114003cc 	andi	r5,r2,15
     a6c:	01007184 	movi	r4,454
     a70:	00016180 	call	1618 <hpi_write_reg>
                hpi_write_reg(COMM_R8, EP2_TRANSFER_STRUCT_ADDRESS);
     a74:	01007504 	movi	r4,468
     a78:	01480004 	movi	r5,8192
     a7c:	00016180 	call	1618 <hpi_write_reg>
          
                response = hpi_command(COMM_EXEC_INT);
     a80:	01338054 	movui	r4,52737
     a84:	00007900 	call	790 <hpi_command>
     a88:	e0bffa15 	stw	r2,-24(fp)
                if(response == SUCCESS) {DEBUG_OUT("receive enable success!\n");}
     a8c:	e0bffa17 	ldw	r2,-24(fp)
     a90:	1004c03a 	cmpne	r2,r2,zero
     a94:	1000071e 	bne	r2,zero,ab4 <usb_enable_receive_data+0xd4>
     a98:	01000074 	movhi	r4,1
     a9c:	213b2504 	addi	r4,r4,-4972
     aa0:	000227c0 	call	227c <printf>
     aa4:	01000074 	movhi	r4,1
     aa8:	213b7204 	addi	r4,r4,-4664
     aac:	00023940 	call	2394 <puts>
     ab0:	00001506 	br	b08 <usb_enable_receive_data+0x128>
                else  { DEBUG_OUT("Receive enable failed!\n");}
     ab4:	01000074 	movhi	r4,1
     ab8:	213b2504 	addi	r4,r4,-4972
     abc:	000227c0 	call	227c <printf>
     ac0:	01000074 	movhi	r4,1
     ac4:	213b7804 	addi	r4,r4,-4640
     ac8:	00023940 	call	2394 <puts>
     acc:	00000e06 	br	b08 <usb_enable_receive_data+0x128>
       }else{
         DEBUG_OUT("usb_receive_data: ep2 is enabled!\n");
     ad0:	01000074 	movhi	r4,1
     ad4:	213b2504 	addi	r4,r4,-4972
     ad8:	000227c0 	call	227c <printf>
     adc:	01000074 	movhi	r4,1
     ae0:	213b7e04 	addi	r4,r4,-4616
     ae4:	00023940 	call	2394 <puts>
     ae8:	00000706 	br	b08 <usb_enable_receive_data+0x128>
         }
    }
    else{
     // Do something here for other endpoint 
     DEBUG_OUT("usb_receive_data: endpoint %d. Nothing had being done!\n",endpoint);
     aec:	01000074 	movhi	r4,1
     af0:	213b2504 	addi	r4,r4,-4972
     af4:	000227c0 	call	227c <printf>
     af8:	e17ffd0b 	ldhu	r5,-12(fp)
     afc:	01000074 	movhi	r4,1
     b00:	213b8704 	addi	r4,r4,-4580
     b04:	000227c0 	call	227c <printf>
    }  
       

   return response ;
     b08:	e0bffa17 	ldw	r2,-24(fp)
}
     b0c:	e037883a 	mov	sp,fp
     b10:	dfc00117 	ldw	ra,4(sp)
     b14:	df000017 	ldw	fp,0(sp)
     b18:	dec00204 	addi	sp,sp,8
     b1c:	f800283a 	ret

00000b20 <dcProcessEvent>:
 *  DESCRIPTION:
 *    This function read the SIE2 MSG and hanlder it
 *
 *  RETURNS:  void
 */
void dcProcessEvent(void){
     b20:	defffd04 	addi	sp,sp,-12
     b24:	dfc00215 	stw	ra,8(sp)
     b28:	df000115 	stw	fp,4(sp)
     b2c:	df000104 	addi	fp,sp,4
       */
       
        // a loop checker is enough in this demo
                    alt_u16 message;
                    // See which endpoint is interrupting
                    hpi_read_reg(HPI_SIE2_MSG_ADR,(alt_u16 *)&message);
     b30:	01005204 	movi	r4,328
     b34:	e17fff04 	addi	r5,fp,-4
     b38:	00015d40 	call	15d4 <hpi_read_reg>
                    
                    if(message)  hpi_write_reg(HPI_SIE2_MSG_ADR, 0);  //clear the sie mailbox
     b3c:	e0bfff0b 	ldhu	r2,-4(fp)
     b40:	10bfffcc 	andi	r2,r2,65535
     b44:	1005003a 	cmpeq	r2,r2,zero
     b48:	1000031e 	bne	r2,zero,b58 <dcProcessEvent+0x38>
     b4c:	01005204 	movi	r4,328
     b50:	000b883a 	mov	r5,zero
     b54:	00016180 	call	1618 <hpi_write_reg>
                    
                    //handle which necessary
                    message &= (SUSB_EP1_MSG | SUSB_EP2_MSG | SUSB_RST_MSG | SUSB_CFG_MSG | SUSB_CLASS_MSG | SUSB_SUS_MSG);
     b58:	e0bfff0b 	ldhu	r2,-4(fp)
     b5c:	108b418c 	andi	r2,r2,11526
     b60:	e0bfff0d 	sth	r2,-4(fp)
                  
                    if(message) 
     b64:	e0bfff0b 	ldhu	r2,-4(fp)
     b68:	10bfffcc 	andi	r2,r2,65535
     b6c:	1005003a 	cmpeq	r2,r2,zero
     b70:	1000031e 	bne	r2,zero,b80 <dcProcessEvent+0x60>
                    {
                        sie2_msg_handler( message); //loop while msg = 0
     b74:	e0bfff0b 	ldhu	r2,-4(fp)
     b78:	113fffcc 	andi	r4,r2,65535
     b7c:	0000b940 	call	b94 <sie2_msg_handler>
                    }

}
     b80:	e037883a 	mov	sp,fp
     b84:	dfc00117 	ldw	ra,4(sp)
     b88:	df000017 	ldw	fp,0(sp)
     b8c:	dec00204 	addi	sp,sp,8
     b90:	f800283a 	ret

00000b94 <sie2_msg_handler>:
 *    This function  handle the SIE2 message
 *
 *  RETURNS:  void
 */
void sie2_msg_handler(unsigned short message)
{
     b94:	defffb04 	addi	sp,sp,-20
     b98:	dfc00415 	stw	ra,16(sp)
     b9c:	df000315 	stw	fp,12(sp)
     ba0:	dc000215 	stw	r16,8(sp)
     ba4:	df000204 	addi	fp,sp,8
     ba8:	e13fff0d 	sth	r4,-4(fp)
  alt_u32 Timeout;
	  while(message) {
     bac:	0000ec06 	br	f60 <sie2_msg_handler+0x3cc>
       
            if(message & SUSB_RST_MSG)
     bb0:	e0bfff0b 	ldhu	r2,-4(fp)
     bb4:	10bfffcc 	andi	r2,r2,65535
     bb8:	1080400c 	andi	r2,r2,256
     bbc:	1005003a 	cmpeq	r2,r2,zero
     bc0:	1000321e 	bne	r2,zero,c8c <sie2_msg_handler+0xf8>
             {
              DEBUG_OUT("[sie2 msg]:SUSB_RST_MSG\n");
     bc4:	01000074 	movhi	r4,1
     bc8:	213b9504 	addi	r4,r4,-4524
     bcc:	000227c0 	call	227c <printf>
     bd0:	01000074 	movhi	r4,1
     bd4:	213b9704 	addi	r4,r4,-4516
     bd8:	00023940 	call	2394 <puts>
     bdc:	00800074 	movhi	r2,1
     be0:	108c9404 	addi	r2,r2,12880
     be4:	10800017 	ldw	r2,0(r2)
     be8:	1021883a 	mov	r16,r2
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
     bec:	00800074 	movhi	r2,1
     bf0:	108c9304 	addi	r2,r2,12876
     bf4:	10800017 	ldw	r2,0(r2)
     bf8:	1009883a 	mov	r4,r2


       	         Timeout = alt_nticks() + alt_ticks_per_second()/3;
     bfc:	014000c4 	movi	r5,3
     c00:	0001b040 	call	1b04 <__udivsi3>
     c04:	8085883a 	add	r2,r16,r2
     c08:	e0bffe15 	stw	r2,-8(fp)
                 while((hpi_command(COMM_RESET)!= SUCCESS)&&  alt_nticks()<Timeout){
     c0c:	00000206 	br	c18 <sie2_msg_handler+0x84>
           	        usleep(1000)  ;
     c10:	0100fa04 	movi	r4,1000
     c14:	000bc380 	call	bc38 <usleep>
             {
              DEBUG_OUT("[sie2 msg]:SUSB_RST_MSG\n");


       	         Timeout = alt_nticks() + alt_ticks_per_second()/3;
                 while((hpi_command(COMM_RESET)!= SUCCESS)&&  alt_nticks()<Timeout){
     c18:	013e9414 	movui	r4,64080
     c1c:	00007900 	call	790 <hpi_command>
     c20:	1005003a 	cmpeq	r2,r2,zero
     c24:	1000061e 	bne	r2,zero,c40 <sie2_msg_handler+0xac>
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
     c28:	00800074 	movhi	r2,1
     c2c:	108c9404 	addi	r2,r2,12880
     c30:	10800017 	ldw	r2,0(r2)
     c34:	1007883a 	mov	r3,r2
     c38:	e0bffe17 	ldw	r2,-8(fp)
     c3c:	18bff436 	bltu	r3,r2,c10 <sie2_msg_handler+0x7c>
     c40:	00800074 	movhi	r2,1
     c44:	108c9404 	addi	r2,r2,12880
     c48:	10800017 	ldw	r2,0(r2)
     c4c:	1007883a 	mov	r3,r2
           	        usleep(1000)  ;
                 }
                 if(alt_nticks()>Timeout){
     c50:	e0bffe17 	ldw	r2,-8(fp)
     c54:	10c0072e 	bgeu	r2,r3,c74 <sie2_msg_handler+0xe0>
           	          DEBUG_OUT("device COMM_RESET failed\n");
     c58:	01000074 	movhi	r4,1
     c5c:	213b9504 	addi	r4,r4,-4524
     c60:	000227c0 	call	227c <printf>
     c64:	01000074 	movhi	r4,1
     c68:	213b9d04 	addi	r4,r4,-4492
     c6c:	00023940 	call	2394 <puts>
     c70:	00000606 	br	c8c <sie2_msg_handler+0xf8>
                 }else{
           	          DEBUG_OUT("device COMM_RESET success !!\n");
     c74:	01000074 	movhi	r4,1
     c78:	213b9504 	addi	r4,r4,-4524
     c7c:	000227c0 	call	227c <printf>
     c80:	01000074 	movhi	r4,1
     c84:	213ba404 	addi	r4,r4,-4464
     c88:	00023940 	call	2394 <puts>
                 }
             }
             if(message & SUSB_SOF_MSG)
     c8c:	e0bfff0b 	ldhu	r2,-4(fp)
     c90:	10bfffcc 	andi	r2,r2,65535
     c94:	1080800c 	andi	r2,r2,512
     c98:	1005003a 	cmpeq	r2,r2,zero
     c9c:	1000061e 	bne	r2,zero,cb8 <sie2_msg_handler+0x124>
             {
              DEBUG_OUT("[sie2 msg]:SUSB_SOF_MSG\n");
     ca0:	01000074 	movhi	r4,1
     ca4:	213b9504 	addi	r4,r4,-4524
     ca8:	000227c0 	call	227c <printf>
     cac:	01000074 	movhi	r4,1
     cb0:	213bac04 	addi	r4,r4,-4432
     cb4:	00023940 	call	2394 <puts>
              // do something
             }
             
            if(message & SUSB_CFG_MSG)
     cb8:	e0bfff0b 	ldhu	r2,-4(fp)
     cbc:	10bfffcc 	andi	r2,r2,65535
     cc0:	1081000c 	andi	r2,r2,1024
     cc4:	1005003a 	cmpeq	r2,r2,zero
     cc8:	1000291e 	bne	r2,zero,d70 <sie2_msg_handler+0x1dc>
               {
               DEBUG_OUT("[sie2 msg]:SUSB_CFG_MSG\n");
     ccc:	01000074 	movhi	r4,1
     cd0:	213b9504 	addi	r4,r4,-4524
     cd4:	000227c0 	call	227c <printf>
     cd8:	01000074 	movhi	r4,1
     cdc:	213bb204 	addi	r4,r4,-4408
     ce0:	00023940 	call	2394 <puts>
               
               dc_init_struct();
     ce4:	00004180 	call	418 <dc_init_struct>
             
               //Lcd show default words
               LCD_Test();
     ce8:	000038c0 	call	38c <LCD_Test>
               
               //SEG7_8 show default values
               IOWR(SEG7_DISPLAY_BASE,0,0); 
     cec:	00820034 	movhi	r2,2048
     cf0:	10802804 	addi	r2,r2,160
     cf4:	10000035 	stwio	zero,0(r2)
               
               //LED  all turn off
               IOWR(LED_GREEN_BASE,0,0);
     cf8:	00820034 	movhi	r2,2048
     cfc:	10801c04 	addi	r2,r2,112
     d00:	10000035 	stwio	zero,0(r2)
               IOWR(LED_RED_BASE, 0 ,0);
     d04:	00820034 	movhi	r2,2048
     d08:	10802004 	addi	r2,r2,128
     d0c:	10000035 	stwio	zero,0(r2)
               
               old_button_sw_status.button = IORD(BUTTON_PIO_BASE,0)&BUTTON_FLAG;
     d10:	00820034 	movhi	r2,2048
     d14:	10801804 	addi	r2,r2,96
     d18:	10800037 	ldwio	r2,0(r2)
     d1c:	108003cc 	andi	r2,r2,15
     d20:	d0a75c05 	stb	r2,-25232(gp)
               old_button_sw_status.sw  =  IORD(SWITCH_PIO_BASE,0)&SW_FLAG;
     d24:	00820034 	movhi	r2,2048
     d28:	10801404 	addi	r2,r2,80
     d2c:	10800037 	ldwio	r2,0(r2)
     d30:	1007883a 	mov	r3,r2
     d34:	00800134 	movhi	r2,4
     d38:	10bfffc4 	addi	r2,r2,-1
     d3c:	1886703a 	and	r3,r3,r2
     d40:	00800074 	movhi	r2,1
     d44:	108c8804 	addi	r2,r2,12832
     d48:	10c00015 	stw	r3,0(r2)
                              
               usb_enable_receive_data(2,EP2_RECEIVE_BUF_ADDRESS,EP2_DATA_DEFAULT_LEN);
     d4c:	01000084 	movi	r4,2
     d50:	01484004 	movi	r5,8448
     d54:	01801004 	movi	r6,64
     d58:	00009e00 	call	9e0 <usb_enable_receive_data>

               usb_send_data(1,EP1_SEND_BUF_ADDRESS,(char *)&old_button_sw_status,sizeof(OUT_PACKET)); // send switch and button status to pc
     d5c:	d1a75c04 	addi	r6,gp,-25232
     d60:	01000044 	movi	r4,1
     d64:	01444004 	movi	r5,4352
     d68:	01c00204 	movi	r7,8
     d6c:	00008b80 	call	8b8 <usb_send_data>
              }

         if(message & SUSB_SUS_MSG)
     d70:	e0bfff0b 	ldhu	r2,-4(fp)
     d74:	10bfffcc 	andi	r2,r2,65535
     d78:	1082000c 	andi	r2,r2,2048
     d7c:	1005003a 	cmpeq	r2,r2,zero
     d80:	1000061e 	bne	r2,zero,d9c <sie2_msg_handler+0x208>
           {
            DEBUG_OUT("[sie2 msg]:SUSB_SUS_MSG\n");
     d84:	01000074 	movhi	r4,1
     d88:	213b9504 	addi	r4,r4,-4524
     d8c:	000227c0 	call	227c <printf>
     d90:	01000074 	movhi	r4,1
     d94:	213bb804 	addi	r4,r4,-4384
     d98:	00023940 	call	2394 <puts>
            // do something
           }
       
       
           if(message & SUSB_EP0_MSG)
     d9c:	e0bfff0b 	ldhu	r2,-4(fp)
     da0:	10bfffcc 	andi	r2,r2,65535
     da4:	1080004c 	andi	r2,r2,1
     da8:	10803fcc 	andi	r2,r2,255
     dac:	1005003a 	cmpeq	r2,r2,zero
     db0:	1000061e 	bne	r2,zero,dcc <sie2_msg_handler+0x238>
            {
              DEBUG_OUT("[sie2 msg]:ep0 msg\n");
     db4:	01000074 	movhi	r4,1
     db8:	213b9504 	addi	r4,r4,-4524
     dbc:	000227c0 	call	227c <printf>
     dc0:	01000074 	movhi	r4,1
     dc4:	213bbe04 	addi	r4,r4,-4360
     dc8:	00023940 	call	2394 <puts>
              /* ignore ep0 */
            }
           if(message & SUSB_EP1_MSG)
     dcc:	e0bfff0b 	ldhu	r2,-4(fp)
     dd0:	10bfffcc 	andi	r2,r2,65535
     dd4:	1080008c 	andi	r2,r2,2
     dd8:	1005003a 	cmpeq	r2,r2,zero
     ddc:	1000091e 	bne	r2,zero,e04 <sie2_msg_handler+0x270>
            {
              DEBUG_OUT("[sie2 msg]: ep1 msg: data had been received by host\n");
     de0:	01000074 	movhi	r4,1
     de4:	213b9504 	addi	r4,r4,-4524
     de8:	000227c0 	call	227c <printf>
     dec:	01000074 	movhi	r4,1
     df0:	213bc304 	addi	r4,r4,-4340
     df4:	00023940 	call	2394 <puts>
              device_status.bEP1InTransfer = FALSE ;
     df8:	00800074 	movhi	r2,1
     dfc:	108ca004 	addi	r2,r2,12928
     e00:	10000115 	stw	zero,4(r2)
            }
           if(message & SUSB_EP2_MSG)
     e04:	e0bfff0b 	ldhu	r2,-4(fp)
     e08:	10bfffcc 	andi	r2,r2,65535
     e0c:	1080010c 	andi	r2,r2,4
     e10:	1005003a 	cmpeq	r2,r2,zero
     e14:	10000e1e 	bne	r2,zero,e50 <sie2_msg_handler+0x2bc>
            {
              DEBUG_OUT("[sie2 msg]:ep2 msg: receiving host data \n");
     e18:	01000074 	movhi	r4,1
     e1c:	213b9504 	addi	r4,r4,-4524
     e20:	000227c0 	call	227c <printf>
     e24:	01000074 	movhi	r4,1
     e28:	213bd004 	addi	r4,r4,-4288
     e2c:	00023940 	call	2394 <puts>
              device_status.bEP2InTransfer = FALSE ;
     e30:	00800074 	movhi	r2,1
     e34:	108ca004 	addi	r2,r2,12928
     e38:	10000215 	stw	zero,8(r2)
              ep2_isr();
     e3c:	0000f880 	call	f88 <ep2_isr>
              usb_enable_receive_data(2,EP2_RECEIVE_BUF_ADDRESS,EP2_DATA_DEFAULT_LEN);
     e40:	01000084 	movi	r4,2
     e44:	01484004 	movi	r5,8448
     e48:	01801004 	movi	r6,64
     e4c:	00009e00 	call	9e0 <usb_enable_receive_data>
            }
              if(message & SUSB_EP3_MSG)
     e50:	e0bfff0b 	ldhu	r2,-4(fp)
     e54:	10bfffcc 	andi	r2,r2,65535
     e58:	1080020c 	andi	r2,r2,8
     e5c:	1005003a 	cmpeq	r2,r2,zero
     e60:	1000061e 	bne	r2,zero,e7c <sie2_msg_handler+0x2e8>
            {
              DEBUG_OUT("[sie2 msg]:ep3 msg\n");
     e64:	01000074 	movhi	r4,1
     e68:	213b9504 	addi	r4,r4,-4524
     e6c:	000227c0 	call	227c <printf>
     e70:	01000074 	movhi	r4,1
     e74:	213bdb04 	addi	r4,r4,-4244
     e78:	00023940 	call	2394 <puts>
              // do something
            }
               if(message & SUSB_EP4_MSG)
     e7c:	e0bfff0b 	ldhu	r2,-4(fp)
     e80:	10bfffcc 	andi	r2,r2,65535
     e84:	1080040c 	andi	r2,r2,16
     e88:	1005003a 	cmpeq	r2,r2,zero
     e8c:	1000061e 	bne	r2,zero,ea8 <sie2_msg_handler+0x314>
            {
              DEBUG_OUT("[sie2 msg]:ep4 msg\n");
     e90:	01000074 	movhi	r4,1
     e94:	213b9504 	addi	r4,r4,-4524
     e98:	000227c0 	call	227c <printf>
     e9c:	01000074 	movhi	r4,1
     ea0:	213be004 	addi	r4,r4,-4224
     ea4:	00023940 	call	2394 <puts>
              // do something
            }
           if(message & SUSB_EP5_MSG)
     ea8:	e0bfff0b 	ldhu	r2,-4(fp)
     eac:	10bfffcc 	andi	r2,r2,65535
     eb0:	1080080c 	andi	r2,r2,32
     eb4:	1005003a 	cmpeq	r2,r2,zero
     eb8:	1000061e 	bne	r2,zero,ed4 <sie2_msg_handler+0x340>
            {
              DEBUG_OUT("[sie2 msg]:ep5 msg\n");
     ebc:	01000074 	movhi	r4,1
     ec0:	213b9504 	addi	r4,r4,-4524
     ec4:	000227c0 	call	227c <printf>
     ec8:	01000074 	movhi	r4,1
     ecc:	213be504 	addi	r4,r4,-4204
     ed0:	00023940 	call	2394 <puts>
              // do something
            }
              if(message & SUSB_EP6_MSG)
     ed4:	e0bfff0b 	ldhu	r2,-4(fp)
     ed8:	10bfffcc 	andi	r2,r2,65535
     edc:	1080100c 	andi	r2,r2,64
     ee0:	1005003a 	cmpeq	r2,r2,zero
     ee4:	1000061e 	bne	r2,zero,f00 <sie2_msg_handler+0x36c>
            {
              DEBUG_OUT("[sie2 msg]:ep6 msg\n");
     ee8:	01000074 	movhi	r4,1
     eec:	213b9504 	addi	r4,r4,-4524
     ef0:	000227c0 	call	227c <printf>
     ef4:	01000074 	movhi	r4,1
     ef8:	213bea04 	addi	r4,r4,-4184
     efc:	00023940 	call	2394 <puts>
              // do something
            }
            if(message & SUSB_EP7_MSG)
     f00:	e0bfff0b 	ldhu	r2,-4(fp)
     f04:	10bfffcc 	andi	r2,r2,65535
     f08:	1080200c 	andi	r2,r2,128
     f0c:	1005003a 	cmpeq	r2,r2,zero
     f10:	1000061e 	bne	r2,zero,f2c <sie2_msg_handler+0x398>
            {
              DEBUG_OUT("[sie2 msg]:ep7 msg\n");
     f14:	01000074 	movhi	r4,1
     f18:	213b9504 	addi	r4,r4,-4524
     f1c:	000227c0 	call	227c <printf>
     f20:	01000074 	movhi	r4,1
     f24:	213bef04 	addi	r4,r4,-4164
     f28:	00023940 	call	2394 <puts>
              // do something
            }

              hpi_read_reg(HPI_SIE2_MSG_ADR,(alt_u16 *)&message);
     f2c:	e17fff04 	addi	r5,fp,-4
     f30:	01005204 	movi	r4,328
     f34:	00015d40 	call	15d4 <hpi_read_reg>
              
              if(message)  hpi_write_reg(HPI_SIE2_MSG_ADR, 0);
     f38:	e0bfff0b 	ldhu	r2,-4(fp)
     f3c:	10bfffcc 	andi	r2,r2,65535
     f40:	1005003a 	cmpeq	r2,r2,zero
     f44:	1000031e 	bne	r2,zero,f54 <sie2_msg_handler+0x3c0>
     f48:	01005204 	movi	r4,328
     f4c:	000b883a 	mov	r5,zero
     f50:	00016180 	call	1618 <hpi_write_reg>
              
              message &= (SUSB_EP1_MSG | SUSB_EP2_MSG | SUSB_RST_MSG | SUSB_CFG_MSG | SUSB_CLASS_MSG | SUSB_SUS_MSG);
     f54:	e0bfff0b 	ldhu	r2,-4(fp)
     f58:	108b418c 	andi	r2,r2,11526
     f5c:	e0bfff0d 	sth	r2,-4(fp)
 *  RETURNS:  void
 */
void sie2_msg_handler(unsigned short message)
{
  alt_u32 Timeout;
	  while(message) {
     f60:	e0bfff0b 	ldhu	r2,-4(fp)
     f64:	10bfffcc 	andi	r2,r2,65535
     f68:	1004c03a 	cmpne	r2,r2,zero
     f6c:	103f101e 	bne	r2,zero,bb0 <sie2_msg_handler+0x1c>
              
              if(message)  hpi_write_reg(HPI_SIE2_MSG_ADR, 0);
              
              message &= (SUSB_EP1_MSG | SUSB_EP2_MSG | SUSB_RST_MSG | SUSB_CFG_MSG | SUSB_CLASS_MSG | SUSB_SUS_MSG);
       }
}
     f70:	e037883a 	mov	sp,fp
     f74:	dfc00217 	ldw	ra,8(sp)
     f78:	df000117 	ldw	fp,4(sp)
     f7c:	dc000017 	ldw	r16,0(sp)
     f80:	dec00304 	addi	sp,sp,12
     f84:	f800283a 	ret

00000f88 <ep2_isr>:
 *    This function  handle the endpoint 2 packet
 *
 *  RETURNS:  void
 */
 void ep2_isr(void)
 {
     f88:	defff104 	addi	sp,sp,-60
     f8c:	dfc00e15 	stw	ra,56(sp)
     f90:	df000d15 	stw	fp,52(sp)
     f94:	df000d04 	addi	fp,sp,52
     * -----------------------------------------
     *****************************************************************/

   alt_u16 Rx_type; 
   
   Rx_type = hpi_read_word(EP2_RECEIVE_BUF_ADDRESS); // read the first word, we defined as type
     f98:	01084004 	movi	r4,8448
     f9c:	00017280 	call	1728 <hpi_read_word>
     fa0:	e0bff30d 	sth	r2,-52(fp)
   
    switch( Rx_type )    {
     fa4:	e0bff30b 	ldhu	r2,-52(fp)
     fa8:	e0bfff15 	stw	r2,-4(fp)
     fac:	e0ffff17 	ldw	r3,-4(fp)
     fb0:	188000a0 	cmpeqi	r2,r3,2
     fb4:	1000201e 	bne	r2,zero,1038 <ep2_isr+0xb0>
     fb8:	e0ffff17 	ldw	r3,-4(fp)
     fbc:	188000e0 	cmpeqi	r2,r3,3
     fc0:	10002f1e 	bne	r2,zero,1080 <ep2_isr+0xf8>
     fc4:	e0ffff17 	ldw	r3,-4(fp)
     fc8:	18800060 	cmpeqi	r2,r3,1
     fcc:	1000011e 	bne	r2,zero,fd4 <ep2_isr+0x4c>
     fd0:	00003b06 	br	10c0 <ep2_isr+0x138>
        
        case LED_DISPLAY:
         {     DEBUG_OUT(" Recevie led packet!\n");
     fd4:	01000074 	movhi	r4,1
     fd8:	213b9504 	addi	r4,r4,-4524
     fdc:	000227c0 	call	227c <printf>
     fe0:	01000074 	movhi	r4,1
     fe4:	213bf404 	addi	r4,r4,-4144
     fe8:	00023940 	call	2394 <puts>
             LED_PACKET led_packet;
          
          hpi_read_memory(EP2_RECEIVE_BUF_ADDRESS+2,(char *)&led_packet,sizeof(LED_PACKET));
     fec:	e17ff404 	addi	r5,fp,-48
     ff0:	01084084 	movi	r4,8450
     ff4:	01800204 	movi	r6,8
     ff8:	00012c80 	call	12c8 <hpi_read_memory>
          
          // change the led status
          IOWR(LED_GREEN_BASE,0,led_packet.ledg&LEDG_FLAG);
     ffc:	e0bff40b 	ldhu	r2,-48(fp)
    1000:	10bfffcc 	andi	r2,r2,65535
    1004:	10c07fcc 	andi	r3,r2,511
    1008:	00820034 	movhi	r2,2048
    100c:	10801c04 	addi	r2,r2,112
    1010:	10c00035 	stwio	r3,0(r2)
          
          IOWR(LED_RED_BASE, 0 , led_packet.ledr&LEDR_FLAG);
    1014:	e0bff517 	ldw	r2,-44(fp)
    1018:	1007883a 	mov	r3,r2
    101c:	00800134 	movhi	r2,4
    1020:	10bfffc4 	addi	r2,r2,-1
    1024:	1886703a 	and	r3,r3,r2
    1028:	00820034 	movhi	r2,2048
    102c:	10802004 	addi	r2,r2,128
    1030:	10c00035 	stwio	r3,0(r2)
         
         break;}
    1034:	00002906 	br	10dc <ep2_isr+0x154>
         
          case LCD_DISPLAY:
         { 
            DEBUG_OUT(" Recevie lcd packet!\n");
    1038:	01000074 	movhi	r4,1
    103c:	213b9504 	addi	r4,r4,-4524
    1040:	000227c0 	call	227c <printf>
    1044:	01000074 	movhi	r4,1
    1048:	213bfa04 	addi	r4,r4,-4120
    104c:	00023940 	call	2394 <puts>
            LCD_PACKET lcd_packet;
          
          hpi_read_memory(EP2_RECEIVE_BUF_ADDRESS+2,(char *)&lcd_packet,sizeof(LCD_PACKET));
    1050:	e17ff704 	addi	r5,fp,-36
    1054:	01084084 	movi	r4,8450
    1058:	01800804 	movi	r6,32
    105c:	00012c80 	call	12c8 <hpi_read_memory>
          
          // change the lcd status
               LCD_Line1();
    1060:	00003140 	call	314 <LCD_Line1>
              //  Show Text to LCD
              LCD_Show_Text(lcd_packet.Text1);
    1064:	e13ff704 	addi	r4,fp,-36
    1068:	000028c0 	call	28c <LCD_Show_Text>
              //  Change Line2
              LCD_Line2();
    106c:	00003500 	call	350 <LCD_Line2>
              //  Show Text to LCD
              LCD_Show_Text(lcd_packet.Text2);
    1070:	e0bff704 	addi	r2,fp,-36
    1074:	11000404 	addi	r4,r2,16
    1078:	000028c0 	call	28c <LCD_Show_Text>
          break;}
    107c:	00001706 	br	10dc <ep2_isr+0x154>
          
          case SEG7_8_DISPLAY:
              {
                 DEBUG_OUT(" Recevie seg7_8 packet!\n");
    1080:	01000074 	movhi	r4,1
    1084:	213b9504 	addi	r4,r4,-4524
    1088:	000227c0 	call	227c <printf>
    108c:	01000074 	movhi	r4,1
    1090:	213c0004 	addi	r4,r4,-4096
    1094:	00023940 	call	2394 <puts>
                 SEG7_8_PACKET seg7_8_packet;
                 
                 hpi_read_memory(EP2_RECEIVE_BUF_ADDRESS+2,(char *)&seg7_8_packet,sizeof(SEG7_8_PACKET));
    1098:	e17ff604 	addi	r5,fp,-40
    109c:	01084084 	movi	r4,8450
    10a0:	01800104 	movi	r6,4
    10a4:	00012c80 	call	12c8 <hpi_read_memory>
                
                 // seg7_8 display
                 IOWR(SEG7_DISPLAY_BASE,0,seg7_8_packet.seg7_8_value&0xFFFFFFFF); 
    10a8:	e0bff617 	ldw	r2,-40(fp)
    10ac:	1007883a 	mov	r3,r2
    10b0:	00820034 	movhi	r2,2048
    10b4:	10802804 	addi	r2,r2,160
    10b8:	10c00035 	stwio	r3,0(r2)
          
                break;
    10bc:	00000706 	br	10dc <ep2_isr+0x154>
              }
          
         default :
         {  DEBUG_OUT("Unknow Rx transfer type[0x%02X] !\n",Rx_type);
    10c0:	01000074 	movhi	r4,1
    10c4:	213b9504 	addi	r4,r4,-4524
    10c8:	000227c0 	call	227c <printf>
    10cc:	e17ff30b 	ldhu	r5,-52(fp)
    10d0:	01000074 	movhi	r4,1
    10d4:	213c0604 	addi	r4,r4,-4072
    10d8:	000227c0 	call	227c <printf>
          break;
          }
      }
 
 }
    10dc:	e037883a 	mov	sp,fp
    10e0:	dfc00117 	ldw	ra,4(sp)
    10e4:	df000017 	ldw	fp,0(sp)
    10e8:	dec00204 	addi	sp,sp,8
    10ec:	f800283a 	ret

000010f0 <check_button_sw_status>:


 
void check_button_sw_status(void)
{
    10f0:	defffc04 	addi	sp,sp,-16
    10f4:	dfc00315 	stw	ra,12(sp)
    10f8:	df000215 	stw	fp,8(sp)
    10fc:	df000204 	addi	fp,sp,8
    OUT_PACKET button_sw_status;

   button_sw_status.button = IORD(BUTTON_PIO_BASE,0)&BUTTON_FLAG;
    1100:	00820034 	movhi	r2,2048
    1104:	10801804 	addi	r2,r2,96
    1108:	10800037 	ldwio	r2,0(r2)
    110c:	108003cc 	andi	r2,r2,15
    1110:	e0bffe05 	stb	r2,-8(fp)
   button_sw_status.sw  =  IORD(SWITCH_PIO_BASE,0)&SW_FLAG;
    1114:	00820034 	movhi	r2,2048
    1118:	10801404 	addi	r2,r2,80
    111c:	10800037 	ldwio	r2,0(r2)
    1120:	1007883a 	mov	r3,r2
    1124:	00800134 	movhi	r2,4
    1128:	10bfffc4 	addi	r2,r2,-1
    112c:	1884703a 	and	r2,r3,r2
    1130:	e0bfff15 	stw	r2,-4(fp)
   
   if( (old_button_sw_status.button != button_sw_status.button)
    1134:	d0a75c03 	ldbu	r2,-25232(gp)
    1138:	e0fffe03 	ldbu	r3,-8(fp)
    113c:	11003fcc 	andi	r4,r2,255
    1140:	18803fcc 	andi	r2,r3,255
    1144:	2080051e 	bne	r4,r2,115c <check_button_sw_status+0x6c>
    1148:	00800074 	movhi	r2,1
    114c:	108c8804 	addi	r2,r2,12832
    1150:	10c00017 	ldw	r3,0(r2)
    1154:	e0bfff17 	ldw	r2,-4(fp)
    1158:	18803026 	beq	r3,r2,121c <check_button_sw_status+0x12c>
		   || (old_button_sw_status.sw != button_sw_status.sw)
		   )
   {


	   if(device_status.bEP1InTransfer == FALSE) {
    115c:	00800074 	movhi	r2,1
    1160:	108ca004 	addi	r2,r2,12928
    1164:	10800117 	ldw	r2,4(r2)
    1168:	1004c03a 	cmpne	r2,r2,zero
    116c:	10002b1e 	bne	r2,zero,121c <check_button_sw_status+0x12c>

    	old_button_sw_status.button = button_sw_status.button;
    1170:	e0bffe03 	ldbu	r2,-8(fp)
    1174:	d0a75c05 	stb	r2,-25232(gp)
        old_button_sw_status.sw = button_sw_status.sw ;
    1178:	e0ffff17 	ldw	r3,-4(fp)
    117c:	00800074 	movhi	r2,1
    1180:	108c8804 	addi	r2,r2,12832
    1184:	10c00015 	stw	r3,0(r2)
        usb_send_data(1,EP1_SEND_BUF_ADDRESS,(char *)&button_sw_status,sizeof(OUT_PACKET)); // send switch and button status to pc
    1188:	e1bffe04 	addi	r6,fp,-8
    118c:	01000044 	movi	r4,1
    1190:	01444004 	movi	r5,4352
    1194:	01c00204 	movi	r7,8
    1198:	00008b80 	call	8b8 <usb_send_data>
    119c:	00800074 	movhi	r2,1
    11a0:	108c9404 	addi	r2,r2,12880
    11a4:	10800017 	ldw	r2,0(r2)
    11a8:	1007883a 	mov	r3,r2
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
    11ac:	00800074 	movhi	r2,1
    11b0:	108c9304 	addi	r2,r2,12876
    11b4:	10800017 	ldw	r2,0(r2)

        device_status.EP1_Transfer_Timeout  = alt_nticks() + alt_ticks_per_second()*1; // 2s TimeOut if host do not responds
    11b8:	1887883a 	add	r3,r3,r2
    11bc:	00800074 	movhi	r2,1
    11c0:	108ca004 	addi	r2,r2,12928
    11c4:	10c00415 	stw	r3,16(r2)
        device_status.bEP1_Transfer_Judge   = TRUE;
    11c8:	00c00074 	movhi	r3,1
    11cc:	18cca004 	addi	r3,r3,12928
    11d0:	00800044 	movi	r2,1
    11d4:	18800315 	stw	r2,12(r3)

        DEBUG_OUT(" Switch or Button Status changed !!\n           [SW] 0x%05X,   [Button] 0x%02X\n",(unsigned int)(old_button_sw_status.sw&SW_FLAG),old_button_sw_status.button&BUTTON_FLAG);
    11d8:	01000074 	movhi	r4,1
    11dc:	213b9504 	addi	r4,r4,-4524
    11e0:	000227c0 	call	227c <printf>
    11e4:	00800074 	movhi	r2,1
    11e8:	108c8804 	addi	r2,r2,12832
    11ec:	10c00017 	ldw	r3,0(r2)
    11f0:	00800134 	movhi	r2,4
    11f4:	10bfffc4 	addi	r2,r2,-1
    11f8:	188a703a 	and	r5,r3,r2
    11fc:	d0a75c03 	ldbu	r2,-25232(gp)
    1200:	10803fcc 	andi	r2,r2,255
    1204:	118003cc 	andi	r6,r2,15
    1208:	01000074 	movhi	r4,1
    120c:	213c0f04 	addi	r4,r4,-4036
    1210:	000227c0 	call	227c <printf>
        usleep(50000);
    1214:	0130d414 	movui	r4,50000
    1218:	000bc380 	call	bc38 <usleep>
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
    121c:	00800074 	movhi	r2,1
    1220:	108c9404 	addi	r2,r2,12880
    1224:	10800017 	ldw	r2,0(r2)
    1228:	1007883a 	mov	r3,r2

	   }
 }


   if(alt_nticks()>device_status.EP1_Transfer_Timeout &&  device_status.bEP1_Transfer_Judge == TRUE && device_status.bEP1InTransfer == TRUE){
    122c:	00800074 	movhi	r2,1
    1230:	108ca004 	addi	r2,r2,12928
    1234:	10800417 	ldw	r2,16(r2)
    1238:	10c0162e 	bgeu	r2,r3,1294 <check_button_sw_status+0x1a4>
    123c:	00800074 	movhi	r2,1
    1240:	108ca004 	addi	r2,r2,12928
    1244:	10800317 	ldw	r2,12(r2)
    1248:	10800058 	cmpnei	r2,r2,1
    124c:	1000111e 	bne	r2,zero,1294 <check_button_sw_status+0x1a4>
    1250:	00800074 	movhi	r2,1
    1254:	108ca004 	addi	r2,r2,12928
    1258:	10800117 	ldw	r2,4(r2)
    125c:	10800058 	cmpnei	r2,r2,1
    1260:	10000c1e 	bne	r2,zero,1294 <check_button_sw_status+0x1a4>
	   device_status.bEP1InTransfer = FALSE;
    1264:	00800074 	movhi	r2,1
    1268:	108ca004 	addi	r2,r2,12928
    126c:	10000115 	stw	zero,4(r2)
	   device_status.bEP1_Transfer_Judge = FALSE;
    1270:	00800074 	movhi	r2,1
    1274:	108ca004 	addi	r2,r2,12928
    1278:	10000315 	stw	zero,12(r2)
       DEBUG_OUT("Host PC not responds ,TimeOut!!\n");
    127c:	01000074 	movhi	r4,1
    1280:	213b9504 	addi	r4,r4,-4524
    1284:	000227c0 	call	227c <printf>
    1288:	01000074 	movhi	r4,1
    128c:	213c2304 	addi	r4,r4,-3956
    1290:	00023940 	call	2394 <puts>

   }

 }
    1294:	e037883a 	mov	sp,fp
    1298:	dfc00117 	ldw	ra,4(sp)
    129c:	df000017 	ldw	fp,0(sp)
    12a0:	dec00204 	addi	sp,sp,8
    12a4:	f800283a 	ret

000012a8 <hpi_init>:

/** public functions **/


int hpi_init(void)
{
    12a8:	deffff04 	addi	sp,sp,-4
    12ac:	df000015 	stw	fp,0(sp)
    12b0:	d839883a 	mov	fp,sp

    return SUCCESS;
    12b4:	0005883a 	mov	r2,zero
}
    12b8:	e037883a 	mov	sp,fp
    12bc:	df000017 	ldw	fp,0(sp)
    12c0:	dec00104 	addi	sp,sp,4
    12c4:	f800283a 	ret

000012c8 <hpi_read_memory>:
 */
int hpi_read_memory(unsigned short chip_addr,
                    char * data,
                    int byte_length
                    )
{
    12c8:	defff904 	addi	sp,sp,-28
    12cc:	dfc00615 	stw	ra,24(sp)
    12d0:	df000515 	stw	fp,20(sp)
    12d4:	df000504 	addi	fp,sp,20
    12d8:	e17ffe15 	stw	r5,-8(fp)
    12dc:	e1bfff15 	stw	r6,-4(fp)
    12e0:	e13ffd0d 	sth	r4,-12(fp)
    int num_words = 0;
    12e4:	e03ffc15 	stw	zero,-16(fp)
    unsigned short short_int;

    /* Check for unaligned address */
    if ((chip_addr & 0x1) == 0x1) {
    12e8:	e0bffd0b 	ldhu	r2,-12(fp)
    12ec:	1080004c 	andi	r2,r2,1
    12f0:	10803fcc 	andi	r2,r2,255
    12f4:	1005003a 	cmpeq	r2,r2,zero
    12f8:	1000131e 	bne	r2,zero,1348 <hpi_read_memory+0x80>

        /* Read Word */
        short_int = hpi_read_word(chip_addr - 1);
    12fc:	e0bffd0b 	ldhu	r2,-12(fp)
    1300:	10bfffc4 	addi	r2,r2,-1
    1304:	113fffcc 	andi	r4,r2,65535
    1308:	00017280 	call	1728 <hpi_read_word>
    130c:	e0bffb0d 	sth	r2,-20(fp)

        /* Save upper byte */
        *data++ = (char) ((unsigned short) short_int >> 0x8);
    1310:	e0bffb0b 	ldhu	r2,-20(fp)
    1314:	1004d23a 	srli	r2,r2,8
    1318:	1007883a 	mov	r3,r2
    131c:	e0bffe17 	ldw	r2,-8(fp)
    1320:	10c00005 	stb	r3,0(r2)
    1324:	e0bffe17 	ldw	r2,-8(fp)
    1328:	10800044 	addi	r2,r2,1
    132c:	e0bffe15 	stw	r2,-8(fp)

        /* Update address */
        chip_addr = chip_addr + 1;
    1330:	e0bffd0b 	ldhu	r2,-12(fp)
    1334:	10800044 	addi	r2,r2,1
    1338:	e0bffd0d 	sth	r2,-12(fp)

        /* Update length */
        byte_length--;
    133c:	e0bfff17 	ldw	r2,-4(fp)
    1340:	10bfffc4 	addi	r2,r2,-1
    1344:	e0bfff15 	stw	r2,-4(fp)
    }

    /* Determine number of words to read */
    num_words = byte_length >> 1;
    1348:	e0bfff17 	ldw	r2,-4(fp)
    134c:	1005d07a 	srai	r2,r2,1
    1350:	e0bffc15 	stw	r2,-16(fp)

    /* Check for words to read */
    if (num_words > 0) {
    1354:	e0bffc17 	ldw	r2,-16(fp)
    1358:	10800050 	cmplti	r2,r2,1
    135c:	1000101e 	bne	r2,zero,13a0 <hpi_read_memory+0xd8>

        hpi_read_words(chip_addr, (unsigned short *) data, num_words);
    1360:	e13ffd0b 	ldhu	r4,-12(fp)
    1364:	e17ffe17 	ldw	r5,-8(fp)
    1368:	e1bffc17 	ldw	r6,-16(fp)
    136c:	00017e80 	call	17e8 <hpi_read_words>

        byte_length -= (2 * num_words);
    1370:	e0bffc17 	ldw	r2,-16(fp)
    1374:	1085883a 	add	r2,r2,r2
    1378:	1007883a 	mov	r3,r2
    137c:	e0bfff17 	ldw	r2,-4(fp)
    1380:	10c5c83a 	sub	r2,r2,r3
    1384:	e0bfff15 	stw	r2,-4(fp)

        chip_addr += (2 * num_words);
    1388:	e0bffc17 	ldw	r2,-16(fp)
    138c:	1085883a 	add	r2,r2,r2
    1390:	1007883a 	mov	r3,r2
    1394:	e0bffd0b 	ldhu	r2,-12(fp)
    1398:	10c5883a 	add	r2,r2,r3
    139c:	e0bffd0d 	sth	r2,-12(fp)
    }

    /* Check for a remaining byte to read*/
    if (byte_length > 0) {
    13a0:	e0bfff17 	ldw	r2,-4(fp)
    13a4:	10800050 	cmplti	r2,r2,1
    13a8:	10000d1e 	bne	r2,zero,13e0 <hpi_read_memory+0x118>

        /* Read Word */
        short_int = hpi_read_word(chip_addr);
    13ac:	e13ffd0b 	ldhu	r4,-12(fp)
    13b0:	00017280 	call	1728 <hpi_read_word>
    13b4:	e0bffb0d 	sth	r2,-20(fp)

        /* Save lower byte */
        *(data + 2*num_words) = (char) ((unsigned short) short_int >> 0x0);
    13b8:	e0bffc17 	ldw	r2,-16(fp)
    13bc:	1085883a 	add	r2,r2,r2
    13c0:	1007883a 	mov	r3,r2
    13c4:	e0bffe17 	ldw	r2,-8(fp)
    13c8:	1887883a 	add	r3,r3,r2
    13cc:	e0bffb0b 	ldhu	r2,-20(fp)
    13d0:	18800005 	stb	r2,0(r3)

        /* Update length */
        byte_length--;
    13d4:	e0bfff17 	ldw	r2,-4(fp)
    13d8:	10bfffc4 	addi	r2,r2,-1
    13dc:	e0bfff15 	stw	r2,-4(fp)
    /* Consistancy check */
    if (byte_length != 0) {
        DEBUG_ERR("hpi_read_memory: Internal error\r\n");
    }

    return(SUCCESS);
    13e0:	0005883a 	mov	r2,zero
}
    13e4:	e037883a 	mov	sp,fp
    13e8:	dfc00117 	ldw	ra,4(sp)
    13ec:	df000017 	ldw	fp,0(sp)
    13f0:	dec00204 	addi	sp,sp,8
    13f4:	f800283a 	ret

000013f8 <hpi_write_memory>:
 */
int hpi_write_memory(unsigned short chip_addr, 
                     char * data,
                     int byte_length
                    )
{
    13f8:	defff804 	addi	sp,sp,-32
    13fc:	dfc00715 	stw	ra,28(sp)
    1400:	df000615 	stw	fp,24(sp)
    1404:	df000604 	addi	fp,sp,24
    1408:	e17ffe15 	stw	r5,-8(fp)
    140c:	e1bfff15 	stw	r6,-4(fp)
    1410:	e13ffd0d 	sth	r4,-12(fp)
    int response = ERROR;
    1414:	00bfffc4 	movi	r2,-1
    1418:	e0bffc15 	stw	r2,-16(fp)
    int num_words = 0;
    141c:	e03ffb15 	stw	zero,-20(fp)
      DEBUG_OUT("hpi_write_memory.- chip_addr = 0x%x, byte_length = 0x%x\r\n", chip_addr, byte_length);


    /* Check if the memory region is writable or not */

    if (writeable_region(chip_addr, byte_length) == SUCCESS) {
    1420:	e13ffd0b 	ldhu	r4,-12(fp)
    1424:	e17fff17 	ldw	r5,-4(fp)
    1428:	00018d40 	call	18d4 <writeable_region>
    142c:	1004c03a 	cmpne	r2,r2,zero
    1430:	1000621e 	bne	r2,zero,15bc <hpi_write_memory+0x1c4>

        /* Check for unaligned address */
        if ((chip_addr & 0x1) == 0x1) {
    1434:	e0bffd0b 	ldhu	r2,-12(fp)
    1438:	1080004c 	andi	r2,r2,1
    143c:	10803fcc 	andi	r2,r2,255
    1440:	1005003a 	cmpeq	r2,r2,zero
    1444:	1000211e 	bne	r2,zero,14cc <hpi_write_memory+0xd4>

            /* Read Word */
            short_int = hpi_read_word(chip_addr - 1);
    1448:	e0bffd0b 	ldhu	r2,-12(fp)
    144c:	10bfffc4 	addi	r2,r2,-1
    1450:	113fffcc 	andi	r4,r2,65535
    1454:	00017280 	call	1728 <hpi_read_word>
    1458:	e0bffa8d 	sth	r2,-22(fp)

            /* Modify upper byte */
            tmp_short_int = (unsigned short) (0x00FF & *data++);
    145c:	e0bffe17 	ldw	r2,-8(fp)
    1460:	10800003 	ldbu	r2,0(r2)
    1464:	10803fcc 	andi	r2,r2,255
    1468:	1080201c 	xori	r2,r2,128
    146c:	10bfe004 	addi	r2,r2,-128
    1470:	10803fcc 	andi	r2,r2,255
    1474:	e0bffa0d 	sth	r2,-24(fp)
    1478:	e0bffe17 	ldw	r2,-8(fp)
    147c:	10800044 	addi	r2,r2,1
    1480:	e0bffe15 	stw	r2,-8(fp)
            short_int = ((0x00FF & short_int) | (tmp_short_int << 8));
    1484:	e0bffa8b 	ldhu	r2,-22(fp)
    1488:	10803fcc 	andi	r2,r2,255
    148c:	1007883a 	mov	r3,r2
    1490:	e0bffa0b 	ldhu	r2,-24(fp)
    1494:	1004923a 	slli	r2,r2,8
    1498:	1884b03a 	or	r2,r3,r2
    149c:	e0bffa8d 	sth	r2,-22(fp)

            /* Write Word */
            hpi_write_word((chip_addr - 1), short_int);
    14a0:	e0bffd0b 	ldhu	r2,-12(fp)
    14a4:	10bfffc4 	addi	r2,r2,-1
    14a8:	113fffcc 	andi	r4,r2,65535
    14ac:	e17ffa8b 	ldhu	r5,-22(fp)
    14b0:	00016e40 	call	16e4 <hpi_write_word>

            /* Update address */
            chip_addr = chip_addr + 1;
    14b4:	e0bffd0b 	ldhu	r2,-12(fp)
    14b8:	10800044 	addi	r2,r2,1
    14bc:	e0bffd0d 	sth	r2,-12(fp)

            /* Update length */
            byte_length--;
    14c0:	e0bfff17 	ldw	r2,-4(fp)
    14c4:	10bfffc4 	addi	r2,r2,-1
    14c8:	e0bfff15 	stw	r2,-4(fp)
        }

        /* Determine number of words to write */
        num_words = (int) byte_length/2;
    14cc:	e0ffff17 	ldw	r3,-4(fp)
    14d0:	1804d7fa 	srli	r2,r3,31
    14d4:	10c5883a 	add	r2,r2,r3
    14d8:	1005d07a 	srai	r2,r2,1
    14dc:	e0bffb15 	stw	r2,-20(fp)

        /* Check for words to write */
        if (num_words > 0) {
    14e0:	e0bffb17 	ldw	r2,-20(fp)
    14e4:	10800050 	cmplti	r2,r2,1
    14e8:	1000161e 	bne	r2,zero,1544 <hpi_write_memory+0x14c>
            hpi_write_words(chip_addr, (unsigned short *) data, num_words);
    14ec:	e13ffd0b 	ldhu	r4,-12(fp)
    14f0:	e17ffe17 	ldw	r5,-8(fp)
    14f4:	e1bffb17 	ldw	r6,-20(fp)
    14f8:	000176c0 	call	176c <hpi_write_words>

            byte_length -= (2 * num_words);
    14fc:	e0bffb17 	ldw	r2,-20(fp)
    1500:	1085883a 	add	r2,r2,r2
    1504:	1007883a 	mov	r3,r2
    1508:	e0bfff17 	ldw	r2,-4(fp)
    150c:	10c5c83a 	sub	r2,r2,r3
    1510:	e0bfff15 	stw	r2,-4(fp)

            chip_addr += (2 * num_words);
    1514:	e0bffb17 	ldw	r2,-20(fp)
    1518:	1085883a 	add	r2,r2,r2
    151c:	1007883a 	mov	r3,r2
    1520:	e0bffd0b 	ldhu	r2,-12(fp)
    1524:	10c5883a 	add	r2,r2,r3
    1528:	e0bffd0d 	sth	r2,-12(fp)

            data += (2 * num_words);
    152c:	e0bffb17 	ldw	r2,-20(fp)
    1530:	1085883a 	add	r2,r2,r2
    1534:	1007883a 	mov	r3,r2
    1538:	e0bffe17 	ldw	r2,-8(fp)
    153c:	10c5883a 	add	r2,r2,r3
    1540:	e0bffe15 	stw	r2,-8(fp)
        }

        /* Check for a remaining byte to read*/
        if (byte_length > 0) {
    1544:	e0bfff17 	ldw	r2,-4(fp)
    1548:	10800050 	cmplti	r2,r2,1
    154c:	10001a1e 	bne	r2,zero,15b8 <hpi_write_memory+0x1c0>

            /* Read Word */
            short_int = hpi_read_word(chip_addr); 
    1550:	e13ffd0b 	ldhu	r4,-12(fp)
    1554:	00017280 	call	1728 <hpi_read_word>
    1558:	e0bffa8d 	sth	r2,-22(fp)

            /* Modify lower byte */
            tmp_short_int = (unsigned short) (0x00FF & *data++);
    155c:	e0bffe17 	ldw	r2,-8(fp)
    1560:	10800003 	ldbu	r2,0(r2)
    1564:	10803fcc 	andi	r2,r2,255
    1568:	1080201c 	xori	r2,r2,128
    156c:	10bfe004 	addi	r2,r2,-128
    1570:	10803fcc 	andi	r2,r2,255
    1574:	e0bffa0d 	sth	r2,-24(fp)
    1578:	e0bffe17 	ldw	r2,-8(fp)
    157c:	10800044 	addi	r2,r2,1
    1580:	e0bffe15 	stw	r2,-8(fp)
            short_int = ((0xFF00 & short_int) | tmp_short_int);
    1584:	e0fffa8b 	ldhu	r3,-22(fp)
    1588:	00bfc004 	movi	r2,-256
    158c:	1884703a 	and	r2,r3,r2
    1590:	1007883a 	mov	r3,r2
    1594:	e0bffa0b 	ldhu	r2,-24(fp)
    1598:	1884b03a 	or	r2,r3,r2
    159c:	e0bffa8d 	sth	r2,-22(fp)

            /* Write Word */
            hpi_write_word(chip_addr, short_int);
    15a0:	e13ffd0b 	ldhu	r4,-12(fp)
    15a4:	e17ffa8b 	ldhu	r5,-22(fp)
    15a8:	00016e40 	call	16e4 <hpi_write_word>

            /* Update length */
            byte_length--;
    15ac:	e0bfff17 	ldw	r2,-4(fp)
    15b0:	10bfffc4 	addi	r2,r2,-1
    15b4:	e0bfff15 	stw	r2,-4(fp)
        /* Consistancy check */
        if (byte_length != 0) {
            DEBUG_ERR("hpi_write_memory: Internal error\r\n");
        }

        response = SUCCESS;
    15b8:	e03ffc15 	stw	zero,-16(fp)
    }
    else
        DEBUG_ERR("hpi_write_memory: this memory region is not writable\r\n");

    return(response);
    15bc:	e0bffc17 	ldw	r2,-16(fp)
}
    15c0:	e037883a 	mov	sp,fp
    15c4:	dfc00117 	ldw	ra,4(sp)
    15c8:	df000017 	ldw	fp,0(sp)
    15cc:	dec00204 	addi	sp,sp,8
    15d0:	f800283a 	ret

000015d4 <hpi_read_reg>:
 *    ERROR           - Failure
 */
int hpi_read_reg(unsigned short reg_addr,
                 unsigned short *reg_value
                )
{
    15d4:	defffc04 	addi	sp,sp,-16
    15d8:	dfc00315 	stw	ra,12(sp)
    15dc:	df000215 	stw	fp,8(sp)
    15e0:	df000204 	addi	fp,sp,8
    15e4:	e17fff15 	stw	r5,-4(fp)
    15e8:	e13ffe0d 	sth	r4,-8(fp)

    /* Hardware Specific Code to Write to Lyberty via HPI Port */
    *reg_value = hpi_read_word(reg_addr);
    15ec:	e13ffe0b 	ldhu	r4,-8(fp)
    15f0:	00017280 	call	1728 <hpi_read_word>
    15f4:	1007883a 	mov	r3,r2
    15f8:	e0bfff17 	ldw	r2,-4(fp)
    15fc:	10c0000d 	sth	r3,0(r2)

    return (SUCCESS);
    1600:	0005883a 	mov	r2,zero
}
    1604:	e037883a 	mov	sp,fp
    1608:	dfc00117 	ldw	ra,4(sp)
    160c:	df000017 	ldw	fp,0(sp)
    1610:	dec00204 	addi	sp,sp,8
    1614:	f800283a 	ret

00001618 <hpi_write_reg>:
 *    SUCCESS         - Success
 *    ERROR           - Failure
 */
int hpi_write_reg(unsigned short reg_addr,
                  unsigned short reg_value)
{
    1618:	defffc04 	addi	sp,sp,-16
    161c:	dfc00315 	stw	ra,12(sp)
    1620:	df000215 	stw	fp,8(sp)
    1624:	df000204 	addi	fp,sp,8
    1628:	e13ffe0d 	sth	r4,-8(fp)
    162c:	e17fff0d 	sth	r5,-4(fp)

    hpi_write_word(reg_addr, reg_value);
    1630:	e13ffe0b 	ldhu	r4,-8(fp)
    1634:	e17fff0b 	ldhu	r5,-4(fp)
    1638:	00016e40 	call	16e4 <hpi_write_word>

    return (SUCCESS);
    163c:	0005883a 	mov	r2,zero
}
    1640:	e037883a 	mov	sp,fp
    1644:	dfc00117 	ldw	ra,4(sp)
    1648:	df000017 	ldw	fp,0(sp)
    164c:	dec00204 	addi	sp,sp,8
    1650:	f800283a 	ret

00001654 <hpi_read_status>:
 *  RETURNS: 
 *    SUCCESS         - Success
 *    ERROR           - Failure
 */
unsigned short hpi_read_status(void)
{
    1654:	defffe04 	addi	sp,sp,-8
    1658:	df000115 	stw	fp,4(sp)
    165c:	df000104 	addi	fp,sp,4
    unsigned short value;
    
    value = IORD(HPI_NIOSII_BASE_ADDR,HPI_STATUS);
    1660:	00820034 	movhi	r2,2048
    1664:	10801304 	addi	r2,r2,76
    1668:	10800037 	ldwio	r2,0(r2)
    166c:	e0bfff0d 	sth	r2,-4(fp)

    DEBUG_OUT("read_status: value = 0x%04x\r\n", value);

    return value;
    1670:	e0bfff0b 	ldhu	r2,-4(fp)
}
    1674:	e037883a 	mov	sp,fp
    1678:	df000017 	ldw	fp,0(sp)
    167c:	dec00104 	addi	sp,sp,4
    1680:	f800283a 	ret

00001684 <hpi_write_mbx>:
 *  RETURNS: 
 *    SUCCESS         - Success
 *    ERROR           - Failure
 */
void hpi_write_mbx(unsigned short value)
{
    1684:	defffe04 	addi	sp,sp,-8
    1688:	df000115 	stw	fp,4(sp)
    168c:	df000104 	addi	fp,sp,4
    1690:	e13fff0d 	sth	r4,-4(fp)
    DEBUG_OUT("write_mbx: 0x%04x\r\n", value);

    IOWR(HPI_NIOSII_BASE_ADDR,HPI_MAILBOX,value);
    1694:	e0ffff0b 	ldhu	r3,-4(fp)
    1698:	00820034 	movhi	r2,2048
    169c:	10801104 	addi	r2,r2,68
    16a0:	10c00035 	stwio	r3,0(r2)
}
    16a4:	e037883a 	mov	sp,fp
    16a8:	df000017 	ldw	fp,0(sp)
    16ac:	dec00104 	addi	sp,sp,4
    16b0:	f800283a 	ret

000016b4 <hpi_read_mbx>:
 *  RETURNS: 
 *    SUCCESS         - Success
 *    ERROR           - Failure
 */
unsigned short hpi_read_mbx(void)
{
    16b4:	defffe04 	addi	sp,sp,-8
    16b8:	df000115 	stw	fp,4(sp)
    16bc:	df000104 	addi	fp,sp,4
    unsigned short value;
 
    value =  IORD(HPI_NIOSII_BASE_ADDR,HPI_MAILBOX);
    16c0:	00820034 	movhi	r2,2048
    16c4:	10801104 	addi	r2,r2,68
    16c8:	10800037 	ldwio	r2,0(r2)
    16cc:	e0bfff0d 	sth	r2,-4(fp)

    DEBUG_OUT("read_mbx: 0x%04x\r\n", value);

    return value;
    16d0:	e0bfff0b 	ldhu	r2,-4(fp)
}
    16d4:	e037883a 	mov	sp,fp
    16d8:	df000017 	ldw	fp,0(sp)
    16dc:	dec00104 	addi	sp,sp,4
    16e0:	f800283a 	ret

000016e4 <hpi_write_word>:
 *    ERROR           - Failure
 */
void hpi_write_word(unsigned short chip_addr,
                        unsigned short value
                        )
{
    16e4:	defffd04 	addi	sp,sp,-12
    16e8:	df000215 	stw	fp,8(sp)
    16ec:	df000204 	addi	fp,sp,8
    16f0:	e13ffe0d 	sth	r4,-8(fp)
    16f4:	e17fff0d 	sth	r5,-4(fp)
    DEBUG_OUT("write_word: addr=0x%04x, value=0x%04x\r\n", chip_addr, value);
    IOWR(HPI_NIOSII_BASE_ADDR,HPI_ADDR, chip_addr);
    16f8:	e0fffe0b 	ldhu	r3,-8(fp)
    16fc:	00820034 	movhi	r2,2048
    1700:	10801204 	addi	r2,r2,72
    1704:	10c00035 	stwio	r3,0(r2)
    IOWR(HPI_NIOSII_BASE_ADDR, HPI_DATA, value);
    1708:	e0ffff0b 	ldhu	r3,-4(fp)
    170c:	00820034 	movhi	r2,2048
    1710:	10801004 	addi	r2,r2,64
    1714:	10c00035 	stwio	r3,0(r2)
}
    1718:	e037883a 	mov	sp,fp
    171c:	df000017 	ldw	fp,0(sp)
    1720:	dec00104 	addi	sp,sp,4
    1724:	f800283a 	ret

00001728 <hpi_read_word>:
 *
 *  RETURNS: 
 *    Value of the chip_addr
 */
unsigned short hpi_read_word(unsigned short chip_addr)
{
    1728:	defffd04 	addi	sp,sp,-12
    172c:	df000215 	stw	fp,8(sp)
    1730:	df000204 	addi	fp,sp,8
    1734:	e13fff0d 	sth	r4,-4(fp)
    unsigned short value;
    IOWR( HPI_NIOSII_BASE_ADDR,HPI_ADDR, chip_addr);
    1738:	e0ffff0b 	ldhu	r3,-4(fp)
    173c:	00820034 	movhi	r2,2048
    1740:	10801204 	addi	r2,r2,72
    1744:	10c00035 	stwio	r3,0(r2)
    value = IORD( HPI_NIOSII_BASE_ADDR,HPI_DATA) ;
    1748:	00820034 	movhi	r2,2048
    174c:	10801004 	addi	r2,r2,64
    1750:	10800037 	ldwio	r2,0(r2)
    1754:	e0bffe0d 	sth	r2,-8(fp)
    DEBUG_OUT("read_word: addr=0x%04x, value=0x%04x\r\n", chip_addr, value);
    return value;
    1758:	e0bffe0b 	ldhu	r2,-8(fp)
}
    175c:	e037883a 	mov	sp,fp
    1760:	df000017 	ldw	fp,0(sp)
    1764:	dec00104 	addi	sp,sp,4
    1768:	f800283a 	ret

0000176c <hpi_write_words>:
 */
void hpi_write_words(unsigned short chip_addr,
                         unsigned short *data,
                         int num_words
                        )
{
    176c:	defffb04 	addi	sp,sp,-20
    1770:	df000415 	stw	fp,16(sp)
    1774:	df000404 	addi	fp,sp,16
    1778:	e17ffe15 	stw	r5,-8(fp)
    177c:	e1bfff15 	stw	r6,-4(fp)
    1780:	e13ffd0d 	sth	r4,-12(fp)
    int i;

    IOWR( HPI_NIOSII_BASE_ADDR,HPI_ADDR, chip_addr);
    1784:	e0fffd0b 	ldhu	r3,-12(fp)
    1788:	00820034 	movhi	r2,2048
    178c:	10801204 	addi	r2,r2,72
    1790:	10c00035 	stwio	r3,0(r2)

    DEBUG_OUT("write_words addr:0x%04x, num_words:%d", chip_addr, num_words);

    for (i=0; i<num_words; i++) 
    1794:	e03ffc15 	stw	zero,-16(fp)
    1798:	00000c06 	br	17cc <hpi_write_words+0x60>
    {
        DEBUG_OUT(" 0x%04x", *data);
        IOWR (HPI_NIOSII_BASE_ADDR, HPI_DATA    ,*data++);
    179c:	e0bffe17 	ldw	r2,-8(fp)
    17a0:	1080000b 	ldhu	r2,0(r2)
    17a4:	10ffffcc 	andi	r3,r2,65535
    17a8:	e0bffe17 	ldw	r2,-8(fp)
    17ac:	10800084 	addi	r2,r2,2
    17b0:	e0bffe15 	stw	r2,-8(fp)
    17b4:	00820034 	movhi	r2,2048
    17b8:	10801004 	addi	r2,r2,64
    17bc:	10c00035 	stwio	r3,0(r2)

    IOWR( HPI_NIOSII_BASE_ADDR,HPI_ADDR, chip_addr);

    DEBUG_OUT("write_words addr:0x%04x, num_words:%d", chip_addr, num_words);

    for (i=0; i<num_words; i++) 
    17c0:	e0bffc17 	ldw	r2,-16(fp)
    17c4:	10800044 	addi	r2,r2,1
    17c8:	e0bffc15 	stw	r2,-16(fp)
    17cc:	e0fffc17 	ldw	r3,-16(fp)
    17d0:	e0bfff17 	ldw	r2,-4(fp)
    17d4:	18bff116 	blt	r3,r2,179c <hpi_write_words+0x30>
    {
        DEBUG_OUT(" 0x%04x", *data);
        IOWR (HPI_NIOSII_BASE_ADDR, HPI_DATA    ,*data++);
    }
}
    17d8:	e037883a 	mov	sp,fp
    17dc:	df000017 	ldw	fp,0(sp)
    17e0:	dec00104 	addi	sp,sp,4
    17e4:	f800283a 	ret

000017e8 <hpi_read_words>:
 */
void hpi_read_words(unsigned short chip_addr,
                        unsigned short *data,
                        int num_words
                        )
{
    17e8:	defffb04 	addi	sp,sp,-20
    17ec:	df000415 	stw	fp,16(sp)
    17f0:	df000404 	addi	fp,sp,16
    17f4:	e17ffe15 	stw	r5,-8(fp)
    17f8:	e1bfff15 	stw	r6,-4(fp)
    17fc:	e13ffd0d 	sth	r4,-12(fp)
    int i;

    IOWR( HPI_NIOSII_BASE_ADDR,HPI_ADDR, chip_addr);
    1800:	e0fffd0b 	ldhu	r3,-12(fp)
    1804:	00820034 	movhi	r2,2048
    1808:	10801204 	addi	r2,r2,72
    180c:	10c00035 	stwio	r3,0(r2)

    DEBUG_OUT("read_words addr:0x%04x, num_words:%d", chip_addr, num_words);

    for (i=0; i<num_words; i++) 
    1810:	e03ffc15 	stw	zero,-16(fp)
    1814:	00000c06 	br	1848 <hpi_read_words+0x60>
    {
        *data++ = IORD (HPI_NIOSII_BASE_ADDR,HPI_DATA  );
    1818:	00820034 	movhi	r2,2048
    181c:	10801004 	addi	r2,r2,64
    1820:	10800037 	ldwio	r2,0(r2)
    1824:	1007883a 	mov	r3,r2
    1828:	e0bffe17 	ldw	r2,-8(fp)
    182c:	10c0000d 	sth	r3,0(r2)
    1830:	e0bffe17 	ldw	r2,-8(fp)
    1834:	10800084 	addi	r2,r2,2
    1838:	e0bffe15 	stw	r2,-8(fp)

    IOWR( HPI_NIOSII_BASE_ADDR,HPI_ADDR, chip_addr);

    DEBUG_OUT("read_words addr:0x%04x, num_words:%d", chip_addr, num_words);

    for (i=0; i<num_words; i++) 
    183c:	e0bffc17 	ldw	r2,-16(fp)
    1840:	10800044 	addi	r2,r2,1
    1844:	e0bffc15 	stw	r2,-16(fp)
    1848:	e0fffc17 	ldw	r3,-16(fp)
    184c:	e0bfff17 	ldw	r2,-4(fp)
    1850:	18bff116 	blt	r3,r2,1818 <hpi_read_words+0x30>
    {
        *data++ = IORD (HPI_NIOSII_BASE_ADDR,HPI_DATA  );
        DEBUG_OUT("    0x%04x", *(data-1));
    }
}
    1854:	e037883a 	mov	sp,fp
    1858:	df000017 	ldw	fp,0(sp)
    185c:	dec00104 	addi	sp,sp,4
    1860:	f800283a 	ret

00001864 <get_ushort>:
 *  RETURNS: 
 *    An unsigned short.
 */

unsigned short get_ushort(char * data, int start_address)
{
    1864:	defffc04 	addi	sp,sp,-16
    1868:	df000315 	stw	fp,12(sp)
    186c:	df000304 	addi	fp,sp,12
    1870:	e13ffe15 	stw	r4,-8(fp)
    1874:	e17fff15 	stw	r5,-4(fp)
    unsigned short value = 0;
    1878:	e03ffd0d 	sth	zero,-12(fp)

    value = (((unsigned short)(*(unsigned char*)(data + start_address + 1)) << 8) |
    187c:	e0bfff17 	ldw	r2,-4(fp)
    1880:	1007883a 	mov	r3,r2
    1884:	e0bffe17 	ldw	r2,-8(fp)
    1888:	1885883a 	add	r2,r3,r2
    188c:	10800044 	addi	r2,r2,1
    1890:	10800003 	ldbu	r2,0(r2)
    1894:	10803fcc 	andi	r2,r2,255
    1898:	1004923a 	slli	r2,r2,8
    189c:	1009883a 	mov	r4,r2
    18a0:	e0bfff17 	ldw	r2,-4(fp)
    18a4:	1007883a 	mov	r3,r2
    18a8:	e0bffe17 	ldw	r2,-8(fp)
    18ac:	1885883a 	add	r2,r3,r2
    18b0:	10800003 	ldbu	r2,0(r2)
    18b4:	10803fcc 	andi	r2,r2,255
    18b8:	2084b03a 	or	r2,r4,r2
    18bc:	e0bffd0d 	sth	r2,-12(fp)
              (unsigned short)(*(unsigned char*)(data + start_address)));

    return value;
    18c0:	e0bffd0b 	ldhu	r2,-12(fp)
}
    18c4:	e037883a 	mov	sp,fp
    18c8:	df000017 	ldw	fp,0(sp)
    18cc:	dec00104 	addi	sp,sp,4
    18d0:	f800283a 	ret

000018d4 <writeable_region>:
 *    SUCCESS         - Success
 *    ERROR           - Failure
 */
int writeable_region(unsigned short chip_addr,
                         int byte_length)
{
    18d4:	defffc04 	addi	sp,sp,-16
    18d8:	df000315 	stw	fp,12(sp)
    18dc:	df000304 	addi	fp,sp,12
    18e0:	e17fff15 	stw	r5,-4(fp)
    18e4:	e13ffe0d 	sth	r4,-8(fp)
    int response = ERROR;
    18e8:	00bfffc4 	movi	r2,-1
    18ec:	e0bffd15 	stw	r2,-12(fp)

    /* Check that address is in a valid writable range */
    if (((int)chip_addr + byte_length) <= 0xFFFF)
    18f0:	e0fffe0b 	ldhu	r3,-8(fp)
    18f4:	e0bfff17 	ldw	r2,-4(fp)
    18f8:	1887883a 	add	r3,r3,r2
    18fc:	00bfffd4 	movui	r2,65535
    1900:	10c00116 	blt	r2,r3,1908 <writeable_region+0x34>
        response = SUCCESS;
    1904:	e03ffd15 	stw	zero,-12(fp)

    return response;
    1908:	e0bffd17 	ldw	r2,-12(fp)
}
    190c:	e037883a 	mov	sp,fp
    1910:	df000017 	ldw	fp,0(sp)
    1914:	dec00104 	addi	sp,sp,4
    1918:	f800283a 	ret

0000191c <main>:
#endif   
   
extern DEVICE_STATUS device_status;

int main(void)
{ 
    191c:	defffd04 	addi	sp,sp,-12
    1920:	dfc00215 	stw	ra,8(sp)
    1924:	df000115 	stw	fp,4(sp)
    1928:	df000104 	addi	fp,sp,4
    DEBUG_OUT("========= DE2-115 CY7C67200 USB Device Demo [2011/07/05]=========\n");
    192c:	01000074 	movhi	r4,1
    1930:	213c2b04 	addi	r4,r4,-3924
    1934:	00023940 	call	2394 <puts>
    DEBUG_OUT("=                                                               =\n");
    1938:	01000074 	movhi	r4,1
    193c:	213c3c04 	addi	r4,r4,-3856
    1940:	00023940 	call	2394 <puts>
    DEBUG_OUT("=  This program demo a simply transfer between PC and DE2-115.  =\n");
    1944:	01000074 	movhi	r4,1
    1948:	213c4d04 	addi	r4,r4,-3788
    194c:	00023940 	call	2394 <puts>
    DEBUG_OUT("=                                                               =\n");
    1950:	01000074 	movhi	r4,1
    1954:	213c3c04 	addi	r4,r4,-3856
    1958:	00023940 	call	2394 <puts>
    DEBUG_OUT("=================================================================\n");
    195c:	01000074 	movhi	r4,1
    1960:	213c5e04 	addi	r4,r4,-3720
    1964:	00023940 	call	2394 <puts>
      * // please move the folder to a new location if you want to generate your code 
      * // otherwise there will be some error or bug when you use makep.bat 
      * 
      * you can see pcd_asm.asm to know the detail process 
      */ 
      if(dc_download((char*)pcd_asm,/*max_try*/10)==ERROR){ //fail to init
    1968:	01000074 	movhi	r4,1
    196c:	213df304 	addi	r4,r4,-2100
    1970:	01400284 	movi	r5,10
    1974:	00004fc0 	call	4fc <dc_download>
    1978:	10bfffd8 	cmpnei	r2,r2,-1
    197c:	1000061e 	bne	r2,zero,1998 <main+0x7c>
        DEBUG_OUT("-DEVICE Init - Failed to download into 67200 Chip.\n") ;
    1980:	01000074 	movhi	r4,1
    1984:	213c6f04 	addi	r4,r4,-3652
    1988:	00023940 	call	2394 <puts>
        return FALSE;
    198c:	0005883a 	mov	r2,zero
    1990:	e0bfff15 	stw	r2,-4(fp)
    1994:	00000606 	br	19b0 <main+0x94>
       }
      usleep(100000);
    1998:	010000b4 	movhi	r4,2
    199c:	2121a804 	addi	r4,r4,-31072
    19a0:	000bc380 	call	bc38 <usleep>
        {
             /****************************************
              *  mainly check the SIE2 message
              *  and then process it according to the message
              *************************************/
              dcProcessEvent();
    19a4:	0000b200 	call	b20 <dcProcessEvent>
            
             /****************************************
              *  when the status of switch or button have changed
              *  send a packet to pc to indicate the change
              *************************************/
             check_button_sw_status();
    19a8:	00010f00 	call	10f0 <check_button_sw_status>
        }
    19ac:	003ffd06 	br	19a4 <main+0x88>
          
 
   return 0;
}
    19b0:	e0bfff17 	ldw	r2,-4(fp)
    19b4:	e037883a 	mov	sp,fp
    19b8:	dfc00117 	ldw	ra,4(sp)
    19bc:	df000017 	ldw	fp,0(sp)
    19c0:	dec00204 	addi	sp,sp,8
    19c4:	f800283a 	ret

000019c8 <udivmodsi4>:
    19c8:	29001b2e 	bgeu	r5,r4,1a38 <udivmodsi4+0x70>
    19cc:	28001a16 	blt	r5,zero,1a38 <udivmodsi4+0x70>
    19d0:	00800044 	movi	r2,1
    19d4:	0007883a 	mov	r3,zero
    19d8:	01c007c4 	movi	r7,31
    19dc:	00000306 	br	19ec <udivmodsi4+0x24>
    19e0:	19c01326 	beq	r3,r7,1a30 <udivmodsi4+0x68>
    19e4:	18c00044 	addi	r3,r3,1
    19e8:	28000416 	blt	r5,zero,19fc <udivmodsi4+0x34>
    19ec:	294b883a 	add	r5,r5,r5
    19f0:	1085883a 	add	r2,r2,r2
    19f4:	293ffa36 	bltu	r5,r4,19e0 <udivmodsi4+0x18>
    19f8:	10000d26 	beq	r2,zero,1a30 <udivmodsi4+0x68>
    19fc:	0007883a 	mov	r3,zero
    1a00:	21400236 	bltu	r4,r5,1a0c <udivmodsi4+0x44>
    1a04:	2149c83a 	sub	r4,r4,r5
    1a08:	1886b03a 	or	r3,r3,r2
    1a0c:	1004d07a 	srli	r2,r2,1
    1a10:	280ad07a 	srli	r5,r5,1
    1a14:	103ffa1e 	bne	r2,zero,1a00 <udivmodsi4+0x38>
    1a18:	30000226 	beq	r6,zero,1a24 <udivmodsi4+0x5c>
    1a1c:	2005883a 	mov	r2,r4
    1a20:	f800283a 	ret
    1a24:	1809883a 	mov	r4,r3
    1a28:	2005883a 	mov	r2,r4
    1a2c:	f800283a 	ret
    1a30:	0007883a 	mov	r3,zero
    1a34:	003ff806 	br	1a18 <udivmodsi4+0x50>
    1a38:	00800044 	movi	r2,1
    1a3c:	0007883a 	mov	r3,zero
    1a40:	003fef06 	br	1a00 <udivmodsi4+0x38>

00001a44 <__divsi3>:
    1a44:	defffe04 	addi	sp,sp,-8
    1a48:	dc000015 	stw	r16,0(sp)
    1a4c:	dfc00115 	stw	ra,4(sp)
    1a50:	0021883a 	mov	r16,zero
    1a54:	20000c16 	blt	r4,zero,1a88 <__divsi3+0x44>
    1a58:	000d883a 	mov	r6,zero
    1a5c:	28000e16 	blt	r5,zero,1a98 <__divsi3+0x54>
    1a60:	00019c80 	call	19c8 <udivmodsi4>
    1a64:	1007883a 	mov	r3,r2
    1a68:	8005003a 	cmpeq	r2,r16,zero
    1a6c:	1000011e 	bne	r2,zero,1a74 <__divsi3+0x30>
    1a70:	00c7c83a 	sub	r3,zero,r3
    1a74:	1805883a 	mov	r2,r3
    1a78:	dfc00117 	ldw	ra,4(sp)
    1a7c:	dc000017 	ldw	r16,0(sp)
    1a80:	dec00204 	addi	sp,sp,8
    1a84:	f800283a 	ret
    1a88:	0109c83a 	sub	r4,zero,r4
    1a8c:	04000044 	movi	r16,1
    1a90:	000d883a 	mov	r6,zero
    1a94:	283ff20e 	bge	r5,zero,1a60 <__divsi3+0x1c>
    1a98:	014bc83a 	sub	r5,zero,r5
    1a9c:	8021003a 	cmpeq	r16,r16,zero
    1aa0:	003fef06 	br	1a60 <__divsi3+0x1c>

00001aa4 <__modsi3>:
    1aa4:	deffff04 	addi	sp,sp,-4
    1aa8:	dfc00015 	stw	ra,0(sp)
    1aac:	01800044 	movi	r6,1
    1ab0:	2807883a 	mov	r3,r5
    1ab4:	20000416 	blt	r4,zero,1ac8 <__modsi3+0x24>
    1ab8:	28000c16 	blt	r5,zero,1aec <__modsi3+0x48>
    1abc:	dfc00017 	ldw	ra,0(sp)
    1ac0:	dec00104 	addi	sp,sp,4
    1ac4:	00019c81 	jmpi	19c8 <udivmodsi4>
    1ac8:	0109c83a 	sub	r4,zero,r4
    1acc:	28000b16 	blt	r5,zero,1afc <__modsi3+0x58>
    1ad0:	180b883a 	mov	r5,r3
    1ad4:	01800044 	movi	r6,1
    1ad8:	00019c80 	call	19c8 <udivmodsi4>
    1adc:	0085c83a 	sub	r2,zero,r2
    1ae0:	dfc00017 	ldw	ra,0(sp)
    1ae4:	dec00104 	addi	sp,sp,4
    1ae8:	f800283a 	ret
    1aec:	014bc83a 	sub	r5,zero,r5
    1af0:	dfc00017 	ldw	ra,0(sp)
    1af4:	dec00104 	addi	sp,sp,4
    1af8:	00019c81 	jmpi	19c8 <udivmodsi4>
    1afc:	0147c83a 	sub	r3,zero,r5
    1b00:	003ff306 	br	1ad0 <__modsi3+0x2c>

00001b04 <__udivsi3>:
    1b04:	000d883a 	mov	r6,zero
    1b08:	00019c81 	jmpi	19c8 <udivmodsi4>

00001b0c <__umodsi3>:
    1b0c:	01800044 	movi	r6,1
    1b10:	00019c81 	jmpi	19c8 <udivmodsi4>

00001b14 <free>:
    1b14:	00800074 	movhi	r2,1
    1b18:	10852d04 	addi	r2,r2,5300
    1b1c:	200b883a 	mov	r5,r4
    1b20:	11000017 	ldw	r4,0(r2)
    1b24:	00062d81 	jmpi	62d8 <_free_r>

00001b28 <malloc>:
    1b28:	00800074 	movhi	r2,1
    1b2c:	10852d04 	addi	r2,r2,5300
    1b30:	200b883a 	mov	r5,r4
    1b34:	11000017 	ldw	r4,0(r2)
    1b38:	0001b3c1 	jmpi	1b3c <_malloc_r>

00001b3c <_malloc_r>:
    1b3c:	defff604 	addi	sp,sp,-40
    1b40:	28c002c4 	addi	r3,r5,11
    1b44:	00800584 	movi	r2,22
    1b48:	dc800215 	stw	r18,8(sp)
    1b4c:	dfc00915 	stw	ra,36(sp)
    1b50:	df000815 	stw	fp,32(sp)
    1b54:	ddc00715 	stw	r23,28(sp)
    1b58:	dd800615 	stw	r22,24(sp)
    1b5c:	dd400515 	stw	r21,20(sp)
    1b60:	dd000415 	stw	r20,16(sp)
    1b64:	dcc00315 	stw	r19,12(sp)
    1b68:	dc400115 	stw	r17,4(sp)
    1b6c:	dc000015 	stw	r16,0(sp)
    1b70:	2025883a 	mov	r18,r4
    1b74:	10c01236 	bltu	r2,r3,1bc0 <_malloc_r+0x84>
    1b78:	04400404 	movi	r17,16
    1b7c:	8940142e 	bgeu	r17,r5,1bd0 <_malloc_r+0x94>
    1b80:	00800304 	movi	r2,12
    1b84:	0007883a 	mov	r3,zero
    1b88:	90800015 	stw	r2,0(r18)
    1b8c:	1805883a 	mov	r2,r3
    1b90:	dfc00917 	ldw	ra,36(sp)
    1b94:	df000817 	ldw	fp,32(sp)
    1b98:	ddc00717 	ldw	r23,28(sp)
    1b9c:	dd800617 	ldw	r22,24(sp)
    1ba0:	dd400517 	ldw	r21,20(sp)
    1ba4:	dd000417 	ldw	r20,16(sp)
    1ba8:	dcc00317 	ldw	r19,12(sp)
    1bac:	dc800217 	ldw	r18,8(sp)
    1bb0:	dc400117 	ldw	r17,4(sp)
    1bb4:	dc000017 	ldw	r16,0(sp)
    1bb8:	dec00a04 	addi	sp,sp,40
    1bbc:	f800283a 	ret
    1bc0:	00bffe04 	movi	r2,-8
    1bc4:	18a2703a 	and	r17,r3,r2
    1bc8:	883fed16 	blt	r17,zero,1b80 <_malloc_r+0x44>
    1bcc:	897fec36 	bltu	r17,r5,1b80 <_malloc_r+0x44>
    1bd0:	9009883a 	mov	r4,r18
    1bd4:	000b7b80 	call	b7b8 <__malloc_lock>
    1bd8:	00807dc4 	movi	r2,503
    1bdc:	14402b2e 	bgeu	r2,r17,1c8c <_malloc_r+0x150>
    1be0:	8806d27a 	srli	r3,r17,9
    1be4:	18003f1e 	bne	r3,zero,1ce4 <_malloc_r+0x1a8>
    1be8:	880cd0fa 	srli	r6,r17,3
    1bec:	300490fa 	slli	r2,r6,3
    1bf0:	02c00074 	movhi	r11,1
    1bf4:	5afe5c04 	addi	r11,r11,-1680
    1bf8:	12cb883a 	add	r5,r2,r11
    1bfc:	2c000317 	ldw	r16,12(r5)
    1c00:	580f883a 	mov	r7,r11
    1c04:	2c00041e 	bne	r5,r16,1c18 <_malloc_r+0xdc>
    1c08:	00000a06 	br	1c34 <_malloc_r+0xf8>
    1c0c:	1800860e 	bge	r3,zero,1e28 <_malloc_r+0x2ec>
    1c10:	84000317 	ldw	r16,12(r16)
    1c14:	2c000726 	beq	r5,r16,1c34 <_malloc_r+0xf8>
    1c18:	80800117 	ldw	r2,4(r16)
    1c1c:	00ffff04 	movi	r3,-4
    1c20:	10c8703a 	and	r4,r2,r3
    1c24:	2447c83a 	sub	r3,r4,r17
    1c28:	008003c4 	movi	r2,15
    1c2c:	10fff70e 	bge	r2,r3,1c0c <_malloc_r+0xd0>
    1c30:	31bfffc4 	addi	r6,r6,-1
    1c34:	32400044 	addi	r9,r6,1
    1c38:	02800074 	movhi	r10,1
    1c3c:	52be5e04 	addi	r10,r10,-1672
    1c40:	54000217 	ldw	r16,8(r10)
    1c44:	8280a026 	beq	r16,r10,1ec8 <_malloc_r+0x38c>
    1c48:	80800117 	ldw	r2,4(r16)
    1c4c:	00ffff04 	movi	r3,-4
    1c50:	10ca703a 	and	r5,r2,r3
    1c54:	2c4dc83a 	sub	r6,r5,r17
    1c58:	008003c4 	movi	r2,15
    1c5c:	11808316 	blt	r2,r6,1e6c <_malloc_r+0x330>
    1c60:	52800315 	stw	r10,12(r10)
    1c64:	52800215 	stw	r10,8(r10)
    1c68:	30002916 	blt	r6,zero,1d10 <_malloc_r+0x1d4>
    1c6c:	8147883a 	add	r3,r16,r5
    1c70:	18800117 	ldw	r2,4(r3)
    1c74:	9009883a 	mov	r4,r18
    1c78:	10800054 	ori	r2,r2,1
    1c7c:	18800115 	stw	r2,4(r3)
    1c80:	000b7d80 	call	b7d8 <__malloc_unlock>
    1c84:	80c00204 	addi	r3,r16,8
    1c88:	003fc006 	br	1b8c <_malloc_r+0x50>
    1c8c:	02c00074 	movhi	r11,1
    1c90:	5afe5c04 	addi	r11,r11,-1680
    1c94:	8ac5883a 	add	r2,r17,r11
    1c98:	14000317 	ldw	r16,12(r2)
    1c9c:	580f883a 	mov	r7,r11
    1ca0:	8806d0fa 	srli	r3,r17,3
    1ca4:	14006c26 	beq	r2,r16,1e58 <_malloc_r+0x31c>
    1ca8:	80c00117 	ldw	r3,4(r16)
    1cac:	00bfff04 	movi	r2,-4
    1cb0:	81800317 	ldw	r6,12(r16)
    1cb4:	1886703a 	and	r3,r3,r2
    1cb8:	80c7883a 	add	r3,r16,r3
    1cbc:	18800117 	ldw	r2,4(r3)
    1cc0:	81400217 	ldw	r5,8(r16)
    1cc4:	9009883a 	mov	r4,r18
    1cc8:	10800054 	ori	r2,r2,1
    1ccc:	18800115 	stw	r2,4(r3)
    1cd0:	31400215 	stw	r5,8(r6)
    1cd4:	29800315 	stw	r6,12(r5)
    1cd8:	000b7d80 	call	b7d8 <__malloc_unlock>
    1cdc:	80c00204 	addi	r3,r16,8
    1ce0:	003faa06 	br	1b8c <_malloc_r+0x50>
    1ce4:	00800104 	movi	r2,4
    1ce8:	10c0052e 	bgeu	r2,r3,1d00 <_malloc_r+0x1c4>
    1cec:	00800504 	movi	r2,20
    1cf0:	10c07836 	bltu	r2,r3,1ed4 <_malloc_r+0x398>
    1cf4:	198016c4 	addi	r6,r3,91
    1cf8:	300490fa 	slli	r2,r6,3
    1cfc:	003fbc06 	br	1bf0 <_malloc_r+0xb4>
    1d00:	8804d1ba 	srli	r2,r17,6
    1d04:	11800e04 	addi	r6,r2,56
    1d08:	300490fa 	slli	r2,r6,3
    1d0c:	003fb806 	br	1bf0 <_malloc_r+0xb4>
    1d10:	00807fc4 	movi	r2,511
    1d14:	1140bb36 	bltu	r2,r5,2004 <_malloc_r+0x4c8>
    1d18:	2806d0fa 	srli	r3,r5,3
    1d1c:	573ffe04 	addi	fp,r10,-8
    1d20:	00800044 	movi	r2,1
    1d24:	180890fa 	slli	r4,r3,3
    1d28:	1807d0ba 	srai	r3,r3,2
    1d2c:	e1c00117 	ldw	r7,4(fp)
    1d30:	5909883a 	add	r4,r11,r4
    1d34:	21400217 	ldw	r5,8(r4)
    1d38:	10c4983a 	sll	r2,r2,r3
    1d3c:	81000315 	stw	r4,12(r16)
    1d40:	81400215 	stw	r5,8(r16)
    1d44:	388eb03a 	or	r7,r7,r2
    1d48:	2c000315 	stw	r16,12(r5)
    1d4c:	24000215 	stw	r16,8(r4)
    1d50:	e1c00115 	stw	r7,4(fp)
    1d54:	4807883a 	mov	r3,r9
    1d58:	4800cd16 	blt	r9,zero,2090 <_malloc_r+0x554>
    1d5c:	1807d0ba 	srai	r3,r3,2
    1d60:	00800044 	movi	r2,1
    1d64:	10c8983a 	sll	r4,r2,r3
    1d68:	39004436 	bltu	r7,r4,1e7c <_malloc_r+0x340>
    1d6c:	21c4703a 	and	r2,r4,r7
    1d70:	10000a1e 	bne	r2,zero,1d9c <_malloc_r+0x260>
    1d74:	2109883a 	add	r4,r4,r4
    1d78:	00bfff04 	movi	r2,-4
    1d7c:	4884703a 	and	r2,r9,r2
    1d80:	3906703a 	and	r3,r7,r4
    1d84:	12400104 	addi	r9,r2,4
    1d88:	1800041e 	bne	r3,zero,1d9c <_malloc_r+0x260>
    1d8c:	2109883a 	add	r4,r4,r4
    1d90:	3904703a 	and	r2,r7,r4
    1d94:	4a400104 	addi	r9,r9,4
    1d98:	103ffc26 	beq	r2,zero,1d8c <_malloc_r+0x250>
    1d9c:	480490fa 	slli	r2,r9,3
    1da0:	4819883a 	mov	r12,r9
    1da4:	023fff04 	movi	r8,-4
    1da8:	589b883a 	add	r13,r11,r2
    1dac:	6807883a 	mov	r3,r13
    1db0:	014003c4 	movi	r5,15
    1db4:	1c000317 	ldw	r16,12(r3)
    1db8:	1c00041e 	bne	r3,r16,1dcc <_malloc_r+0x290>
    1dbc:	0000a706 	br	205c <_malloc_r+0x520>
    1dc0:	3000ab0e 	bge	r6,zero,2070 <_malloc_r+0x534>
    1dc4:	84000317 	ldw	r16,12(r16)
    1dc8:	1c00a426 	beq	r3,r16,205c <_malloc_r+0x520>
    1dcc:	80800117 	ldw	r2,4(r16)
    1dd0:	1204703a 	and	r2,r2,r8
    1dd4:	144dc83a 	sub	r6,r2,r17
    1dd8:	29bff90e 	bge	r5,r6,1dc0 <_malloc_r+0x284>
    1ddc:	81000317 	ldw	r4,12(r16)
    1de0:	80c00217 	ldw	r3,8(r16)
    1de4:	89400054 	ori	r5,r17,1
    1de8:	8445883a 	add	r2,r16,r17
    1dec:	20c00215 	stw	r3,8(r4)
    1df0:	19000315 	stw	r4,12(r3)
    1df4:	81400115 	stw	r5,4(r16)
    1df8:	1187883a 	add	r3,r2,r6
    1dfc:	31000054 	ori	r4,r6,1
    1e00:	50800315 	stw	r2,12(r10)
    1e04:	50800215 	stw	r2,8(r10)
    1e08:	19800015 	stw	r6,0(r3)
    1e0c:	11000115 	stw	r4,4(r2)
    1e10:	12800215 	stw	r10,8(r2)
    1e14:	12800315 	stw	r10,12(r2)
    1e18:	9009883a 	mov	r4,r18
    1e1c:	000b7d80 	call	b7d8 <__malloc_unlock>
    1e20:	80c00204 	addi	r3,r16,8
    1e24:	003f5906 	br	1b8c <_malloc_r+0x50>
    1e28:	8109883a 	add	r4,r16,r4
    1e2c:	20800117 	ldw	r2,4(r4)
    1e30:	80c00217 	ldw	r3,8(r16)
    1e34:	81400317 	ldw	r5,12(r16)
    1e38:	10800054 	ori	r2,r2,1
    1e3c:	20800115 	stw	r2,4(r4)
    1e40:	28c00215 	stw	r3,8(r5)
    1e44:	19400315 	stw	r5,12(r3)
    1e48:	9009883a 	mov	r4,r18
    1e4c:	000b7d80 	call	b7d8 <__malloc_unlock>
    1e50:	80c00204 	addi	r3,r16,8
    1e54:	003f4d06 	br	1b8c <_malloc_r+0x50>
    1e58:	80800204 	addi	r2,r16,8
    1e5c:	14000317 	ldw	r16,12(r2)
    1e60:	143f911e 	bne	r2,r16,1ca8 <_malloc_r+0x16c>
    1e64:	1a400084 	addi	r9,r3,2
    1e68:	003f7306 	br	1c38 <_malloc_r+0xfc>
    1e6c:	88c00054 	ori	r3,r17,1
    1e70:	8445883a 	add	r2,r16,r17
    1e74:	80c00115 	stw	r3,4(r16)
    1e78:	003fdf06 	br	1df8 <_malloc_r+0x2bc>
    1e7c:	e4000217 	ldw	r16,8(fp)
    1e80:	00bfff04 	movi	r2,-4
    1e84:	80c00117 	ldw	r3,4(r16)
    1e88:	802d883a 	mov	r22,r16
    1e8c:	18aa703a 	and	r21,r3,r2
    1e90:	ac401636 	bltu	r21,r17,1eec <_malloc_r+0x3b0>
    1e94:	ac49c83a 	sub	r4,r21,r17
    1e98:	008003c4 	movi	r2,15
    1e9c:	1100130e 	bge	r2,r4,1eec <_malloc_r+0x3b0>
    1ea0:	88800054 	ori	r2,r17,1
    1ea4:	8447883a 	add	r3,r16,r17
    1ea8:	80800115 	stw	r2,4(r16)
    1eac:	20800054 	ori	r2,r4,1
    1eb0:	18800115 	stw	r2,4(r3)
    1eb4:	e0c00215 	stw	r3,8(fp)
    1eb8:	9009883a 	mov	r4,r18
    1ebc:	000b7d80 	call	b7d8 <__malloc_unlock>
    1ec0:	80c00204 	addi	r3,r16,8
    1ec4:	003f3106 	br	1b8c <_malloc_r+0x50>
    1ec8:	39c00117 	ldw	r7,4(r7)
    1ecc:	573ffe04 	addi	fp,r10,-8
    1ed0:	003fa006 	br	1d54 <_malloc_r+0x218>
    1ed4:	00801504 	movi	r2,84
    1ed8:	10c06736 	bltu	r2,r3,2078 <_malloc_r+0x53c>
    1edc:	8804d33a 	srli	r2,r17,12
    1ee0:	11801b84 	addi	r6,r2,110
    1ee4:	300490fa 	slli	r2,r6,3
    1ee8:	003f4106 	br	1bf0 <_malloc_r+0xb4>
    1eec:	d0a75e17 	ldw	r2,-25224(gp)
    1ef0:	d0e00117 	ldw	r3,-32764(gp)
    1ef4:	053fffc4 	movi	r20,-1
    1ef8:	10800404 	addi	r2,r2,16
    1efc:	88a7883a 	add	r19,r17,r2
    1f00:	1d000326 	beq	r3,r20,1f10 <_malloc_r+0x3d4>
    1f04:	98c3ffc4 	addi	r3,r19,4095
    1f08:	00bc0004 	movi	r2,-4096
    1f0c:	18a6703a 	and	r19,r3,r2
    1f10:	9009883a 	mov	r4,r18
    1f14:	980b883a 	mov	r5,r19
    1f18:	00023a80 	call	23a8 <_sbrk_r>
    1f1c:	1009883a 	mov	r4,r2
    1f20:	15000426 	beq	r2,r20,1f34 <_malloc_r+0x3f8>
    1f24:	854b883a 	add	r5,r16,r21
    1f28:	1029883a 	mov	r20,r2
    1f2c:	11405a2e 	bgeu	r2,r5,2098 <_malloc_r+0x55c>
    1f30:	87000c26 	beq	r16,fp,1f64 <_malloc_r+0x428>
    1f34:	e4000217 	ldw	r16,8(fp)
    1f38:	80c00117 	ldw	r3,4(r16)
    1f3c:	00bfff04 	movi	r2,-4
    1f40:	1884703a 	and	r2,r3,r2
    1f44:	14400336 	bltu	r2,r17,1f54 <_malloc_r+0x418>
    1f48:	1449c83a 	sub	r4,r2,r17
    1f4c:	008003c4 	movi	r2,15
    1f50:	113fd316 	blt	r2,r4,1ea0 <_malloc_r+0x364>
    1f54:	9009883a 	mov	r4,r18
    1f58:	000b7d80 	call	b7d8 <__malloc_unlock>
    1f5c:	0007883a 	mov	r3,zero
    1f60:	003f0a06 	br	1b8c <_malloc_r+0x50>
    1f64:	05c00074 	movhi	r23,1
    1f68:	bdcc9604 	addi	r23,r23,12888
    1f6c:	b8800017 	ldw	r2,0(r23)
    1f70:	988d883a 	add	r6,r19,r2
    1f74:	b9800015 	stw	r6,0(r23)
    1f78:	d0e00117 	ldw	r3,-32764(gp)
    1f7c:	00bfffc4 	movi	r2,-1
    1f80:	18808e26 	beq	r3,r2,21bc <_malloc_r+0x680>
    1f84:	2145c83a 	sub	r2,r4,r5
    1f88:	3085883a 	add	r2,r6,r2
    1f8c:	b8800015 	stw	r2,0(r23)
    1f90:	20c001cc 	andi	r3,r4,7
    1f94:	18005f1e 	bne	r3,zero,2114 <_malloc_r+0x5d8>
    1f98:	000b883a 	mov	r5,zero
    1f9c:	a4c5883a 	add	r2,r20,r19
    1fa0:	1083ffcc 	andi	r2,r2,4095
    1fa4:	00c40004 	movi	r3,4096
    1fa8:	1887c83a 	sub	r3,r3,r2
    1fac:	28e7883a 	add	r19,r5,r3
    1fb0:	9009883a 	mov	r4,r18
    1fb4:	980b883a 	mov	r5,r19
    1fb8:	00023a80 	call	23a8 <_sbrk_r>
    1fbc:	1007883a 	mov	r3,r2
    1fc0:	00bfffc4 	movi	r2,-1
    1fc4:	18807a26 	beq	r3,r2,21b0 <_malloc_r+0x674>
    1fc8:	1d05c83a 	sub	r2,r3,r20
    1fcc:	9885883a 	add	r2,r19,r2
    1fd0:	10c00054 	ori	r3,r2,1
    1fd4:	b8800017 	ldw	r2,0(r23)
    1fd8:	a021883a 	mov	r16,r20
    1fdc:	a0c00115 	stw	r3,4(r20)
    1fe0:	9885883a 	add	r2,r19,r2
    1fe4:	b8800015 	stw	r2,0(r23)
    1fe8:	e5000215 	stw	r20,8(fp)
    1fec:	b7003626 	beq	r22,fp,20c8 <_malloc_r+0x58c>
    1ff0:	018003c4 	movi	r6,15
    1ff4:	35404b36 	bltu	r6,r21,2124 <_malloc_r+0x5e8>
    1ff8:	00800044 	movi	r2,1
    1ffc:	a0800115 	stw	r2,4(r20)
    2000:	003fcd06 	br	1f38 <_malloc_r+0x3fc>
    2004:	2808d27a 	srli	r4,r5,9
    2008:	2000371e 	bne	r4,zero,20e8 <_malloc_r+0x5ac>
    200c:	2808d0fa 	srli	r4,r5,3
    2010:	200690fa 	slli	r3,r4,3
    2014:	1ad1883a 	add	r8,r3,r11
    2018:	41800217 	ldw	r6,8(r8)
    201c:	41805b26 	beq	r8,r6,218c <_malloc_r+0x650>
    2020:	30800117 	ldw	r2,4(r6)
    2024:	00ffff04 	movi	r3,-4
    2028:	10c4703a 	and	r2,r2,r3
    202c:	2880022e 	bgeu	r5,r2,2038 <_malloc_r+0x4fc>
    2030:	31800217 	ldw	r6,8(r6)
    2034:	41bffa1e 	bne	r8,r6,2020 <_malloc_r+0x4e4>
    2038:	32000317 	ldw	r8,12(r6)
    203c:	39c00117 	ldw	r7,4(r7)
    2040:	82000315 	stw	r8,12(r16)
    2044:	81800215 	stw	r6,8(r16)
    2048:	07000074 	movhi	fp,1
    204c:	e73e5c04 	addi	fp,fp,-1680
    2050:	34000315 	stw	r16,12(r6)
    2054:	44000215 	stw	r16,8(r8)
    2058:	003f3e06 	br	1d54 <_malloc_r+0x218>
    205c:	63000044 	addi	r12,r12,1
    2060:	608000cc 	andi	r2,r12,3
    2064:	10005d26 	beq	r2,zero,21dc <_malloc_r+0x6a0>
    2068:	18c00204 	addi	r3,r3,8
    206c:	003f5106 	br	1db4 <_malloc_r+0x278>
    2070:	8089883a 	add	r4,r16,r2
    2074:	003f6d06 	br	1e2c <_malloc_r+0x2f0>
    2078:	00805504 	movi	r2,340
    207c:	10c02036 	bltu	r2,r3,2100 <_malloc_r+0x5c4>
    2080:	8804d3fa 	srli	r2,r17,15
    2084:	11801dc4 	addi	r6,r2,119
    2088:	300490fa 	slli	r2,r6,3
    208c:	003ed806 	br	1bf0 <_malloc_r+0xb4>
    2090:	48c000c4 	addi	r3,r9,3
    2094:	003f3106 	br	1d5c <_malloc_r+0x220>
    2098:	05c00074 	movhi	r23,1
    209c:	bdcc9604 	addi	r23,r23,12888
    20a0:	b8800017 	ldw	r2,0(r23)
    20a4:	988d883a 	add	r6,r19,r2
    20a8:	b9800015 	stw	r6,0(r23)
    20ac:	293fb21e 	bne	r5,r4,1f78 <_malloc_r+0x43c>
    20b0:	2083ffcc 	andi	r2,r4,4095
    20b4:	103fb01e 	bne	r2,zero,1f78 <_malloc_r+0x43c>
    20b8:	e4000217 	ldw	r16,8(fp)
    20bc:	9d45883a 	add	r2,r19,r21
    20c0:	10800054 	ori	r2,r2,1
    20c4:	80800115 	stw	r2,4(r16)
    20c8:	b8c00017 	ldw	r3,0(r23)
    20cc:	d0a75f17 	ldw	r2,-25220(gp)
    20d0:	10c0012e 	bgeu	r2,r3,20d8 <_malloc_r+0x59c>
    20d4:	d0e75f15 	stw	r3,-25220(gp)
    20d8:	d0a76017 	ldw	r2,-25216(gp)
    20dc:	10ff962e 	bgeu	r2,r3,1f38 <_malloc_r+0x3fc>
    20e0:	d0e76015 	stw	r3,-25216(gp)
    20e4:	003f9406 	br	1f38 <_malloc_r+0x3fc>
    20e8:	00800104 	movi	r2,4
    20ec:	11001e36 	bltu	r2,r4,2168 <_malloc_r+0x62c>
    20f0:	2804d1ba 	srli	r2,r5,6
    20f4:	11000e04 	addi	r4,r2,56
    20f8:	200690fa 	slli	r3,r4,3
    20fc:	003fc506 	br	2014 <_malloc_r+0x4d8>
    2100:	00815504 	movi	r2,1364
    2104:	10c01d2e 	bgeu	r2,r3,217c <_malloc_r+0x640>
    2108:	01801f84 	movi	r6,126
    210c:	0080fc04 	movi	r2,1008
    2110:	003eb706 	br	1bf0 <_malloc_r+0xb4>
    2114:	00800204 	movi	r2,8
    2118:	10cbc83a 	sub	r5,r2,r3
    211c:	2169883a 	add	r20,r4,r5
    2120:	003f9e06 	br	1f9c <_malloc_r+0x460>
    2124:	00bffe04 	movi	r2,-8
    2128:	a93ffd04 	addi	r4,r21,-12
    212c:	2088703a 	and	r4,r4,r2
    2130:	b10b883a 	add	r5,r22,r4
    2134:	00c00144 	movi	r3,5
    2138:	28c00215 	stw	r3,8(r5)
    213c:	28c00115 	stw	r3,4(r5)
    2140:	b0800117 	ldw	r2,4(r22)
    2144:	1080004c 	andi	r2,r2,1
    2148:	2084b03a 	or	r2,r4,r2
    214c:	b0800115 	stw	r2,4(r22)
    2150:	313fdd2e 	bgeu	r6,r4,20c8 <_malloc_r+0x58c>
    2154:	b1400204 	addi	r5,r22,8
    2158:	9009883a 	mov	r4,r18
    215c:	00062d80 	call	62d8 <_free_r>
    2160:	e4000217 	ldw	r16,8(fp)
    2164:	003fd806 	br	20c8 <_malloc_r+0x58c>
    2168:	00800504 	movi	r2,20
    216c:	11001536 	bltu	r2,r4,21c4 <_malloc_r+0x688>
    2170:	210016c4 	addi	r4,r4,91
    2174:	200690fa 	slli	r3,r4,3
    2178:	003fa606 	br	2014 <_malloc_r+0x4d8>
    217c:	8804d4ba 	srli	r2,r17,18
    2180:	11801f04 	addi	r6,r2,124
    2184:	300490fa 	slli	r2,r6,3
    2188:	003e9906 	br	1bf0 <_malloc_r+0xb4>
    218c:	2009d0ba 	srai	r4,r4,2
    2190:	01400074 	movhi	r5,1
    2194:	297e5c04 	addi	r5,r5,-1680
    2198:	00c00044 	movi	r3,1
    219c:	28800117 	ldw	r2,4(r5)
    21a0:	1906983a 	sll	r3,r3,r4
    21a4:	10c4b03a 	or	r2,r2,r3
    21a8:	28800115 	stw	r2,4(r5)
    21ac:	003fa306 	br	203c <_malloc_r+0x500>
    21b0:	0027883a 	mov	r19,zero
    21b4:	00c00044 	movi	r3,1
    21b8:	003f8606 	br	1fd4 <_malloc_r+0x498>
    21bc:	d1200115 	stw	r4,-32764(gp)
    21c0:	003f7306 	br	1f90 <_malloc_r+0x454>
    21c4:	00801504 	movi	r2,84
    21c8:	11001936 	bltu	r2,r4,2230 <_malloc_r+0x6f4>
    21cc:	2804d33a 	srli	r2,r5,12
    21d0:	11001b84 	addi	r4,r2,110
    21d4:	200690fa 	slli	r3,r4,3
    21d8:	003f8e06 	br	2014 <_malloc_r+0x4d8>
    21dc:	480b883a 	mov	r5,r9
    21e0:	6807883a 	mov	r3,r13
    21e4:	288000cc 	andi	r2,r5,3
    21e8:	18fffe04 	addi	r3,r3,-8
    21ec:	297fffc4 	addi	r5,r5,-1
    21f0:	10001526 	beq	r2,zero,2248 <_malloc_r+0x70c>
    21f4:	18800217 	ldw	r2,8(r3)
    21f8:	10fffa26 	beq	r2,r3,21e4 <_malloc_r+0x6a8>
    21fc:	2109883a 	add	r4,r4,r4
    2200:	393f1e36 	bltu	r7,r4,1e7c <_malloc_r+0x340>
    2204:	203f1d26 	beq	r4,zero,1e7c <_malloc_r+0x340>
    2208:	21c4703a 	and	r2,r4,r7
    220c:	10000226 	beq	r2,zero,2218 <_malloc_r+0x6dc>
    2210:	6013883a 	mov	r9,r12
    2214:	003ee106 	br	1d9c <_malloc_r+0x260>
    2218:	2109883a 	add	r4,r4,r4
    221c:	3904703a 	and	r2,r7,r4
    2220:	63000104 	addi	r12,r12,4
    2224:	103ffc26 	beq	r2,zero,2218 <_malloc_r+0x6dc>
    2228:	6013883a 	mov	r9,r12
    222c:	003edb06 	br	1d9c <_malloc_r+0x260>
    2230:	00805504 	movi	r2,340
    2234:	11000836 	bltu	r2,r4,2258 <_malloc_r+0x71c>
    2238:	2804d3fa 	srli	r2,r5,15
    223c:	11001dc4 	addi	r4,r2,119
    2240:	200690fa 	slli	r3,r4,3
    2244:	003f7306 	br	2014 <_malloc_r+0x4d8>
    2248:	0104303a 	nor	r2,zero,r4
    224c:	388e703a 	and	r7,r7,r2
    2250:	e1c00115 	stw	r7,4(fp)
    2254:	003fe906 	br	21fc <_malloc_r+0x6c0>
    2258:	00815504 	movi	r2,1364
    225c:	1100032e 	bgeu	r2,r4,226c <_malloc_r+0x730>
    2260:	01001f84 	movi	r4,126
    2264:	00c0fc04 	movi	r3,1008
    2268:	003f6a06 	br	2014 <_malloc_r+0x4d8>
    226c:	2804d4ba 	srli	r2,r5,18
    2270:	11001f04 	addi	r4,r2,124
    2274:	200690fa 	slli	r3,r4,3
    2278:	003f6606 	br	2014 <_malloc_r+0x4d8>

0000227c <printf>:
    227c:	defffb04 	addi	sp,sp,-20
    2280:	dfc00115 	stw	ra,4(sp)
    2284:	d9400215 	stw	r5,8(sp)
    2288:	d9800315 	stw	r6,12(sp)
    228c:	d9c00415 	stw	r7,16(sp)
    2290:	00800074 	movhi	r2,1
    2294:	10852d04 	addi	r2,r2,5300
    2298:	10c00017 	ldw	r3,0(r2)
    229c:	200b883a 	mov	r5,r4
    22a0:	d8800204 	addi	r2,sp,8
    22a4:	19000217 	ldw	r4,8(r3)
    22a8:	100d883a 	mov	r6,r2
    22ac:	d8800015 	stw	r2,0(sp)
    22b0:	00043900 	call	4390 <__vfprintf_internal>
    22b4:	dfc00117 	ldw	ra,4(sp)
    22b8:	dec00504 	addi	sp,sp,20
    22bc:	f800283a 	ret

000022c0 <_printf_r>:
    22c0:	defffc04 	addi	sp,sp,-16
    22c4:	dfc00115 	stw	ra,4(sp)
    22c8:	d9800215 	stw	r6,8(sp)
    22cc:	d9c00315 	stw	r7,12(sp)
    22d0:	280d883a 	mov	r6,r5
    22d4:	21400217 	ldw	r5,8(r4)
    22d8:	d8c00204 	addi	r3,sp,8
    22dc:	180f883a 	mov	r7,r3
    22e0:	d8c00015 	stw	r3,0(sp)
    22e4:	00024e40 	call	24e4 <___vfprintf_internal_r>
    22e8:	dfc00117 	ldw	ra,4(sp)
    22ec:	dec00404 	addi	sp,sp,16
    22f0:	f800283a 	ret

000022f4 <_puts_r>:
    22f4:	defff604 	addi	sp,sp,-40
    22f8:	dc400715 	stw	r17,28(sp)
    22fc:	2023883a 	mov	r17,r4
    2300:	2809883a 	mov	r4,r5
    2304:	dfc00915 	stw	ra,36(sp)
    2308:	dcc00815 	stw	r19,32(sp)
    230c:	2827883a 	mov	r19,r5
    2310:	00024180 	call	2418 <strlen>
    2314:	89400217 	ldw	r5,8(r17)
    2318:	00c00074 	movhi	r3,1
    231c:	18fc7c04 	addi	r3,r3,-3600
    2320:	01c00044 	movi	r7,1
    2324:	12000044 	addi	r8,r2,1
    2328:	d8c00515 	stw	r3,20(sp)
    232c:	d9c00615 	stw	r7,24(sp)
    2330:	d8c00304 	addi	r3,sp,12
    2334:	01c00084 	movi	r7,2
    2338:	8809883a 	mov	r4,r17
    233c:	d80d883a 	mov	r6,sp
    2340:	d8c00015 	stw	r3,0(sp)
    2344:	dcc00315 	stw	r19,12(sp)
    2348:	da000215 	stw	r8,8(sp)
    234c:	d9c00115 	stw	r7,4(sp)
    2350:	d8800415 	stw	r2,16(sp)
    2354:	00065ec0 	call	65ec <__sfvwrite_r>
    2358:	00ffffc4 	movi	r3,-1
    235c:	10000626 	beq	r2,zero,2378 <_puts_r+0x84>
    2360:	1805883a 	mov	r2,r3
    2364:	dfc00917 	ldw	ra,36(sp)
    2368:	dcc00817 	ldw	r19,32(sp)
    236c:	dc400717 	ldw	r17,28(sp)
    2370:	dec00a04 	addi	sp,sp,40
    2374:	f800283a 	ret
    2378:	00c00284 	movi	r3,10
    237c:	1805883a 	mov	r2,r3
    2380:	dfc00917 	ldw	ra,36(sp)
    2384:	dcc00817 	ldw	r19,32(sp)
    2388:	dc400717 	ldw	r17,28(sp)
    238c:	dec00a04 	addi	sp,sp,40
    2390:	f800283a 	ret

00002394 <puts>:
    2394:	00800074 	movhi	r2,1
    2398:	10852d04 	addi	r2,r2,5300
    239c:	200b883a 	mov	r5,r4
    23a0:	11000017 	ldw	r4,0(r2)
    23a4:	00022f41 	jmpi	22f4 <_puts_r>

000023a8 <_sbrk_r>:
    23a8:	defffd04 	addi	sp,sp,-12
    23ac:	dc000015 	stw	r16,0(sp)
    23b0:	04000074 	movhi	r16,1
    23b4:	840c8c04 	addi	r16,r16,12848
    23b8:	dc400115 	stw	r17,4(sp)
    23bc:	80000015 	stw	zero,0(r16)
    23c0:	2023883a 	mov	r17,r4
    23c4:	2809883a 	mov	r4,r5
    23c8:	dfc00215 	stw	ra,8(sp)
    23cc:	000b9d80 	call	b9d8 <sbrk>
    23d0:	1007883a 	mov	r3,r2
    23d4:	00bfffc4 	movi	r2,-1
    23d8:	18800626 	beq	r3,r2,23f4 <_sbrk_r+0x4c>
    23dc:	1805883a 	mov	r2,r3
    23e0:	dfc00217 	ldw	ra,8(sp)
    23e4:	dc400117 	ldw	r17,4(sp)
    23e8:	dc000017 	ldw	r16,0(sp)
    23ec:	dec00304 	addi	sp,sp,12
    23f0:	f800283a 	ret
    23f4:	80800017 	ldw	r2,0(r16)
    23f8:	103ff826 	beq	r2,zero,23dc <_sbrk_r+0x34>
    23fc:	88800015 	stw	r2,0(r17)
    2400:	1805883a 	mov	r2,r3
    2404:	dfc00217 	ldw	ra,8(sp)
    2408:	dc400117 	ldw	r17,4(sp)
    240c:	dc000017 	ldw	r16,0(sp)
    2410:	dec00304 	addi	sp,sp,12
    2414:	f800283a 	ret

00002418 <strlen>:
    2418:	208000cc 	andi	r2,r4,3
    241c:	2011883a 	mov	r8,r4
    2420:	1000161e 	bne	r2,zero,247c <strlen+0x64>
    2424:	20c00017 	ldw	r3,0(r4)
    2428:	017fbff4 	movhi	r5,65279
    242c:	297fbfc4 	addi	r5,r5,-257
    2430:	01e02074 	movhi	r7,32897
    2434:	39e02004 	addi	r7,r7,-32640
    2438:	1945883a 	add	r2,r3,r5
    243c:	11c4703a 	and	r2,r2,r7
    2440:	00c6303a 	nor	r3,zero,r3
    2444:	1886703a 	and	r3,r3,r2
    2448:	18000c1e 	bne	r3,zero,247c <strlen+0x64>
    244c:	280d883a 	mov	r6,r5
    2450:	380b883a 	mov	r5,r7
    2454:	21000104 	addi	r4,r4,4
    2458:	20800017 	ldw	r2,0(r4)
    245c:	1187883a 	add	r3,r2,r6
    2460:	1946703a 	and	r3,r3,r5
    2464:	0084303a 	nor	r2,zero,r2
    2468:	10c4703a 	and	r2,r2,r3
    246c:	103ff926 	beq	r2,zero,2454 <strlen+0x3c>
    2470:	20800007 	ldb	r2,0(r4)
    2474:	10000326 	beq	r2,zero,2484 <strlen+0x6c>
    2478:	21000044 	addi	r4,r4,1
    247c:	20800007 	ldb	r2,0(r4)
    2480:	103ffd1e 	bne	r2,zero,2478 <strlen+0x60>
    2484:	2205c83a 	sub	r2,r4,r8
    2488:	f800283a 	ret

0000248c <__sprint_r>:
    248c:	30800217 	ldw	r2,8(r6)
    2490:	defffe04 	addi	sp,sp,-8
    2494:	dc000015 	stw	r16,0(sp)
    2498:	dfc00115 	stw	ra,4(sp)
    249c:	3021883a 	mov	r16,r6
    24a0:	0007883a 	mov	r3,zero
    24a4:	1000061e 	bne	r2,zero,24c0 <__sprint_r+0x34>
    24a8:	1805883a 	mov	r2,r3
    24ac:	30000115 	stw	zero,4(r6)
    24b0:	dfc00117 	ldw	ra,4(sp)
    24b4:	dc000017 	ldw	r16,0(sp)
    24b8:	dec00204 	addi	sp,sp,8
    24bc:	f800283a 	ret
    24c0:	00065ec0 	call	65ec <__sfvwrite_r>
    24c4:	1007883a 	mov	r3,r2
    24c8:	1805883a 	mov	r2,r3
    24cc:	80000115 	stw	zero,4(r16)
    24d0:	80000215 	stw	zero,8(r16)
    24d4:	dfc00117 	ldw	ra,4(sp)
    24d8:	dc000017 	ldw	r16,0(sp)
    24dc:	dec00204 	addi	sp,sp,8
    24e0:	f800283a 	ret

000024e4 <___vfprintf_internal_r>:
    24e4:	defea404 	addi	sp,sp,-1392
    24e8:	dd815815 	stw	r22,1376(sp)
    24ec:	dc015215 	stw	r16,1352(sp)
    24f0:	d9c15115 	stw	r7,1348(sp)
    24f4:	dfc15b15 	stw	ra,1388(sp)
    24f8:	df015a15 	stw	fp,1384(sp)
    24fc:	ddc15915 	stw	r23,1380(sp)
    2500:	dd415715 	stw	r21,1372(sp)
    2504:	dd015615 	stw	r20,1368(sp)
    2508:	dcc15515 	stw	r19,1364(sp)
    250c:	dc815415 	stw	r18,1360(sp)
    2510:	dc415315 	stw	r17,1356(sp)
    2514:	282d883a 	mov	r22,r5
    2518:	3021883a 	mov	r16,r6
    251c:	d9014f15 	stw	r4,1340(sp)
    2520:	0006c100 	call	6c10 <_localeconv_r>
    2524:	10800017 	ldw	r2,0(r2)
    2528:	d9c15117 	ldw	r7,1348(sp)
    252c:	d8814915 	stw	r2,1316(sp)
    2530:	d8814f17 	ldw	r2,1340(sp)
    2534:	10000226 	beq	r2,zero,2540 <___vfprintf_internal_r+0x5c>
    2538:	10800e17 	ldw	r2,56(r2)
    253c:	10020d26 	beq	r2,zero,2d74 <___vfprintf_internal_r+0x890>
    2540:	b080030b 	ldhu	r2,12(r22)
    2544:	1080020c 	andi	r2,r2,8
    2548:	10020e26 	beq	r2,zero,2d84 <___vfprintf_internal_r+0x8a0>
    254c:	b0800417 	ldw	r2,16(r22)
    2550:	10020c26 	beq	r2,zero,2d84 <___vfprintf_internal_r+0x8a0>
    2554:	b200030b 	ldhu	r8,12(r22)
    2558:	00800284 	movi	r2,10
    255c:	40c0068c 	andi	r3,r8,26
    2560:	18802f1e 	bne	r3,r2,2620 <___vfprintf_internal_r+0x13c>
    2564:	b080038f 	ldh	r2,14(r22)
    2568:	10002d16 	blt	r2,zero,2620 <___vfprintf_internal_r+0x13c>
    256c:	b240038b 	ldhu	r9,14(r22)
    2570:	b2800717 	ldw	r10,28(r22)
    2574:	b2c00917 	ldw	r11,36(r22)
    2578:	d9014f17 	ldw	r4,1340(sp)
    257c:	dc402904 	addi	r17,sp,164
    2580:	d8804004 	addi	r2,sp,256
    2584:	00c10004 	movi	r3,1024
    2588:	423fff4c 	andi	r8,r8,65533
    258c:	800d883a 	mov	r6,r16
    2590:	880b883a 	mov	r5,r17
    2594:	da002c0d 	sth	r8,176(sp)
    2598:	da402c8d 	sth	r9,178(sp)
    259c:	da803015 	stw	r10,192(sp)
    25a0:	dac03215 	stw	r11,200(sp)
    25a4:	d8802d15 	stw	r2,180(sp)
    25a8:	d8c02e15 	stw	r3,184(sp)
    25ac:	d8802915 	stw	r2,164(sp)
    25b0:	d8c02b15 	stw	r3,172(sp)
    25b4:	d8002f15 	stw	zero,188(sp)
    25b8:	00024e40 	call	24e4 <___vfprintf_internal_r>
    25bc:	d8814b15 	stw	r2,1324(sp)
    25c0:	10000416 	blt	r2,zero,25d4 <___vfprintf_internal_r+0xf0>
    25c4:	d9014f17 	ldw	r4,1340(sp)
    25c8:	880b883a 	mov	r5,r17
    25cc:	0005cbc0 	call	5cbc <_fflush_r>
    25d0:	1002321e 	bne	r2,zero,2e9c <___vfprintf_internal_r+0x9b8>
    25d4:	d8802c0b 	ldhu	r2,176(sp)
    25d8:	1080100c 	andi	r2,r2,64
    25dc:	10000326 	beq	r2,zero,25ec <___vfprintf_internal_r+0x108>
    25e0:	b080030b 	ldhu	r2,12(r22)
    25e4:	10801014 	ori	r2,r2,64
    25e8:	b080030d 	sth	r2,12(r22)
    25ec:	d8814b17 	ldw	r2,1324(sp)
    25f0:	dfc15b17 	ldw	ra,1388(sp)
    25f4:	df015a17 	ldw	fp,1384(sp)
    25f8:	ddc15917 	ldw	r23,1380(sp)
    25fc:	dd815817 	ldw	r22,1376(sp)
    2600:	dd415717 	ldw	r21,1372(sp)
    2604:	dd015617 	ldw	r20,1368(sp)
    2608:	dcc15517 	ldw	r19,1364(sp)
    260c:	dc815417 	ldw	r18,1360(sp)
    2610:	dc415317 	ldw	r17,1356(sp)
    2614:	dc015217 	ldw	r16,1352(sp)
    2618:	dec15c04 	addi	sp,sp,1392
    261c:	f800283a 	ret
    2620:	0005883a 	mov	r2,zero
    2624:	0007883a 	mov	r3,zero
    2628:	dd401904 	addi	r21,sp,100
    262c:	d8814215 	stw	r2,1288(sp)
    2630:	802f883a 	mov	r23,r16
    2634:	d8c14315 	stw	r3,1292(sp)
    2638:	d8014b15 	stw	zero,1324(sp)
    263c:	d8014815 	stw	zero,1312(sp)
    2640:	d8014415 	stw	zero,1296(sp)
    2644:	d8014715 	stw	zero,1308(sp)
    2648:	dd400c15 	stw	r21,48(sp)
    264c:	d8000e15 	stw	zero,56(sp)
    2650:	d8000d15 	stw	zero,52(sp)
    2654:	b8800007 	ldb	r2,0(r23)
    2658:	10001926 	beq	r2,zero,26c0 <___vfprintf_internal_r+0x1dc>
    265c:	00c00944 	movi	r3,37
    2660:	10c01726 	beq	r2,r3,26c0 <___vfprintf_internal_r+0x1dc>
    2664:	b821883a 	mov	r16,r23
    2668:	00000106 	br	2670 <___vfprintf_internal_r+0x18c>
    266c:	10c00326 	beq	r2,r3,267c <___vfprintf_internal_r+0x198>
    2670:	84000044 	addi	r16,r16,1
    2674:	80800007 	ldb	r2,0(r16)
    2678:	103ffc1e 	bne	r2,zero,266c <___vfprintf_internal_r+0x188>
    267c:	85e7c83a 	sub	r19,r16,r23
    2680:	98000e26 	beq	r19,zero,26bc <___vfprintf_internal_r+0x1d8>
    2684:	dc800e17 	ldw	r18,56(sp)
    2688:	dc400d17 	ldw	r17,52(sp)
    268c:	008001c4 	movi	r2,7
    2690:	94e5883a 	add	r18,r18,r19
    2694:	8c400044 	addi	r17,r17,1
    2698:	adc00015 	stw	r23,0(r21)
    269c:	dc800e15 	stw	r18,56(sp)
    26a0:	acc00115 	stw	r19,4(r21)
    26a4:	dc400d15 	stw	r17,52(sp)
    26a8:	14428b16 	blt	r2,r17,30d8 <___vfprintf_internal_r+0xbf4>
    26ac:	ad400204 	addi	r21,r21,8
    26b0:	d9014b17 	ldw	r4,1324(sp)
    26b4:	24c9883a 	add	r4,r4,r19
    26b8:	d9014b15 	stw	r4,1324(sp)
    26bc:	802f883a 	mov	r23,r16
    26c0:	b8800007 	ldb	r2,0(r23)
    26c4:	10013c26 	beq	r2,zero,2bb8 <___vfprintf_internal_r+0x6d4>
    26c8:	bdc00044 	addi	r23,r23,1
    26cc:	d8000405 	stb	zero,16(sp)
    26d0:	b8c00007 	ldb	r3,0(r23)
    26d4:	04ffffc4 	movi	r19,-1
    26d8:	d8014c15 	stw	zero,1328(sp)
    26dc:	d8014a15 	stw	zero,1320(sp)
    26e0:	d8c14d15 	stw	r3,1332(sp)
    26e4:	bdc00044 	addi	r23,r23,1
    26e8:	d9414d17 	ldw	r5,1332(sp)
    26ec:	00801604 	movi	r2,88
    26f0:	28fff804 	addi	r3,r5,-32
    26f4:	10c06036 	bltu	r2,r3,2878 <___vfprintf_internal_r+0x394>
    26f8:	18c5883a 	add	r2,r3,r3
    26fc:	1085883a 	add	r2,r2,r2
    2700:	00c00034 	movhi	r3,0
    2704:	18c9c504 	addi	r3,r3,10004
    2708:	10c5883a 	add	r2,r2,r3
    270c:	11000017 	ldw	r4,0(r2)
    2710:	2000683a 	jmp	r4
    2714:	00003688 	cmpgei	zero,zero,218
    2718:	00002878 	rdprs	zero,zero,161
    271c:	00002878 	rdprs	zero,zero,161
    2720:	00003674 	movhi	zero,217
    2724:	00002878 	rdprs	zero,zero,161
    2728:	00002878 	rdprs	zero,zero,161
    272c:	00002878 	rdprs	zero,zero,161
    2730:	00002878 	rdprs	zero,zero,161
    2734:	00002878 	rdprs	zero,zero,161
    2738:	00002878 	rdprs	zero,zero,161
    273c:	00003454 	movui	zero,209
    2740:	00003664 	muli	zero,zero,217
    2744:	00002878 	rdprs	zero,zero,161
    2748:	0000346c 	andhi	zero,zero,209
    274c:	00003700 	call	370 <LCD_Line2+0x20>
    2750:	00002878 	rdprs	zero,zero,161
    2754:	000036ec 	andhi	zero,zero,219
    2758:	000036b4 	movhi	zero,218
    275c:	000036b4 	movhi	zero,218
    2760:	000036b4 	movhi	zero,218
    2764:	000036b4 	movhi	zero,218
    2768:	000036b4 	movhi	zero,218
    276c:	000036b4 	movhi	zero,218
    2770:	000036b4 	movhi	zero,218
    2774:	000036b4 	movhi	zero,218
    2778:	000036b4 	movhi	zero,218
    277c:	00002878 	rdprs	zero,zero,161
    2780:	00002878 	rdprs	zero,zero,161
    2784:	00002878 	rdprs	zero,zero,161
    2788:	00002878 	rdprs	zero,zero,161
    278c:	00002878 	rdprs	zero,zero,161
    2790:	00002878 	rdprs	zero,zero,161
    2794:	00002878 	rdprs	zero,zero,161
    2798:	00002878 	rdprs	zero,zero,161
    279c:	00002878 	rdprs	zero,zero,161
    27a0:	00002878 	rdprs	zero,zero,161
    27a4:	00002ed0 	cmplti	zero,zero,187
    27a8:	0000353c 	xorhi	zero,zero,212
    27ac:	00002878 	rdprs	zero,zero,161
    27b0:	0000353c 	xorhi	zero,zero,212
    27b4:	00002878 	rdprs	zero,zero,161
    27b8:	00002878 	rdprs	zero,zero,161
    27bc:	00002878 	rdprs	zero,zero,161
    27c0:	00002878 	rdprs	zero,zero,161
    27c4:	000036a0 	cmpeqi	zero,zero,218
    27c8:	00002878 	rdprs	zero,zero,161
    27cc:	00002878 	rdprs	zero,zero,161
    27d0:	00002f84 	movi	zero,190
    27d4:	00002878 	rdprs	zero,zero,161
    27d8:	00002878 	rdprs	zero,zero,161
    27dc:	00002878 	rdprs	zero,zero,161
    27e0:	00002878 	rdprs	zero,zero,161
    27e4:	00002878 	rdprs	zero,zero,161
    27e8:	00002fd0 	cmplti	zero,zero,191
    27ec:	00002878 	rdprs	zero,zero,161
    27f0:	00002878 	rdprs	zero,zero,161
    27f4:	000035f0 	cmpltui	zero,zero,215
    27f8:	00002878 	rdprs	zero,zero,161
    27fc:	00002878 	rdprs	zero,zero,161
    2800:	00002878 	rdprs	zero,zero,161
    2804:	00002878 	rdprs	zero,zero,161
    2808:	00002878 	rdprs	zero,zero,161
    280c:	00002878 	rdprs	zero,zero,161
    2810:	00002878 	rdprs	zero,zero,161
    2814:	00002878 	rdprs	zero,zero,161
    2818:	00002878 	rdprs	zero,zero,161
    281c:	00002878 	rdprs	zero,zero,161
    2820:	000035c4 	movi	zero,215
    2824:	00002edc 	xori	zero,zero,187
    2828:	0000353c 	xorhi	zero,zero,212
    282c:	0000353c 	xorhi	zero,zero,212
    2830:	0000353c 	xorhi	zero,zero,212
    2834:	00003528 	cmpgeui	zero,zero,212
    2838:	00002edc 	xori	zero,zero,187
    283c:	00002878 	rdprs	zero,zero,161
    2840:	00002878 	rdprs	zero,zero,161
    2844:	000034b0 	cmpltui	zero,zero,210
    2848:	00002878 	rdprs	zero,zero,161
    284c:	00003480 	call	348 <LCD_Line1+0x34>
    2850:	00002f90 	cmplti	zero,zero,190
    2854:	000034e0 	cmpeqi	zero,zero,211
    2858:	000034cc 	andi	zero,zero,211
    285c:	00002878 	rdprs	zero,zero,161
    2860:	0000375c 	xori	zero,zero,221
    2864:	00002878 	rdprs	zero,zero,161
    2868:	00002fdc 	xori	zero,zero,191
    286c:	00002878 	rdprs	zero,zero,161
    2870:	00002878 	rdprs	zero,zero,161
    2874:	00003654 	movui	zero,217
    2878:	d9014d17 	ldw	r4,1332(sp)
    287c:	2000ce26 	beq	r4,zero,2bb8 <___vfprintf_internal_r+0x6d4>
    2880:	01400044 	movi	r5,1
    2884:	d9800f04 	addi	r6,sp,60
    2888:	d9c14015 	stw	r7,1280(sp)
    288c:	d9414515 	stw	r5,1300(sp)
    2890:	d9814115 	stw	r6,1284(sp)
    2894:	280f883a 	mov	r7,r5
    2898:	d9000f05 	stb	r4,60(sp)
    289c:	d8000405 	stb	zero,16(sp)
    28a0:	d8014615 	stw	zero,1304(sp)
    28a4:	d8c14c17 	ldw	r3,1328(sp)
    28a8:	1880008c 	andi	r2,r3,2
    28ac:	1005003a 	cmpeq	r2,r2,zero
    28b0:	d8815015 	stw	r2,1344(sp)
    28b4:	1000031e 	bne	r2,zero,28c4 <___vfprintf_internal_r+0x3e0>
    28b8:	d9014517 	ldw	r4,1300(sp)
    28bc:	21000084 	addi	r4,r4,2
    28c0:	d9014515 	stw	r4,1300(sp)
    28c4:	d9414c17 	ldw	r5,1328(sp)
    28c8:	2940210c 	andi	r5,r5,132
    28cc:	d9414e15 	stw	r5,1336(sp)
    28d0:	28002d1e 	bne	r5,zero,2988 <___vfprintf_internal_r+0x4a4>
    28d4:	d9814a17 	ldw	r6,1320(sp)
    28d8:	d8814517 	ldw	r2,1300(sp)
    28dc:	30a1c83a 	sub	r16,r6,r2
    28e0:	0400290e 	bge	zero,r16,2988 <___vfprintf_internal_r+0x4a4>
    28e4:	00800404 	movi	r2,16
    28e8:	1404580e 	bge	r2,r16,3a4c <___vfprintf_internal_r+0x1568>
    28ec:	dc800e17 	ldw	r18,56(sp)
    28f0:	dc400d17 	ldw	r17,52(sp)
    28f4:	1027883a 	mov	r19,r2
    28f8:	07000074 	movhi	fp,1
    28fc:	e73c9884 	addi	fp,fp,-3486
    2900:	050001c4 	movi	r20,7
    2904:	00000306 	br	2914 <___vfprintf_internal_r+0x430>
    2908:	843ffc04 	addi	r16,r16,-16
    290c:	ad400204 	addi	r21,r21,8
    2910:	9c00130e 	bge	r19,r16,2960 <___vfprintf_internal_r+0x47c>
    2914:	94800404 	addi	r18,r18,16
    2918:	8c400044 	addi	r17,r17,1
    291c:	af000015 	stw	fp,0(r21)
    2920:	acc00115 	stw	r19,4(r21)
    2924:	dc800e15 	stw	r18,56(sp)
    2928:	dc400d15 	stw	r17,52(sp)
    292c:	a47ff60e 	bge	r20,r17,2908 <___vfprintf_internal_r+0x424>
    2930:	d9014f17 	ldw	r4,1340(sp)
    2934:	b00b883a 	mov	r5,r22
    2938:	d9800c04 	addi	r6,sp,48
    293c:	d9c15115 	stw	r7,1348(sp)
    2940:	000248c0 	call	248c <__sprint_r>
    2944:	d9c15117 	ldw	r7,1348(sp)
    2948:	10009e1e 	bne	r2,zero,2bc4 <___vfprintf_internal_r+0x6e0>
    294c:	843ffc04 	addi	r16,r16,-16
    2950:	dc800e17 	ldw	r18,56(sp)
    2954:	dc400d17 	ldw	r17,52(sp)
    2958:	dd401904 	addi	r21,sp,100
    295c:	9c3fed16 	blt	r19,r16,2914 <___vfprintf_internal_r+0x430>
    2960:	9425883a 	add	r18,r18,r16
    2964:	8c400044 	addi	r17,r17,1
    2968:	008001c4 	movi	r2,7
    296c:	af000015 	stw	fp,0(r21)
    2970:	ac000115 	stw	r16,4(r21)
    2974:	dc800e15 	stw	r18,56(sp)
    2978:	dc400d15 	stw	r17,52(sp)
    297c:	1441f516 	blt	r2,r17,3154 <___vfprintf_internal_r+0xc70>
    2980:	ad400204 	addi	r21,r21,8
    2984:	00000206 	br	2990 <___vfprintf_internal_r+0x4ac>
    2988:	dc800e17 	ldw	r18,56(sp)
    298c:	dc400d17 	ldw	r17,52(sp)
    2990:	d8800407 	ldb	r2,16(sp)
    2994:	10000b26 	beq	r2,zero,29c4 <___vfprintf_internal_r+0x4e0>
    2998:	00800044 	movi	r2,1
    299c:	94800044 	addi	r18,r18,1
    29a0:	8c400044 	addi	r17,r17,1
    29a4:	a8800115 	stw	r2,4(r21)
    29a8:	d8c00404 	addi	r3,sp,16
    29ac:	008001c4 	movi	r2,7
    29b0:	a8c00015 	stw	r3,0(r21)
    29b4:	dc800e15 	stw	r18,56(sp)
    29b8:	dc400d15 	stw	r17,52(sp)
    29bc:	1441da16 	blt	r2,r17,3128 <___vfprintf_internal_r+0xc44>
    29c0:	ad400204 	addi	r21,r21,8
    29c4:	d9015017 	ldw	r4,1344(sp)
    29c8:	20000b1e 	bne	r4,zero,29f8 <___vfprintf_internal_r+0x514>
    29cc:	d8800444 	addi	r2,sp,17
    29d0:	94800084 	addi	r18,r18,2
    29d4:	8c400044 	addi	r17,r17,1
    29d8:	a8800015 	stw	r2,0(r21)
    29dc:	00c00084 	movi	r3,2
    29e0:	008001c4 	movi	r2,7
    29e4:	a8c00115 	stw	r3,4(r21)
    29e8:	dc800e15 	stw	r18,56(sp)
    29ec:	dc400d15 	stw	r17,52(sp)
    29f0:	1441c216 	blt	r2,r17,30fc <___vfprintf_internal_r+0xc18>
    29f4:	ad400204 	addi	r21,r21,8
    29f8:	d9414e17 	ldw	r5,1336(sp)
    29fc:	00802004 	movi	r2,128
    2a00:	2880b126 	beq	r5,r2,2cc8 <___vfprintf_internal_r+0x7e4>
    2a04:	d8c14617 	ldw	r3,1304(sp)
    2a08:	19e1c83a 	sub	r16,r3,r7
    2a0c:	0400260e 	bge	zero,r16,2aa8 <___vfprintf_internal_r+0x5c4>
    2a10:	00800404 	movi	r2,16
    2a14:	1403c90e 	bge	r2,r16,393c <___vfprintf_internal_r+0x1458>
    2a18:	1027883a 	mov	r19,r2
    2a1c:	07000074 	movhi	fp,1
    2a20:	e73c9484 	addi	fp,fp,-3502
    2a24:	050001c4 	movi	r20,7
    2a28:	00000306 	br	2a38 <___vfprintf_internal_r+0x554>
    2a2c:	843ffc04 	addi	r16,r16,-16
    2a30:	ad400204 	addi	r21,r21,8
    2a34:	9c00130e 	bge	r19,r16,2a84 <___vfprintf_internal_r+0x5a0>
    2a38:	94800404 	addi	r18,r18,16
    2a3c:	8c400044 	addi	r17,r17,1
    2a40:	af000015 	stw	fp,0(r21)
    2a44:	acc00115 	stw	r19,4(r21)
    2a48:	dc800e15 	stw	r18,56(sp)
    2a4c:	dc400d15 	stw	r17,52(sp)
    2a50:	a47ff60e 	bge	r20,r17,2a2c <___vfprintf_internal_r+0x548>
    2a54:	d9014f17 	ldw	r4,1340(sp)
    2a58:	b00b883a 	mov	r5,r22
    2a5c:	d9800c04 	addi	r6,sp,48
    2a60:	d9c15115 	stw	r7,1348(sp)
    2a64:	000248c0 	call	248c <__sprint_r>
    2a68:	d9c15117 	ldw	r7,1348(sp)
    2a6c:	1000551e 	bne	r2,zero,2bc4 <___vfprintf_internal_r+0x6e0>
    2a70:	843ffc04 	addi	r16,r16,-16
    2a74:	dc800e17 	ldw	r18,56(sp)
    2a78:	dc400d17 	ldw	r17,52(sp)
    2a7c:	dd401904 	addi	r21,sp,100
    2a80:	9c3fed16 	blt	r19,r16,2a38 <___vfprintf_internal_r+0x554>
    2a84:	9425883a 	add	r18,r18,r16
    2a88:	8c400044 	addi	r17,r17,1
    2a8c:	008001c4 	movi	r2,7
    2a90:	af000015 	stw	fp,0(r21)
    2a94:	ac000115 	stw	r16,4(r21)
    2a98:	dc800e15 	stw	r18,56(sp)
    2a9c:	dc400d15 	stw	r17,52(sp)
    2aa0:	14418216 	blt	r2,r17,30ac <___vfprintf_internal_r+0xbc8>
    2aa4:	ad400204 	addi	r21,r21,8
    2aa8:	d9014c17 	ldw	r4,1328(sp)
    2aac:	2080400c 	andi	r2,r4,256
    2ab0:	10004a1e 	bne	r2,zero,2bdc <___vfprintf_internal_r+0x6f8>
    2ab4:	d9414117 	ldw	r5,1284(sp)
    2ab8:	91e5883a 	add	r18,r18,r7
    2abc:	8c400044 	addi	r17,r17,1
    2ac0:	008001c4 	movi	r2,7
    2ac4:	a9400015 	stw	r5,0(r21)
    2ac8:	a9c00115 	stw	r7,4(r21)
    2acc:	dc800e15 	stw	r18,56(sp)
    2ad0:	dc400d15 	stw	r17,52(sp)
    2ad4:	14416716 	blt	r2,r17,3074 <___vfprintf_internal_r+0xb90>
    2ad8:	a8c00204 	addi	r3,r21,8
    2adc:	d9814c17 	ldw	r6,1328(sp)
    2ae0:	3080010c 	andi	r2,r6,4
    2ae4:	10002826 	beq	r2,zero,2b88 <___vfprintf_internal_r+0x6a4>
    2ae8:	d8814a17 	ldw	r2,1320(sp)
    2aec:	d9014517 	ldw	r4,1300(sp)
    2af0:	1121c83a 	sub	r16,r2,r4
    2af4:	0400240e 	bge	zero,r16,2b88 <___vfprintf_internal_r+0x6a4>
    2af8:	00800404 	movi	r2,16
    2afc:	14044f0e 	bge	r2,r16,3c3c <___vfprintf_internal_r+0x1758>
    2b00:	dc400d17 	ldw	r17,52(sp)
    2b04:	1027883a 	mov	r19,r2
    2b08:	07000074 	movhi	fp,1
    2b0c:	e73c9884 	addi	fp,fp,-3486
    2b10:	050001c4 	movi	r20,7
    2b14:	00000306 	br	2b24 <___vfprintf_internal_r+0x640>
    2b18:	843ffc04 	addi	r16,r16,-16
    2b1c:	18c00204 	addi	r3,r3,8
    2b20:	9c00110e 	bge	r19,r16,2b68 <___vfprintf_internal_r+0x684>
    2b24:	94800404 	addi	r18,r18,16
    2b28:	8c400044 	addi	r17,r17,1
    2b2c:	1f000015 	stw	fp,0(r3)
    2b30:	1cc00115 	stw	r19,4(r3)
    2b34:	dc800e15 	stw	r18,56(sp)
    2b38:	dc400d15 	stw	r17,52(sp)
    2b3c:	a47ff60e 	bge	r20,r17,2b18 <___vfprintf_internal_r+0x634>
    2b40:	d9014f17 	ldw	r4,1340(sp)
    2b44:	b00b883a 	mov	r5,r22
    2b48:	d9800c04 	addi	r6,sp,48
    2b4c:	000248c0 	call	248c <__sprint_r>
    2b50:	10001c1e 	bne	r2,zero,2bc4 <___vfprintf_internal_r+0x6e0>
    2b54:	843ffc04 	addi	r16,r16,-16
    2b58:	dc800e17 	ldw	r18,56(sp)
    2b5c:	dc400d17 	ldw	r17,52(sp)
    2b60:	d8c01904 	addi	r3,sp,100
    2b64:	9c3fef16 	blt	r19,r16,2b24 <___vfprintf_internal_r+0x640>
    2b68:	9425883a 	add	r18,r18,r16
    2b6c:	8c400044 	addi	r17,r17,1
    2b70:	008001c4 	movi	r2,7
    2b74:	1f000015 	stw	fp,0(r3)
    2b78:	1c000115 	stw	r16,4(r3)
    2b7c:	dc800e15 	stw	r18,56(sp)
    2b80:	dc400d15 	stw	r17,52(sp)
    2b84:	1440cb16 	blt	r2,r17,2eb4 <___vfprintf_internal_r+0x9d0>
    2b88:	d8814a17 	ldw	r2,1320(sp)
    2b8c:	d9414517 	ldw	r5,1300(sp)
    2b90:	1140010e 	bge	r2,r5,2b98 <___vfprintf_internal_r+0x6b4>
    2b94:	2805883a 	mov	r2,r5
    2b98:	d9814b17 	ldw	r6,1324(sp)
    2b9c:	308d883a 	add	r6,r6,r2
    2ba0:	d9814b15 	stw	r6,1324(sp)
    2ba4:	90013b1e 	bne	r18,zero,3094 <___vfprintf_internal_r+0xbb0>
    2ba8:	d9c14017 	ldw	r7,1280(sp)
    2bac:	dd401904 	addi	r21,sp,100
    2bb0:	d8000d15 	stw	zero,52(sp)
    2bb4:	003ea706 	br	2654 <___vfprintf_internal_r+0x170>
    2bb8:	d8800e17 	ldw	r2,56(sp)
    2bbc:	10053f1e 	bne	r2,zero,40bc <___vfprintf_internal_r+0x1bd8>
    2bc0:	d8000d15 	stw	zero,52(sp)
    2bc4:	b080030b 	ldhu	r2,12(r22)
    2bc8:	1080100c 	andi	r2,r2,64
    2bcc:	103e8726 	beq	r2,zero,25ec <___vfprintf_internal_r+0x108>
    2bd0:	00bfffc4 	movi	r2,-1
    2bd4:	d8814b15 	stw	r2,1324(sp)
    2bd8:	003e8406 	br	25ec <___vfprintf_internal_r+0x108>
    2bdc:	d9814d17 	ldw	r6,1332(sp)
    2be0:	00801944 	movi	r2,101
    2be4:	11806e16 	blt	r2,r6,2da0 <___vfprintf_internal_r+0x8bc>
    2be8:	d9414717 	ldw	r5,1308(sp)
    2bec:	00c00044 	movi	r3,1
    2bf0:	1943430e 	bge	r3,r5,3900 <___vfprintf_internal_r+0x141c>
    2bf4:	d8814117 	ldw	r2,1284(sp)
    2bf8:	94800044 	addi	r18,r18,1
    2bfc:	8c400044 	addi	r17,r17,1
    2c00:	a8800015 	stw	r2,0(r21)
    2c04:	008001c4 	movi	r2,7
    2c08:	a8c00115 	stw	r3,4(r21)
    2c0c:	dc800e15 	stw	r18,56(sp)
    2c10:	dc400d15 	stw	r17,52(sp)
    2c14:	1441ca16 	blt	r2,r17,3340 <___vfprintf_internal_r+0xe5c>
    2c18:	a8c00204 	addi	r3,r21,8
    2c1c:	d9014917 	ldw	r4,1316(sp)
    2c20:	00800044 	movi	r2,1
    2c24:	94800044 	addi	r18,r18,1
    2c28:	8c400044 	addi	r17,r17,1
    2c2c:	18800115 	stw	r2,4(r3)
    2c30:	008001c4 	movi	r2,7
    2c34:	19000015 	stw	r4,0(r3)
    2c38:	dc800e15 	stw	r18,56(sp)
    2c3c:	dc400d15 	stw	r17,52(sp)
    2c40:	1441b616 	blt	r2,r17,331c <___vfprintf_internal_r+0xe38>
    2c44:	1cc00204 	addi	r19,r3,8
    2c48:	d9014217 	ldw	r4,1288(sp)
    2c4c:	d9414317 	ldw	r5,1292(sp)
    2c50:	000d883a 	mov	r6,zero
    2c54:	000f883a 	mov	r7,zero
    2c58:	000a5840 	call	a584 <__nedf2>
    2c5c:	10017426 	beq	r2,zero,3230 <___vfprintf_internal_r+0xd4c>
    2c60:	d9414717 	ldw	r5,1308(sp)
    2c64:	d9814117 	ldw	r6,1284(sp)
    2c68:	8c400044 	addi	r17,r17,1
    2c6c:	2c85883a 	add	r2,r5,r18
    2c70:	14bfffc4 	addi	r18,r2,-1
    2c74:	28bfffc4 	addi	r2,r5,-1
    2c78:	30c00044 	addi	r3,r6,1
    2c7c:	98800115 	stw	r2,4(r19)
    2c80:	008001c4 	movi	r2,7
    2c84:	98c00015 	stw	r3,0(r19)
    2c88:	dc800e15 	stw	r18,56(sp)
    2c8c:	dc400d15 	stw	r17,52(sp)
    2c90:	14418e16 	blt	r2,r17,32cc <___vfprintf_internal_r+0xde8>
    2c94:	9cc00204 	addi	r19,r19,8
    2c98:	d9414817 	ldw	r5,1312(sp)
    2c9c:	d8800804 	addi	r2,sp,32
    2ca0:	8c400044 	addi	r17,r17,1
    2ca4:	9165883a 	add	r18,r18,r5
    2ca8:	98800015 	stw	r2,0(r19)
    2cac:	008001c4 	movi	r2,7
    2cb0:	99400115 	stw	r5,4(r19)
    2cb4:	dc800e15 	stw	r18,56(sp)
    2cb8:	dc400d15 	stw	r17,52(sp)
    2cbc:	1440ed16 	blt	r2,r17,3074 <___vfprintf_internal_r+0xb90>
    2cc0:	98c00204 	addi	r3,r19,8
    2cc4:	003f8506 	br	2adc <___vfprintf_internal_r+0x5f8>
    2cc8:	d9814a17 	ldw	r6,1320(sp)
    2ccc:	d8814517 	ldw	r2,1300(sp)
    2cd0:	30a1c83a 	sub	r16,r6,r2
    2cd4:	043f4b0e 	bge	zero,r16,2a04 <___vfprintf_internal_r+0x520>
    2cd8:	00800404 	movi	r2,16
    2cdc:	1404340e 	bge	r2,r16,3db0 <___vfprintf_internal_r+0x18cc>
    2ce0:	1027883a 	mov	r19,r2
    2ce4:	07000074 	movhi	fp,1
    2ce8:	e73c9484 	addi	fp,fp,-3502
    2cec:	050001c4 	movi	r20,7
    2cf0:	00000306 	br	2d00 <___vfprintf_internal_r+0x81c>
    2cf4:	843ffc04 	addi	r16,r16,-16
    2cf8:	ad400204 	addi	r21,r21,8
    2cfc:	9c00130e 	bge	r19,r16,2d4c <___vfprintf_internal_r+0x868>
    2d00:	94800404 	addi	r18,r18,16
    2d04:	8c400044 	addi	r17,r17,1
    2d08:	af000015 	stw	fp,0(r21)
    2d0c:	acc00115 	stw	r19,4(r21)
    2d10:	dc800e15 	stw	r18,56(sp)
    2d14:	dc400d15 	stw	r17,52(sp)
    2d18:	a47ff60e 	bge	r20,r17,2cf4 <___vfprintf_internal_r+0x810>
    2d1c:	d9014f17 	ldw	r4,1340(sp)
    2d20:	b00b883a 	mov	r5,r22
    2d24:	d9800c04 	addi	r6,sp,48
    2d28:	d9c15115 	stw	r7,1348(sp)
    2d2c:	000248c0 	call	248c <__sprint_r>
    2d30:	d9c15117 	ldw	r7,1348(sp)
    2d34:	103fa31e 	bne	r2,zero,2bc4 <___vfprintf_internal_r+0x6e0>
    2d38:	843ffc04 	addi	r16,r16,-16
    2d3c:	dc800e17 	ldw	r18,56(sp)
    2d40:	dc400d17 	ldw	r17,52(sp)
    2d44:	dd401904 	addi	r21,sp,100
    2d48:	9c3fed16 	blt	r19,r16,2d00 <___vfprintf_internal_r+0x81c>
    2d4c:	9425883a 	add	r18,r18,r16
    2d50:	8c400044 	addi	r17,r17,1
    2d54:	008001c4 	movi	r2,7
    2d58:	af000015 	stw	fp,0(r21)
    2d5c:	ac000115 	stw	r16,4(r21)
    2d60:	dc800e15 	stw	r18,56(sp)
    2d64:	dc400d15 	stw	r17,52(sp)
    2d68:	14416116 	blt	r2,r17,32f0 <___vfprintf_internal_r+0xe0c>
    2d6c:	ad400204 	addi	r21,r21,8
    2d70:	003f2406 	br	2a04 <___vfprintf_internal_r+0x520>
    2d74:	d9014f17 	ldw	r4,1340(sp)
    2d78:	0005f540 	call	5f54 <__sinit>
    2d7c:	d9c15117 	ldw	r7,1348(sp)
    2d80:	003def06 	br	2540 <___vfprintf_internal_r+0x5c>
    2d84:	d9014f17 	ldw	r4,1340(sp)
    2d88:	b00b883a 	mov	r5,r22
    2d8c:	d9c15115 	stw	r7,1348(sp)
    2d90:	00043b40 	call	43b4 <__swsetup_r>
    2d94:	d9c15117 	ldw	r7,1348(sp)
    2d98:	103dee26 	beq	r2,zero,2554 <___vfprintf_internal_r+0x70>
    2d9c:	003f8c06 	br	2bd0 <___vfprintf_internal_r+0x6ec>
    2da0:	d9014217 	ldw	r4,1288(sp)
    2da4:	d9414317 	ldw	r5,1292(sp)
    2da8:	000d883a 	mov	r6,zero
    2dac:	000f883a 	mov	r7,zero
    2db0:	000a4fc0 	call	a4fc <__eqdf2>
    2db4:	1000f21e 	bne	r2,zero,3180 <___vfprintf_internal_r+0xc9c>
    2db8:	00800074 	movhi	r2,1
    2dbc:	10bc9404 	addi	r2,r2,-3504
    2dc0:	94800044 	addi	r18,r18,1
    2dc4:	8c400044 	addi	r17,r17,1
    2dc8:	a8800015 	stw	r2,0(r21)
    2dcc:	00c00044 	movi	r3,1
    2dd0:	008001c4 	movi	r2,7
    2dd4:	a8c00115 	stw	r3,4(r21)
    2dd8:	dc800e15 	stw	r18,56(sp)
    2ddc:	dc400d15 	stw	r17,52(sp)
    2de0:	1442fa16 	blt	r2,r17,39cc <___vfprintf_internal_r+0x14e8>
    2de4:	a8c00204 	addi	r3,r21,8
    2de8:	d8800517 	ldw	r2,20(sp)
    2dec:	d9014717 	ldw	r4,1308(sp)
    2df0:	11015c0e 	bge	r2,r4,3364 <___vfprintf_internal_r+0xe80>
    2df4:	dc400d17 	ldw	r17,52(sp)
    2df8:	d9814917 	ldw	r6,1316(sp)
    2dfc:	00800044 	movi	r2,1
    2e00:	94800044 	addi	r18,r18,1
    2e04:	8c400044 	addi	r17,r17,1
    2e08:	18800115 	stw	r2,4(r3)
    2e0c:	008001c4 	movi	r2,7
    2e10:	19800015 	stw	r6,0(r3)
    2e14:	dc800e15 	stw	r18,56(sp)
    2e18:	dc400d15 	stw	r17,52(sp)
    2e1c:	14431016 	blt	r2,r17,3a60 <___vfprintf_internal_r+0x157c>
    2e20:	18c00204 	addi	r3,r3,8
    2e24:	d8814717 	ldw	r2,1308(sp)
    2e28:	143fffc4 	addi	r16,r2,-1
    2e2c:	043f2b0e 	bge	zero,r16,2adc <___vfprintf_internal_r+0x5f8>
    2e30:	00800404 	movi	r2,16
    2e34:	1402a20e 	bge	r2,r16,38c0 <___vfprintf_internal_r+0x13dc>
    2e38:	dc400d17 	ldw	r17,52(sp)
    2e3c:	1027883a 	mov	r19,r2
    2e40:	07000074 	movhi	fp,1
    2e44:	e73c9484 	addi	fp,fp,-3502
    2e48:	050001c4 	movi	r20,7
    2e4c:	00000306 	br	2e5c <___vfprintf_internal_r+0x978>
    2e50:	18c00204 	addi	r3,r3,8
    2e54:	843ffc04 	addi	r16,r16,-16
    2e58:	9c029c0e 	bge	r19,r16,38cc <___vfprintf_internal_r+0x13e8>
    2e5c:	94800404 	addi	r18,r18,16
    2e60:	8c400044 	addi	r17,r17,1
    2e64:	1f000015 	stw	fp,0(r3)
    2e68:	1cc00115 	stw	r19,4(r3)
    2e6c:	dc800e15 	stw	r18,56(sp)
    2e70:	dc400d15 	stw	r17,52(sp)
    2e74:	a47ff60e 	bge	r20,r17,2e50 <___vfprintf_internal_r+0x96c>
    2e78:	d9014f17 	ldw	r4,1340(sp)
    2e7c:	b00b883a 	mov	r5,r22
    2e80:	d9800c04 	addi	r6,sp,48
    2e84:	000248c0 	call	248c <__sprint_r>
    2e88:	103f4e1e 	bne	r2,zero,2bc4 <___vfprintf_internal_r+0x6e0>
    2e8c:	dc800e17 	ldw	r18,56(sp)
    2e90:	dc400d17 	ldw	r17,52(sp)
    2e94:	d8c01904 	addi	r3,sp,100
    2e98:	003fee06 	br	2e54 <___vfprintf_internal_r+0x970>
    2e9c:	d8802c0b 	ldhu	r2,176(sp)
    2ea0:	00ffffc4 	movi	r3,-1
    2ea4:	d8c14b15 	stw	r3,1324(sp)
    2ea8:	1080100c 	andi	r2,r2,64
    2eac:	103dcc1e 	bne	r2,zero,25e0 <___vfprintf_internal_r+0xfc>
    2eb0:	003dce06 	br	25ec <___vfprintf_internal_r+0x108>
    2eb4:	d9014f17 	ldw	r4,1340(sp)
    2eb8:	b00b883a 	mov	r5,r22
    2ebc:	d9800c04 	addi	r6,sp,48
    2ec0:	000248c0 	call	248c <__sprint_r>
    2ec4:	103f3f1e 	bne	r2,zero,2bc4 <___vfprintf_internal_r+0x6e0>
    2ec8:	dc800e17 	ldw	r18,56(sp)
    2ecc:	003f2e06 	br	2b88 <___vfprintf_internal_r+0x6a4>
    2ed0:	d9414c17 	ldw	r5,1328(sp)
    2ed4:	29400414 	ori	r5,r5,16
    2ed8:	d9414c15 	stw	r5,1328(sp)
    2edc:	d9814c17 	ldw	r6,1328(sp)
    2ee0:	3080080c 	andi	r2,r6,32
    2ee4:	10014f1e 	bne	r2,zero,3424 <___vfprintf_internal_r+0xf40>
    2ee8:	d8c14c17 	ldw	r3,1328(sp)
    2eec:	1880040c 	andi	r2,r3,16
    2ef0:	1002ea1e 	bne	r2,zero,3a9c <___vfprintf_internal_r+0x15b8>
    2ef4:	d9014c17 	ldw	r4,1328(sp)
    2ef8:	2080100c 	andi	r2,r4,64
    2efc:	1002e726 	beq	r2,zero,3a9c <___vfprintf_internal_r+0x15b8>
    2f00:	3880000f 	ldh	r2,0(r7)
    2f04:	39c00104 	addi	r7,r7,4
    2f08:	d9c14015 	stw	r7,1280(sp)
    2f0c:	1023d7fa 	srai	r17,r2,31
    2f10:	1021883a 	mov	r16,r2
    2f14:	88037216 	blt	r17,zero,3ce0 <___vfprintf_internal_r+0x17fc>
    2f18:	01000044 	movi	r4,1
    2f1c:	98000416 	blt	r19,zero,2f30 <___vfprintf_internal_r+0xa4c>
    2f20:	d8c14c17 	ldw	r3,1328(sp)
    2f24:	00bfdfc4 	movi	r2,-129
    2f28:	1886703a 	and	r3,r3,r2
    2f2c:	d8c14c15 	stw	r3,1328(sp)
    2f30:	8444b03a 	or	r2,r16,r17
    2f34:	1002261e 	bne	r2,zero,37d0 <___vfprintf_internal_r+0x12ec>
    2f38:	9802251e 	bne	r19,zero,37d0 <___vfprintf_internal_r+0x12ec>
    2f3c:	20803fcc 	andi	r2,r4,255
    2f40:	10029b26 	beq	r2,zero,39b0 <___vfprintf_internal_r+0x14cc>
    2f44:	d8c01904 	addi	r3,sp,100
    2f48:	dd000f04 	addi	r20,sp,60
    2f4c:	d8c14115 	stw	r3,1284(sp)
    2f50:	d8c14117 	ldw	r3,1284(sp)
    2f54:	dcc14515 	stw	r19,1300(sp)
    2f58:	a0c5c83a 	sub	r2,r20,r3
    2f5c:	11c00a04 	addi	r7,r2,40
    2f60:	99c0010e 	bge	r19,r7,2f68 <___vfprintf_internal_r+0xa84>
    2f64:	d9c14515 	stw	r7,1300(sp)
    2f68:	dcc14615 	stw	r19,1304(sp)
    2f6c:	d8800407 	ldb	r2,16(sp)
    2f70:	103e4c26 	beq	r2,zero,28a4 <___vfprintf_internal_r+0x3c0>
    2f74:	d8814517 	ldw	r2,1300(sp)
    2f78:	10800044 	addi	r2,r2,1
    2f7c:	d8814515 	stw	r2,1300(sp)
    2f80:	003e4806 	br	28a4 <___vfprintf_internal_r+0x3c0>
    2f84:	d9814c17 	ldw	r6,1328(sp)
    2f88:	31800414 	ori	r6,r6,16
    2f8c:	d9814c15 	stw	r6,1328(sp)
    2f90:	d8c14c17 	ldw	r3,1328(sp)
    2f94:	1880080c 	andi	r2,r3,32
    2f98:	1001271e 	bne	r2,zero,3438 <___vfprintf_internal_r+0xf54>
    2f9c:	d9414c17 	ldw	r5,1328(sp)
    2fa0:	2880040c 	andi	r2,r5,16
    2fa4:	1002b61e 	bne	r2,zero,3a80 <___vfprintf_internal_r+0x159c>
    2fa8:	d9814c17 	ldw	r6,1328(sp)
    2fac:	3080100c 	andi	r2,r6,64
    2fb0:	1002b326 	beq	r2,zero,3a80 <___vfprintf_internal_r+0x159c>
    2fb4:	3c00000b 	ldhu	r16,0(r7)
    2fb8:	0009883a 	mov	r4,zero
    2fbc:	39c00104 	addi	r7,r7,4
    2fc0:	0023883a 	mov	r17,zero
    2fc4:	d9c14015 	stw	r7,1280(sp)
    2fc8:	d8000405 	stb	zero,16(sp)
    2fcc:	003fd306 	br	2f1c <___vfprintf_internal_r+0xa38>
    2fd0:	d9014c17 	ldw	r4,1328(sp)
    2fd4:	21000414 	ori	r4,r4,16
    2fd8:	d9014c15 	stw	r4,1328(sp)
    2fdc:	d9414c17 	ldw	r5,1328(sp)
    2fe0:	2880080c 	andi	r2,r5,32
    2fe4:	1001081e 	bne	r2,zero,3408 <___vfprintf_internal_r+0xf24>
    2fe8:	d8c14c17 	ldw	r3,1328(sp)
    2fec:	1880040c 	andi	r2,r3,16
    2ff0:	1002b01e 	bne	r2,zero,3ab4 <___vfprintf_internal_r+0x15d0>
    2ff4:	d9014c17 	ldw	r4,1328(sp)
    2ff8:	2080100c 	andi	r2,r4,64
    2ffc:	1002ad26 	beq	r2,zero,3ab4 <___vfprintf_internal_r+0x15d0>
    3000:	3c00000b 	ldhu	r16,0(r7)
    3004:	01000044 	movi	r4,1
    3008:	39c00104 	addi	r7,r7,4
    300c:	0023883a 	mov	r17,zero
    3010:	d9c14015 	stw	r7,1280(sp)
    3014:	d8000405 	stb	zero,16(sp)
    3018:	003fc006 	br	2f1c <___vfprintf_internal_r+0xa38>
    301c:	d9014f17 	ldw	r4,1340(sp)
    3020:	b00b883a 	mov	r5,r22
    3024:	d9800c04 	addi	r6,sp,48
    3028:	000248c0 	call	248c <__sprint_r>
    302c:	103ee51e 	bne	r2,zero,2bc4 <___vfprintf_internal_r+0x6e0>
    3030:	dc800e17 	ldw	r18,56(sp)
    3034:	d8c01904 	addi	r3,sp,100
    3038:	d9814c17 	ldw	r6,1328(sp)
    303c:	3080004c 	andi	r2,r6,1
    3040:	1005003a 	cmpeq	r2,r2,zero
    3044:	103ea51e 	bne	r2,zero,2adc <___vfprintf_internal_r+0x5f8>
    3048:	00800044 	movi	r2,1
    304c:	dc400d17 	ldw	r17,52(sp)
    3050:	18800115 	stw	r2,4(r3)
    3054:	d8814917 	ldw	r2,1316(sp)
    3058:	94800044 	addi	r18,r18,1
    305c:	8c400044 	addi	r17,r17,1
    3060:	18800015 	stw	r2,0(r3)
    3064:	008001c4 	movi	r2,7
    3068:	dc800e15 	stw	r18,56(sp)
    306c:	dc400d15 	stw	r17,52(sp)
    3070:	14421e0e 	bge	r2,r17,38ec <___vfprintf_internal_r+0x1408>
    3074:	d9014f17 	ldw	r4,1340(sp)
    3078:	b00b883a 	mov	r5,r22
    307c:	d9800c04 	addi	r6,sp,48
    3080:	000248c0 	call	248c <__sprint_r>
    3084:	103ecf1e 	bne	r2,zero,2bc4 <___vfprintf_internal_r+0x6e0>
    3088:	dc800e17 	ldw	r18,56(sp)
    308c:	d8c01904 	addi	r3,sp,100
    3090:	003e9206 	br	2adc <___vfprintf_internal_r+0x5f8>
    3094:	d9014f17 	ldw	r4,1340(sp)
    3098:	b00b883a 	mov	r5,r22
    309c:	d9800c04 	addi	r6,sp,48
    30a0:	000248c0 	call	248c <__sprint_r>
    30a4:	103ec026 	beq	r2,zero,2ba8 <___vfprintf_internal_r+0x6c4>
    30a8:	003ec606 	br	2bc4 <___vfprintf_internal_r+0x6e0>
    30ac:	d9014f17 	ldw	r4,1340(sp)
    30b0:	b00b883a 	mov	r5,r22
    30b4:	d9800c04 	addi	r6,sp,48
    30b8:	d9c15115 	stw	r7,1348(sp)
    30bc:	000248c0 	call	248c <__sprint_r>
    30c0:	d9c15117 	ldw	r7,1348(sp)
    30c4:	103ebf1e 	bne	r2,zero,2bc4 <___vfprintf_internal_r+0x6e0>
    30c8:	dc800e17 	ldw	r18,56(sp)
    30cc:	dc400d17 	ldw	r17,52(sp)
    30d0:	dd401904 	addi	r21,sp,100
    30d4:	003e7406 	br	2aa8 <___vfprintf_internal_r+0x5c4>
    30d8:	d9014f17 	ldw	r4,1340(sp)
    30dc:	b00b883a 	mov	r5,r22
    30e0:	d9800c04 	addi	r6,sp,48
    30e4:	d9c15115 	stw	r7,1348(sp)
    30e8:	000248c0 	call	248c <__sprint_r>
    30ec:	d9c15117 	ldw	r7,1348(sp)
    30f0:	103eb41e 	bne	r2,zero,2bc4 <___vfprintf_internal_r+0x6e0>
    30f4:	dd401904 	addi	r21,sp,100
    30f8:	003d6d06 	br	26b0 <___vfprintf_internal_r+0x1cc>
    30fc:	d9014f17 	ldw	r4,1340(sp)
    3100:	b00b883a 	mov	r5,r22
    3104:	d9800c04 	addi	r6,sp,48
    3108:	d9c15115 	stw	r7,1348(sp)
    310c:	000248c0 	call	248c <__sprint_r>
    3110:	d9c15117 	ldw	r7,1348(sp)
    3114:	103eab1e 	bne	r2,zero,2bc4 <___vfprintf_internal_r+0x6e0>
    3118:	dc800e17 	ldw	r18,56(sp)
    311c:	dc400d17 	ldw	r17,52(sp)
    3120:	dd401904 	addi	r21,sp,100
    3124:	003e3406 	br	29f8 <___vfprintf_internal_r+0x514>
    3128:	d9014f17 	ldw	r4,1340(sp)
    312c:	b00b883a 	mov	r5,r22
    3130:	d9800c04 	addi	r6,sp,48
    3134:	d9c15115 	stw	r7,1348(sp)
    3138:	000248c0 	call	248c <__sprint_r>
    313c:	d9c15117 	ldw	r7,1348(sp)
    3140:	103ea01e 	bne	r2,zero,2bc4 <___vfprintf_internal_r+0x6e0>
    3144:	dc800e17 	ldw	r18,56(sp)
    3148:	dc400d17 	ldw	r17,52(sp)
    314c:	dd401904 	addi	r21,sp,100
    3150:	003e1c06 	br	29c4 <___vfprintf_internal_r+0x4e0>
    3154:	d9014f17 	ldw	r4,1340(sp)
    3158:	b00b883a 	mov	r5,r22
    315c:	d9800c04 	addi	r6,sp,48
    3160:	d9c15115 	stw	r7,1348(sp)
    3164:	000248c0 	call	248c <__sprint_r>
    3168:	d9c15117 	ldw	r7,1348(sp)
    316c:	103e951e 	bne	r2,zero,2bc4 <___vfprintf_internal_r+0x6e0>
    3170:	dc800e17 	ldw	r18,56(sp)
    3174:	dc400d17 	ldw	r17,52(sp)
    3178:	dd401904 	addi	r21,sp,100
    317c:	003e0406 	br	2990 <___vfprintf_internal_r+0x4ac>
    3180:	d9000517 	ldw	r4,20(sp)
    3184:	0102520e 	bge	zero,r4,3ad0 <___vfprintf_internal_r+0x15ec>
    3188:	d9814717 	ldw	r6,1308(sp)
    318c:	21807a16 	blt	r4,r6,3378 <___vfprintf_internal_r+0xe94>
    3190:	d8814117 	ldw	r2,1284(sp)
    3194:	91a5883a 	add	r18,r18,r6
    3198:	8c400044 	addi	r17,r17,1
    319c:	a8800015 	stw	r2,0(r21)
    31a0:	008001c4 	movi	r2,7
    31a4:	a9800115 	stw	r6,4(r21)
    31a8:	dc800e15 	stw	r18,56(sp)
    31ac:	dc400d15 	stw	r17,52(sp)
    31b0:	1442f616 	blt	r2,r17,3d8c <___vfprintf_internal_r+0x18a8>
    31b4:	a8c00204 	addi	r3,r21,8
    31b8:	d9414717 	ldw	r5,1308(sp)
    31bc:	2161c83a 	sub	r16,r4,r5
    31c0:	043f9d0e 	bge	zero,r16,3038 <___vfprintf_internal_r+0xb54>
    31c4:	00800404 	movi	r2,16
    31c8:	1402130e 	bge	r2,r16,3a18 <___vfprintf_internal_r+0x1534>
    31cc:	dc400d17 	ldw	r17,52(sp)
    31d0:	1027883a 	mov	r19,r2
    31d4:	07000074 	movhi	fp,1
    31d8:	e73c9484 	addi	fp,fp,-3502
    31dc:	050001c4 	movi	r20,7
    31e0:	00000306 	br	31f0 <___vfprintf_internal_r+0xd0c>
    31e4:	18c00204 	addi	r3,r3,8
    31e8:	843ffc04 	addi	r16,r16,-16
    31ec:	9c020d0e 	bge	r19,r16,3a24 <___vfprintf_internal_r+0x1540>
    31f0:	94800404 	addi	r18,r18,16
    31f4:	8c400044 	addi	r17,r17,1
    31f8:	1f000015 	stw	fp,0(r3)
    31fc:	1cc00115 	stw	r19,4(r3)
    3200:	dc800e15 	stw	r18,56(sp)
    3204:	dc400d15 	stw	r17,52(sp)
    3208:	a47ff60e 	bge	r20,r17,31e4 <___vfprintf_internal_r+0xd00>
    320c:	d9014f17 	ldw	r4,1340(sp)
    3210:	b00b883a 	mov	r5,r22
    3214:	d9800c04 	addi	r6,sp,48
    3218:	000248c0 	call	248c <__sprint_r>
    321c:	103e691e 	bne	r2,zero,2bc4 <___vfprintf_internal_r+0x6e0>
    3220:	dc800e17 	ldw	r18,56(sp)
    3224:	dc400d17 	ldw	r17,52(sp)
    3228:	d8c01904 	addi	r3,sp,100
    322c:	003fee06 	br	31e8 <___vfprintf_internal_r+0xd04>
    3230:	d8814717 	ldw	r2,1308(sp)
    3234:	143fffc4 	addi	r16,r2,-1
    3238:	043e970e 	bge	zero,r16,2c98 <___vfprintf_internal_r+0x7b4>
    323c:	00800404 	movi	r2,16
    3240:	1400180e 	bge	r2,r16,32a4 <___vfprintf_internal_r+0xdc0>
    3244:	1029883a 	mov	r20,r2
    3248:	07000074 	movhi	fp,1
    324c:	e73c9484 	addi	fp,fp,-3502
    3250:	054001c4 	movi	r21,7
    3254:	00000306 	br	3264 <___vfprintf_internal_r+0xd80>
    3258:	9cc00204 	addi	r19,r19,8
    325c:	843ffc04 	addi	r16,r16,-16
    3260:	a400120e 	bge	r20,r16,32ac <___vfprintf_internal_r+0xdc8>
    3264:	94800404 	addi	r18,r18,16
    3268:	8c400044 	addi	r17,r17,1
    326c:	9f000015 	stw	fp,0(r19)
    3270:	9d000115 	stw	r20,4(r19)
    3274:	dc800e15 	stw	r18,56(sp)
    3278:	dc400d15 	stw	r17,52(sp)
    327c:	ac7ff60e 	bge	r21,r17,3258 <___vfprintf_internal_r+0xd74>
    3280:	d9014f17 	ldw	r4,1340(sp)
    3284:	b00b883a 	mov	r5,r22
    3288:	d9800c04 	addi	r6,sp,48
    328c:	000248c0 	call	248c <__sprint_r>
    3290:	103e4c1e 	bne	r2,zero,2bc4 <___vfprintf_internal_r+0x6e0>
    3294:	dc800e17 	ldw	r18,56(sp)
    3298:	dc400d17 	ldw	r17,52(sp)
    329c:	dcc01904 	addi	r19,sp,100
    32a0:	003fee06 	br	325c <___vfprintf_internal_r+0xd78>
    32a4:	07000074 	movhi	fp,1
    32a8:	e73c9484 	addi	fp,fp,-3502
    32ac:	9425883a 	add	r18,r18,r16
    32b0:	8c400044 	addi	r17,r17,1
    32b4:	008001c4 	movi	r2,7
    32b8:	9f000015 	stw	fp,0(r19)
    32bc:	9c000115 	stw	r16,4(r19)
    32c0:	dc800e15 	stw	r18,56(sp)
    32c4:	dc400d15 	stw	r17,52(sp)
    32c8:	147e720e 	bge	r2,r17,2c94 <___vfprintf_internal_r+0x7b0>
    32cc:	d9014f17 	ldw	r4,1340(sp)
    32d0:	b00b883a 	mov	r5,r22
    32d4:	d9800c04 	addi	r6,sp,48
    32d8:	000248c0 	call	248c <__sprint_r>
    32dc:	103e391e 	bne	r2,zero,2bc4 <___vfprintf_internal_r+0x6e0>
    32e0:	dc800e17 	ldw	r18,56(sp)
    32e4:	dc400d17 	ldw	r17,52(sp)
    32e8:	dcc01904 	addi	r19,sp,100
    32ec:	003e6a06 	br	2c98 <___vfprintf_internal_r+0x7b4>
    32f0:	d9014f17 	ldw	r4,1340(sp)
    32f4:	b00b883a 	mov	r5,r22
    32f8:	d9800c04 	addi	r6,sp,48
    32fc:	d9c15115 	stw	r7,1348(sp)
    3300:	000248c0 	call	248c <__sprint_r>
    3304:	d9c15117 	ldw	r7,1348(sp)
    3308:	103e2e1e 	bne	r2,zero,2bc4 <___vfprintf_internal_r+0x6e0>
    330c:	dc800e17 	ldw	r18,56(sp)
    3310:	dc400d17 	ldw	r17,52(sp)
    3314:	dd401904 	addi	r21,sp,100
    3318:	003dba06 	br	2a04 <___vfprintf_internal_r+0x520>
    331c:	d9014f17 	ldw	r4,1340(sp)
    3320:	b00b883a 	mov	r5,r22
    3324:	d9800c04 	addi	r6,sp,48
    3328:	000248c0 	call	248c <__sprint_r>
    332c:	103e251e 	bne	r2,zero,2bc4 <___vfprintf_internal_r+0x6e0>
    3330:	dc800e17 	ldw	r18,56(sp)
    3334:	dc400d17 	ldw	r17,52(sp)
    3338:	dcc01904 	addi	r19,sp,100
    333c:	003e4206 	br	2c48 <___vfprintf_internal_r+0x764>
    3340:	d9014f17 	ldw	r4,1340(sp)
    3344:	b00b883a 	mov	r5,r22
    3348:	d9800c04 	addi	r6,sp,48
    334c:	000248c0 	call	248c <__sprint_r>
    3350:	103e1c1e 	bne	r2,zero,2bc4 <___vfprintf_internal_r+0x6e0>
    3354:	dc800e17 	ldw	r18,56(sp)
    3358:	dc400d17 	ldw	r17,52(sp)
    335c:	d8c01904 	addi	r3,sp,100
    3360:	003e2e06 	br	2c1c <___vfprintf_internal_r+0x738>
    3364:	d9414c17 	ldw	r5,1328(sp)
    3368:	2880004c 	andi	r2,r5,1
    336c:	1005003a 	cmpeq	r2,r2,zero
    3370:	103dda1e 	bne	r2,zero,2adc <___vfprintf_internal_r+0x5f8>
    3374:	003e9f06 	br	2df4 <___vfprintf_internal_r+0x910>
    3378:	d8c14117 	ldw	r3,1284(sp)
    337c:	9125883a 	add	r18,r18,r4
    3380:	8c400044 	addi	r17,r17,1
    3384:	008001c4 	movi	r2,7
    3388:	a8c00015 	stw	r3,0(r21)
    338c:	a9000115 	stw	r4,4(r21)
    3390:	dc800e15 	stw	r18,56(sp)
    3394:	dc400d15 	stw	r17,52(sp)
    3398:	14426616 	blt	r2,r17,3d34 <___vfprintf_internal_r+0x1850>
    339c:	a8c00204 	addi	r3,r21,8
    33a0:	d9414917 	ldw	r5,1316(sp)
    33a4:	00800044 	movi	r2,1
    33a8:	94800044 	addi	r18,r18,1
    33ac:	8c400044 	addi	r17,r17,1
    33b0:	18800115 	stw	r2,4(r3)
    33b4:	008001c4 	movi	r2,7
    33b8:	19400015 	stw	r5,0(r3)
    33bc:	dc800e15 	stw	r18,56(sp)
    33c0:	dc400d15 	stw	r17,52(sp)
    33c4:	2021883a 	mov	r16,r4
    33c8:	14425016 	blt	r2,r17,3d0c <___vfprintf_internal_r+0x1828>
    33cc:	19400204 	addi	r5,r3,8
    33d0:	d9814717 	ldw	r6,1308(sp)
    33d4:	8c400044 	addi	r17,r17,1
    33d8:	dc400d15 	stw	r17,52(sp)
    33dc:	3107c83a 	sub	r3,r6,r4
    33e0:	d9014117 	ldw	r4,1284(sp)
    33e4:	90e5883a 	add	r18,r18,r3
    33e8:	28c00115 	stw	r3,4(r5)
    33ec:	8105883a 	add	r2,r16,r4
    33f0:	28800015 	stw	r2,0(r5)
    33f4:	008001c4 	movi	r2,7
    33f8:	dc800e15 	stw	r18,56(sp)
    33fc:	147f1d16 	blt	r2,r17,3074 <___vfprintf_internal_r+0xb90>
    3400:	28c00204 	addi	r3,r5,8
    3404:	003db506 	br	2adc <___vfprintf_internal_r+0x5f8>
    3408:	3c000017 	ldw	r16,0(r7)
    340c:	3c400117 	ldw	r17,4(r7)
    3410:	39800204 	addi	r6,r7,8
    3414:	01000044 	movi	r4,1
    3418:	d9814015 	stw	r6,1280(sp)
    341c:	d8000405 	stb	zero,16(sp)
    3420:	003ebe06 	br	2f1c <___vfprintf_internal_r+0xa38>
    3424:	3c000017 	ldw	r16,0(r7)
    3428:	3c400117 	ldw	r17,4(r7)
    342c:	38800204 	addi	r2,r7,8
    3430:	d8814015 	stw	r2,1280(sp)
    3434:	003eb706 	br	2f14 <___vfprintf_internal_r+0xa30>
    3438:	3c000017 	ldw	r16,0(r7)
    343c:	3c400117 	ldw	r17,4(r7)
    3440:	39000204 	addi	r4,r7,8
    3444:	d9014015 	stw	r4,1280(sp)
    3448:	0009883a 	mov	r4,zero
    344c:	d8000405 	stb	zero,16(sp)
    3450:	003eb206 	br	2f1c <___vfprintf_internal_r+0xa38>
    3454:	38c00017 	ldw	r3,0(r7)
    3458:	39c00104 	addi	r7,r7,4
    345c:	d8c14a15 	stw	r3,1320(sp)
    3460:	1800d10e 	bge	r3,zero,37a8 <___vfprintf_internal_r+0x12c4>
    3464:	00c7c83a 	sub	r3,zero,r3
    3468:	d8c14a15 	stw	r3,1320(sp)
    346c:	d9014c17 	ldw	r4,1328(sp)
    3470:	b8c00007 	ldb	r3,0(r23)
    3474:	21000114 	ori	r4,r4,4
    3478:	d9014c15 	stw	r4,1328(sp)
    347c:	003c9806 	br	26e0 <___vfprintf_internal_r+0x1fc>
    3480:	d9814c17 	ldw	r6,1328(sp)
    3484:	3080080c 	andi	r2,r6,32
    3488:	1001f026 	beq	r2,zero,3c4c <___vfprintf_internal_r+0x1768>
    348c:	d9014b17 	ldw	r4,1324(sp)
    3490:	38800017 	ldw	r2,0(r7)
    3494:	39c00104 	addi	r7,r7,4
    3498:	d9c14015 	stw	r7,1280(sp)
    349c:	2007d7fa 	srai	r3,r4,31
    34a0:	d9c14017 	ldw	r7,1280(sp)
    34a4:	11000015 	stw	r4,0(r2)
    34a8:	10c00115 	stw	r3,4(r2)
    34ac:	003c6906 	br	2654 <___vfprintf_internal_r+0x170>
    34b0:	b8c00007 	ldb	r3,0(r23)
    34b4:	00801b04 	movi	r2,108
    34b8:	18824f26 	beq	r3,r2,3df8 <___vfprintf_internal_r+0x1914>
    34bc:	d9414c17 	ldw	r5,1328(sp)
    34c0:	29400414 	ori	r5,r5,16
    34c4:	d9414c15 	stw	r5,1328(sp)
    34c8:	003c8506 	br	26e0 <___vfprintf_internal_r+0x1fc>
    34cc:	d9814c17 	ldw	r6,1328(sp)
    34d0:	b8c00007 	ldb	r3,0(r23)
    34d4:	31800814 	ori	r6,r6,32
    34d8:	d9814c15 	stw	r6,1328(sp)
    34dc:	003c8006 	br	26e0 <___vfprintf_internal_r+0x1fc>
    34e0:	d8814c17 	ldw	r2,1328(sp)
    34e4:	3c000017 	ldw	r16,0(r7)
    34e8:	00c01e04 	movi	r3,120
    34ec:	10800094 	ori	r2,r2,2
    34f0:	d8814c15 	stw	r2,1328(sp)
    34f4:	39c00104 	addi	r7,r7,4
    34f8:	01400074 	movhi	r5,1
    34fc:	297c7d04 	addi	r5,r5,-3596
    3500:	00800c04 	movi	r2,48
    3504:	0023883a 	mov	r17,zero
    3508:	01000084 	movi	r4,2
    350c:	d9c14015 	stw	r7,1280(sp)
    3510:	d8c14d15 	stw	r3,1332(sp)
    3514:	d9414415 	stw	r5,1296(sp)
    3518:	d8800445 	stb	r2,17(sp)
    351c:	d8c00485 	stb	r3,18(sp)
    3520:	d8000405 	stb	zero,16(sp)
    3524:	003e7d06 	br	2f1c <___vfprintf_internal_r+0xa38>
    3528:	d8814c17 	ldw	r2,1328(sp)
    352c:	b8c00007 	ldb	r3,0(r23)
    3530:	10801014 	ori	r2,r2,64
    3534:	d8814c15 	stw	r2,1328(sp)
    3538:	003c6906 	br	26e0 <___vfprintf_internal_r+0x1fc>
    353c:	d9414c17 	ldw	r5,1328(sp)
    3540:	2880020c 	andi	r2,r5,8
    3544:	1001df26 	beq	r2,zero,3cc4 <___vfprintf_internal_r+0x17e0>
    3548:	39800017 	ldw	r6,0(r7)
    354c:	38800204 	addi	r2,r7,8
    3550:	d8814015 	stw	r2,1280(sp)
    3554:	d9814215 	stw	r6,1288(sp)
    3558:	39c00117 	ldw	r7,4(r7)
    355c:	d9c14315 	stw	r7,1292(sp)
    3560:	d9014217 	ldw	r4,1288(sp)
    3564:	d9414317 	ldw	r5,1292(sp)
    3568:	00087440 	call	8744 <__isinfd>
    356c:	10021726 	beq	r2,zero,3dcc <___vfprintf_internal_r+0x18e8>
    3570:	d9014217 	ldw	r4,1288(sp)
    3574:	d9414317 	ldw	r5,1292(sp)
    3578:	000d883a 	mov	r6,zero
    357c:	000f883a 	mov	r7,zero
    3580:	000a71c0 	call	a71c <__ltdf2>
    3584:	1002ca16 	blt	r2,zero,40b0 <___vfprintf_internal_r+0x1bcc>
    3588:	d9414d17 	ldw	r5,1332(sp)
    358c:	008011c4 	movi	r2,71
    3590:	11420a16 	blt	r2,r5,3dbc <___vfprintf_internal_r+0x18d8>
    3594:	01800074 	movhi	r6,1
    3598:	31bc8204 	addi	r6,r6,-3576
    359c:	d9814115 	stw	r6,1284(sp)
    35a0:	d9014c17 	ldw	r4,1328(sp)
    35a4:	00c000c4 	movi	r3,3
    35a8:	00bfdfc4 	movi	r2,-129
    35ac:	2088703a 	and	r4,r4,r2
    35b0:	180f883a 	mov	r7,r3
    35b4:	d8c14515 	stw	r3,1300(sp)
    35b8:	d9014c15 	stw	r4,1328(sp)
    35bc:	d8014615 	stw	zero,1304(sp)
    35c0:	003e6a06 	br	2f6c <___vfprintf_internal_r+0xa88>
    35c4:	38800017 	ldw	r2,0(r7)
    35c8:	00c00044 	movi	r3,1
    35cc:	39c00104 	addi	r7,r7,4
    35d0:	d9c14015 	stw	r7,1280(sp)
    35d4:	d9000f04 	addi	r4,sp,60
    35d8:	180f883a 	mov	r7,r3
    35dc:	d8c14515 	stw	r3,1300(sp)
    35e0:	d9014115 	stw	r4,1284(sp)
    35e4:	d8800f05 	stb	r2,60(sp)
    35e8:	d8000405 	stb	zero,16(sp)
    35ec:	003cac06 	br	28a0 <___vfprintf_internal_r+0x3bc>
    35f0:	01400074 	movhi	r5,1
    35f4:	297c8804 	addi	r5,r5,-3552
    35f8:	d9414415 	stw	r5,1296(sp)
    35fc:	d9814c17 	ldw	r6,1328(sp)
    3600:	3080080c 	andi	r2,r6,32
    3604:	1000f926 	beq	r2,zero,39ec <___vfprintf_internal_r+0x1508>
    3608:	3c000017 	ldw	r16,0(r7)
    360c:	3c400117 	ldw	r17,4(r7)
    3610:	38800204 	addi	r2,r7,8
    3614:	d8814015 	stw	r2,1280(sp)
    3618:	d9414c17 	ldw	r5,1328(sp)
    361c:	2880004c 	andi	r2,r5,1
    3620:	1005003a 	cmpeq	r2,r2,zero
    3624:	1000b31e 	bne	r2,zero,38f4 <___vfprintf_internal_r+0x1410>
    3628:	8444b03a 	or	r2,r16,r17
    362c:	1000b126 	beq	r2,zero,38f4 <___vfprintf_internal_r+0x1410>
    3630:	d9814d17 	ldw	r6,1332(sp)
    3634:	29400094 	ori	r5,r5,2
    3638:	00800c04 	movi	r2,48
    363c:	01000084 	movi	r4,2
    3640:	d9414c15 	stw	r5,1328(sp)
    3644:	d8800445 	stb	r2,17(sp)
    3648:	d9800485 	stb	r6,18(sp)
    364c:	d8000405 	stb	zero,16(sp)
    3650:	003e3206 	br	2f1c <___vfprintf_internal_r+0xa38>
    3654:	01800074 	movhi	r6,1
    3658:	31bc7d04 	addi	r6,r6,-3596
    365c:	d9814415 	stw	r6,1296(sp)
    3660:	003fe606 	br	35fc <___vfprintf_internal_r+0x1118>
    3664:	00800ac4 	movi	r2,43
    3668:	d8800405 	stb	r2,16(sp)
    366c:	b8c00007 	ldb	r3,0(r23)
    3670:	003c1b06 	br	26e0 <___vfprintf_internal_r+0x1fc>
    3674:	d8814c17 	ldw	r2,1328(sp)
    3678:	b8c00007 	ldb	r3,0(r23)
    367c:	10800054 	ori	r2,r2,1
    3680:	d8814c15 	stw	r2,1328(sp)
    3684:	003c1606 	br	26e0 <___vfprintf_internal_r+0x1fc>
    3688:	d8800407 	ldb	r2,16(sp)
    368c:	1000461e 	bne	r2,zero,37a8 <___vfprintf_internal_r+0x12c4>
    3690:	00800804 	movi	r2,32
    3694:	d8800405 	stb	r2,16(sp)
    3698:	b8c00007 	ldb	r3,0(r23)
    369c:	003c1006 	br	26e0 <___vfprintf_internal_r+0x1fc>
    36a0:	d9814c17 	ldw	r6,1328(sp)
    36a4:	b8c00007 	ldb	r3,0(r23)
    36a8:	31800214 	ori	r6,r6,8
    36ac:	d9814c15 	stw	r6,1328(sp)
    36b0:	003c0b06 	br	26e0 <___vfprintf_internal_r+0x1fc>
    36b4:	0007883a 	mov	r3,zero
    36b8:	01000244 	movi	r4,9
    36bc:	188002a4 	muli	r2,r3,10
    36c0:	b8c00007 	ldb	r3,0(r23)
    36c4:	d9814d17 	ldw	r6,1332(sp)
    36c8:	bdc00044 	addi	r23,r23,1
    36cc:	d8c14d15 	stw	r3,1332(sp)
    36d0:	d9414d17 	ldw	r5,1332(sp)
    36d4:	3085883a 	add	r2,r6,r2
    36d8:	10fff404 	addi	r3,r2,-48
    36dc:	28bff404 	addi	r2,r5,-48
    36e0:	20bff62e 	bgeu	r4,r2,36bc <___vfprintf_internal_r+0x11d8>
    36e4:	d8c14a15 	stw	r3,1320(sp)
    36e8:	003bff06 	br	26e8 <___vfprintf_internal_r+0x204>
    36ec:	d9414c17 	ldw	r5,1328(sp)
    36f0:	b8c00007 	ldb	r3,0(r23)
    36f4:	29402014 	ori	r5,r5,128
    36f8:	d9414c15 	stw	r5,1328(sp)
    36fc:	003bf806 	br	26e0 <___vfprintf_internal_r+0x1fc>
    3700:	b8c00007 	ldb	r3,0(r23)
    3704:	00800a84 	movi	r2,42
    3708:	bdc00044 	addi	r23,r23,1
    370c:	18831526 	beq	r3,r2,4364 <___vfprintf_internal_r+0x1e80>
    3710:	d8c14d15 	stw	r3,1332(sp)
    3714:	18bff404 	addi	r2,r3,-48
    3718:	00c00244 	movi	r3,9
    371c:	18827836 	bltu	r3,r2,4100 <___vfprintf_internal_r+0x1c1c>
    3720:	000d883a 	mov	r6,zero
    3724:	308002a4 	muli	r2,r6,10
    3728:	b9800007 	ldb	r6,0(r23)
    372c:	d9414d17 	ldw	r5,1332(sp)
    3730:	bdc00044 	addi	r23,r23,1
    3734:	d9814d15 	stw	r6,1332(sp)
    3738:	d9014d17 	ldw	r4,1332(sp)
    373c:	1145883a 	add	r2,r2,r5
    3740:	11bff404 	addi	r6,r2,-48
    3744:	20bff404 	addi	r2,r4,-48
    3748:	18bff62e 	bgeu	r3,r2,3724 <___vfprintf_internal_r+0x1240>
    374c:	3027883a 	mov	r19,r6
    3750:	303be50e 	bge	r6,zero,26e8 <___vfprintf_internal_r+0x204>
    3754:	04ffffc4 	movi	r19,-1
    3758:	003be306 	br	26e8 <___vfprintf_internal_r+0x204>
    375c:	d8000405 	stb	zero,16(sp)
    3760:	39800017 	ldw	r6,0(r7)
    3764:	39c00104 	addi	r7,r7,4
    3768:	d9c14015 	stw	r7,1280(sp)
    376c:	d9814115 	stw	r6,1284(sp)
    3770:	3001c926 	beq	r6,zero,3e98 <___vfprintf_internal_r+0x19b4>
    3774:	98000e16 	blt	r19,zero,37b0 <___vfprintf_internal_r+0x12cc>
    3778:	d9014117 	ldw	r4,1284(sp)
    377c:	000b883a 	mov	r5,zero
    3780:	980d883a 	mov	r6,r19
    3784:	0006e600 	call	6e60 <memchr>
    3788:	10025926 	beq	r2,zero,40f0 <___vfprintf_internal_r+0x1c0c>
    378c:	d8c14117 	ldw	r3,1284(sp)
    3790:	10cfc83a 	sub	r7,r2,r3
    3794:	99c19e16 	blt	r19,r7,3e10 <___vfprintf_internal_r+0x192c>
    3798:	d9c14515 	stw	r7,1300(sp)
    379c:	38000916 	blt	r7,zero,37c4 <___vfprintf_internal_r+0x12e0>
    37a0:	d8014615 	stw	zero,1304(sp)
    37a4:	003df106 	br	2f6c <___vfprintf_internal_r+0xa88>
    37a8:	b8c00007 	ldb	r3,0(r23)
    37ac:	003bcc06 	br	26e0 <___vfprintf_internal_r+0x1fc>
    37b0:	d9014117 	ldw	r4,1284(sp)
    37b4:	00024180 	call	2418 <strlen>
    37b8:	d8814515 	stw	r2,1300(sp)
    37bc:	100f883a 	mov	r7,r2
    37c0:	103ff70e 	bge	r2,zero,37a0 <___vfprintf_internal_r+0x12bc>
    37c4:	d8014515 	stw	zero,1300(sp)
    37c8:	d8014615 	stw	zero,1304(sp)
    37cc:	003de706 	br	2f6c <___vfprintf_internal_r+0xa88>
    37d0:	20c03fcc 	andi	r3,r4,255
    37d4:	00800044 	movi	r2,1
    37d8:	18802d26 	beq	r3,r2,3890 <___vfprintf_internal_r+0x13ac>
    37dc:	18800e36 	bltu	r3,r2,3818 <___vfprintf_internal_r+0x1334>
    37e0:	00800084 	movi	r2,2
    37e4:	1880fa26 	beq	r3,r2,3bd0 <___vfprintf_internal_r+0x16ec>
    37e8:	01000074 	movhi	r4,1
    37ec:	213c8d04 	addi	r4,r4,-3532
    37f0:	00024180 	call	2418 <strlen>
    37f4:	100f883a 	mov	r7,r2
    37f8:	dcc14515 	stw	r19,1300(sp)
    37fc:	9880010e 	bge	r19,r2,3804 <___vfprintf_internal_r+0x1320>
    3800:	d8814515 	stw	r2,1300(sp)
    3804:	00800074 	movhi	r2,1
    3808:	10bc8d04 	addi	r2,r2,-3532
    380c:	dcc14615 	stw	r19,1304(sp)
    3810:	d8814115 	stw	r2,1284(sp)
    3814:	003dd506 	br	2f6c <___vfprintf_internal_r+0xa88>
    3818:	d9401904 	addi	r5,sp,100
    381c:	dd000f04 	addi	r20,sp,60
    3820:	d9414115 	stw	r5,1284(sp)
    3824:	880a977a 	slli	r5,r17,29
    3828:	d9814117 	ldw	r6,1284(sp)
    382c:	8004d0fa 	srli	r2,r16,3
    3830:	8806d0fa 	srli	r3,r17,3
    3834:	810001cc 	andi	r4,r16,7
    3838:	2884b03a 	or	r2,r5,r2
    383c:	31bfffc4 	addi	r6,r6,-1
    3840:	21000c04 	addi	r4,r4,48
    3844:	d9814115 	stw	r6,1284(sp)
    3848:	10cab03a 	or	r5,r2,r3
    384c:	31000005 	stb	r4,0(r6)
    3850:	1021883a 	mov	r16,r2
    3854:	1823883a 	mov	r17,r3
    3858:	283ff21e 	bne	r5,zero,3824 <___vfprintf_internal_r+0x1340>
    385c:	d8c14c17 	ldw	r3,1328(sp)
    3860:	1880004c 	andi	r2,r3,1
    3864:	1005003a 	cmpeq	r2,r2,zero
    3868:	103db91e 	bne	r2,zero,2f50 <___vfprintf_internal_r+0xa6c>
    386c:	20803fcc 	andi	r2,r4,255
    3870:	1080201c 	xori	r2,r2,128
    3874:	10bfe004 	addi	r2,r2,-128
    3878:	00c00c04 	movi	r3,48
    387c:	10fdb426 	beq	r2,r3,2f50 <___vfprintf_internal_r+0xa6c>
    3880:	31bfffc4 	addi	r6,r6,-1
    3884:	d9814115 	stw	r6,1284(sp)
    3888:	30c00005 	stb	r3,0(r6)
    388c:	003db006 	br	2f50 <___vfprintf_internal_r+0xa6c>
    3890:	88800068 	cmpgeui	r2,r17,1
    3894:	10002c1e 	bne	r2,zero,3948 <___vfprintf_internal_r+0x1464>
    3898:	8800021e 	bne	r17,zero,38a4 <___vfprintf_internal_r+0x13c0>
    389c:	00800244 	movi	r2,9
    38a0:	14002936 	bltu	r2,r16,3948 <___vfprintf_internal_r+0x1464>
    38a4:	d90018c4 	addi	r4,sp,99
    38a8:	dd000f04 	addi	r20,sp,60
    38ac:	d9014115 	stw	r4,1284(sp)
    38b0:	d9014117 	ldw	r4,1284(sp)
    38b4:	80800c04 	addi	r2,r16,48
    38b8:	20800005 	stb	r2,0(r4)
    38bc:	003da406 	br	2f50 <___vfprintf_internal_r+0xa6c>
    38c0:	dc400d17 	ldw	r17,52(sp)
    38c4:	07000074 	movhi	fp,1
    38c8:	e73c9484 	addi	fp,fp,-3502
    38cc:	9425883a 	add	r18,r18,r16
    38d0:	8c400044 	addi	r17,r17,1
    38d4:	008001c4 	movi	r2,7
    38d8:	1f000015 	stw	fp,0(r3)
    38dc:	1c000115 	stw	r16,4(r3)
    38e0:	dc800e15 	stw	r18,56(sp)
    38e4:	dc400d15 	stw	r17,52(sp)
    38e8:	147de216 	blt	r2,r17,3074 <___vfprintf_internal_r+0xb90>
    38ec:	18c00204 	addi	r3,r3,8
    38f0:	003c7a06 	br	2adc <___vfprintf_internal_r+0x5f8>
    38f4:	01000084 	movi	r4,2
    38f8:	d8000405 	stb	zero,16(sp)
    38fc:	003d8706 	br	2f1c <___vfprintf_internal_r+0xa38>
    3900:	d9814c17 	ldw	r6,1328(sp)
    3904:	30c4703a 	and	r2,r6,r3
    3908:	1005003a 	cmpeq	r2,r2,zero
    390c:	103cb926 	beq	r2,zero,2bf4 <___vfprintf_internal_r+0x710>
    3910:	d9014117 	ldw	r4,1284(sp)
    3914:	94800044 	addi	r18,r18,1
    3918:	8c400044 	addi	r17,r17,1
    391c:	008001c4 	movi	r2,7
    3920:	a9000015 	stw	r4,0(r21)
    3924:	a8c00115 	stw	r3,4(r21)
    3928:	dc800e15 	stw	r18,56(sp)
    392c:	dc400d15 	stw	r17,52(sp)
    3930:	147e6616 	blt	r2,r17,32cc <___vfprintf_internal_r+0xde8>
    3934:	acc00204 	addi	r19,r21,8
    3938:	003cd706 	br	2c98 <___vfprintf_internal_r+0x7b4>
    393c:	07000074 	movhi	fp,1
    3940:	e73c9484 	addi	fp,fp,-3502
    3944:	003c4f06 	br	2a84 <___vfprintf_internal_r+0x5a0>
    3948:	dd000f04 	addi	r20,sp,60
    394c:	dc801904 	addi	r18,sp,100
    3950:	8009883a 	mov	r4,r16
    3954:	880b883a 	mov	r5,r17
    3958:	01800284 	movi	r6,10
    395c:	000f883a 	mov	r7,zero
    3960:	000942c0 	call	942c <__umoddi3>
    3964:	12000c04 	addi	r8,r2,48
    3968:	94bfffc4 	addi	r18,r18,-1
    396c:	8009883a 	mov	r4,r16
    3970:	880b883a 	mov	r5,r17
    3974:	01800284 	movi	r6,10
    3978:	000f883a 	mov	r7,zero
    397c:	92000005 	stb	r8,0(r18)
    3980:	0008e500 	call	8e50 <__udivdi3>
    3984:	1009883a 	mov	r4,r2
    3988:	1021883a 	mov	r16,r2
    398c:	18800068 	cmpgeui	r2,r3,1
    3990:	1823883a 	mov	r17,r3
    3994:	103fee1e 	bne	r2,zero,3950 <___vfprintf_internal_r+0x146c>
    3998:	1800021e 	bne	r3,zero,39a4 <___vfprintf_internal_r+0x14c0>
    399c:	00800244 	movi	r2,9
    39a0:	113feb36 	bltu	r2,r4,3950 <___vfprintf_internal_r+0x146c>
    39a4:	94bfffc4 	addi	r18,r18,-1
    39a8:	dc814115 	stw	r18,1284(sp)
    39ac:	003fc006 	br	38b0 <___vfprintf_internal_r+0x13cc>
    39b0:	d9014c17 	ldw	r4,1328(sp)
    39b4:	2080004c 	andi	r2,r4,1
    39b8:	10009a1e 	bne	r2,zero,3c24 <___vfprintf_internal_r+0x1740>
    39bc:	d9401904 	addi	r5,sp,100
    39c0:	dd000f04 	addi	r20,sp,60
    39c4:	d9414115 	stw	r5,1284(sp)
    39c8:	003d6106 	br	2f50 <___vfprintf_internal_r+0xa6c>
    39cc:	d9014f17 	ldw	r4,1340(sp)
    39d0:	b00b883a 	mov	r5,r22
    39d4:	d9800c04 	addi	r6,sp,48
    39d8:	000248c0 	call	248c <__sprint_r>
    39dc:	103c791e 	bne	r2,zero,2bc4 <___vfprintf_internal_r+0x6e0>
    39e0:	dc800e17 	ldw	r18,56(sp)
    39e4:	d8c01904 	addi	r3,sp,100
    39e8:	003cff06 	br	2de8 <___vfprintf_internal_r+0x904>
    39ec:	d8c14c17 	ldw	r3,1328(sp)
    39f0:	1880040c 	andi	r2,r3,16
    39f4:	1000711e 	bne	r2,zero,3bbc <___vfprintf_internal_r+0x16d8>
    39f8:	d9014c17 	ldw	r4,1328(sp)
    39fc:	2080100c 	andi	r2,r4,64
    3a00:	10006e26 	beq	r2,zero,3bbc <___vfprintf_internal_r+0x16d8>
    3a04:	3c00000b 	ldhu	r16,0(r7)
    3a08:	0023883a 	mov	r17,zero
    3a0c:	39c00104 	addi	r7,r7,4
    3a10:	d9c14015 	stw	r7,1280(sp)
    3a14:	003f0006 	br	3618 <___vfprintf_internal_r+0x1134>
    3a18:	dc400d17 	ldw	r17,52(sp)
    3a1c:	07000074 	movhi	fp,1
    3a20:	e73c9484 	addi	fp,fp,-3502
    3a24:	9425883a 	add	r18,r18,r16
    3a28:	8c400044 	addi	r17,r17,1
    3a2c:	008001c4 	movi	r2,7
    3a30:	1f000015 	stw	fp,0(r3)
    3a34:	1c000115 	stw	r16,4(r3)
    3a38:	dc800e15 	stw	r18,56(sp)
    3a3c:	dc400d15 	stw	r17,52(sp)
    3a40:	147d7616 	blt	r2,r17,301c <___vfprintf_internal_r+0xb38>
    3a44:	18c00204 	addi	r3,r3,8
    3a48:	003d7b06 	br	3038 <___vfprintf_internal_r+0xb54>
    3a4c:	dc800e17 	ldw	r18,56(sp)
    3a50:	dc400d17 	ldw	r17,52(sp)
    3a54:	07000074 	movhi	fp,1
    3a58:	e73c9884 	addi	fp,fp,-3486
    3a5c:	003bc006 	br	2960 <___vfprintf_internal_r+0x47c>
    3a60:	d9014f17 	ldw	r4,1340(sp)
    3a64:	b00b883a 	mov	r5,r22
    3a68:	d9800c04 	addi	r6,sp,48
    3a6c:	000248c0 	call	248c <__sprint_r>
    3a70:	103c541e 	bne	r2,zero,2bc4 <___vfprintf_internal_r+0x6e0>
    3a74:	dc800e17 	ldw	r18,56(sp)
    3a78:	d8c01904 	addi	r3,sp,100
    3a7c:	003ce906 	br	2e24 <___vfprintf_internal_r+0x940>
    3a80:	3c000017 	ldw	r16,0(r7)
    3a84:	0009883a 	mov	r4,zero
    3a88:	39c00104 	addi	r7,r7,4
    3a8c:	0023883a 	mov	r17,zero
    3a90:	d9c14015 	stw	r7,1280(sp)
    3a94:	d8000405 	stb	zero,16(sp)
    3a98:	003d2006 	br	2f1c <___vfprintf_internal_r+0xa38>
    3a9c:	38800017 	ldw	r2,0(r7)
    3aa0:	39c00104 	addi	r7,r7,4
    3aa4:	d9c14015 	stw	r7,1280(sp)
    3aa8:	1023d7fa 	srai	r17,r2,31
    3aac:	1021883a 	mov	r16,r2
    3ab0:	003d1806 	br	2f14 <___vfprintf_internal_r+0xa30>
    3ab4:	3c000017 	ldw	r16,0(r7)
    3ab8:	01000044 	movi	r4,1
    3abc:	39c00104 	addi	r7,r7,4
    3ac0:	0023883a 	mov	r17,zero
    3ac4:	d9c14015 	stw	r7,1280(sp)
    3ac8:	d8000405 	stb	zero,16(sp)
    3acc:	003d1306 	br	2f1c <___vfprintf_internal_r+0xa38>
    3ad0:	00800074 	movhi	r2,1
    3ad4:	10bc9404 	addi	r2,r2,-3504
    3ad8:	94800044 	addi	r18,r18,1
    3adc:	8c400044 	addi	r17,r17,1
    3ae0:	a8800015 	stw	r2,0(r21)
    3ae4:	00c00044 	movi	r3,1
    3ae8:	008001c4 	movi	r2,7
    3aec:	a8c00115 	stw	r3,4(r21)
    3af0:	dc800e15 	stw	r18,56(sp)
    3af4:	dc400d15 	stw	r17,52(sp)
    3af8:	1440ca16 	blt	r2,r17,3e24 <___vfprintf_internal_r+0x1940>
    3afc:	a8c00204 	addi	r3,r21,8
    3b00:	2000061e 	bne	r4,zero,3b1c <___vfprintf_internal_r+0x1638>
    3b04:	d9414717 	ldw	r5,1308(sp)
    3b08:	2800041e 	bne	r5,zero,3b1c <___vfprintf_internal_r+0x1638>
    3b0c:	d9814c17 	ldw	r6,1328(sp)
    3b10:	3080004c 	andi	r2,r6,1
    3b14:	1005003a 	cmpeq	r2,r2,zero
    3b18:	103bf01e 	bne	r2,zero,2adc <___vfprintf_internal_r+0x5f8>
    3b1c:	00800044 	movi	r2,1
    3b20:	dc400d17 	ldw	r17,52(sp)
    3b24:	18800115 	stw	r2,4(r3)
    3b28:	d8814917 	ldw	r2,1316(sp)
    3b2c:	94800044 	addi	r18,r18,1
    3b30:	8c400044 	addi	r17,r17,1
    3b34:	18800015 	stw	r2,0(r3)
    3b38:	008001c4 	movi	r2,7
    3b3c:	dc800e15 	stw	r18,56(sp)
    3b40:	dc400d15 	stw	r17,52(sp)
    3b44:	1440ca16 	blt	r2,r17,3e70 <___vfprintf_internal_r+0x198c>
    3b48:	18c00204 	addi	r3,r3,8
    3b4c:	0121c83a 	sub	r16,zero,r4
    3b50:	0400500e 	bge	zero,r16,3c94 <___vfprintf_internal_r+0x17b0>
    3b54:	00800404 	movi	r2,16
    3b58:	1400800e 	bge	r2,r16,3d5c <___vfprintf_internal_r+0x1878>
    3b5c:	1027883a 	mov	r19,r2
    3b60:	07000074 	movhi	fp,1
    3b64:	e73c9484 	addi	fp,fp,-3502
    3b68:	050001c4 	movi	r20,7
    3b6c:	00000306 	br	3b7c <___vfprintf_internal_r+0x1698>
    3b70:	18c00204 	addi	r3,r3,8
    3b74:	843ffc04 	addi	r16,r16,-16
    3b78:	9c007a0e 	bge	r19,r16,3d64 <___vfprintf_internal_r+0x1880>
    3b7c:	94800404 	addi	r18,r18,16
    3b80:	8c400044 	addi	r17,r17,1
    3b84:	1f000015 	stw	fp,0(r3)
    3b88:	1cc00115 	stw	r19,4(r3)
    3b8c:	dc800e15 	stw	r18,56(sp)
    3b90:	dc400d15 	stw	r17,52(sp)
    3b94:	a47ff60e 	bge	r20,r17,3b70 <___vfprintf_internal_r+0x168c>
    3b98:	d9014f17 	ldw	r4,1340(sp)
    3b9c:	b00b883a 	mov	r5,r22
    3ba0:	d9800c04 	addi	r6,sp,48
    3ba4:	000248c0 	call	248c <__sprint_r>
    3ba8:	103c061e 	bne	r2,zero,2bc4 <___vfprintf_internal_r+0x6e0>
    3bac:	dc800e17 	ldw	r18,56(sp)
    3bb0:	dc400d17 	ldw	r17,52(sp)
    3bb4:	d8c01904 	addi	r3,sp,100
    3bb8:	003fee06 	br	3b74 <___vfprintf_internal_r+0x1690>
    3bbc:	3c000017 	ldw	r16,0(r7)
    3bc0:	0023883a 	mov	r17,zero
    3bc4:	39c00104 	addi	r7,r7,4
    3bc8:	d9c14015 	stw	r7,1280(sp)
    3bcc:	003e9206 	br	3618 <___vfprintf_internal_r+0x1134>
    3bd0:	d9401904 	addi	r5,sp,100
    3bd4:	dd000f04 	addi	r20,sp,60
    3bd8:	d9414115 	stw	r5,1284(sp)
    3bdc:	d9814417 	ldw	r6,1296(sp)
    3be0:	880a973a 	slli	r5,r17,28
    3be4:	8004d13a 	srli	r2,r16,4
    3be8:	810003cc 	andi	r4,r16,15
    3bec:	3109883a 	add	r4,r6,r4
    3bf0:	2884b03a 	or	r2,r5,r2
    3bf4:	21400003 	ldbu	r5,0(r4)
    3bf8:	d9014117 	ldw	r4,1284(sp)
    3bfc:	8806d13a 	srli	r3,r17,4
    3c00:	1021883a 	mov	r16,r2
    3c04:	213fffc4 	addi	r4,r4,-1
    3c08:	d9014115 	stw	r4,1284(sp)
    3c0c:	d9814117 	ldw	r6,1284(sp)
    3c10:	10c8b03a 	or	r4,r2,r3
    3c14:	1823883a 	mov	r17,r3
    3c18:	31400005 	stb	r5,0(r6)
    3c1c:	203fef1e 	bne	r4,zero,3bdc <___vfprintf_internal_r+0x16f8>
    3c20:	003ccb06 	br	2f50 <___vfprintf_internal_r+0xa6c>
    3c24:	00800c04 	movi	r2,48
    3c28:	d98018c4 	addi	r6,sp,99
    3c2c:	dd000f04 	addi	r20,sp,60
    3c30:	d88018c5 	stb	r2,99(sp)
    3c34:	d9814115 	stw	r6,1284(sp)
    3c38:	003cc506 	br	2f50 <___vfprintf_internal_r+0xa6c>
    3c3c:	dc400d17 	ldw	r17,52(sp)
    3c40:	07000074 	movhi	fp,1
    3c44:	e73c9884 	addi	fp,fp,-3486
    3c48:	003bc706 	br	2b68 <___vfprintf_internal_r+0x684>
    3c4c:	d9414c17 	ldw	r5,1328(sp)
    3c50:	2880040c 	andi	r2,r5,16
    3c54:	10007c26 	beq	r2,zero,3e48 <___vfprintf_internal_r+0x1964>
    3c58:	38800017 	ldw	r2,0(r7)
    3c5c:	39c00104 	addi	r7,r7,4
    3c60:	d9c14015 	stw	r7,1280(sp)
    3c64:	d9814b17 	ldw	r6,1324(sp)
    3c68:	d9c14017 	ldw	r7,1280(sp)
    3c6c:	11800015 	stw	r6,0(r2)
    3c70:	003a7806 	br	2654 <___vfprintf_internal_r+0x170>
    3c74:	d9014f17 	ldw	r4,1340(sp)
    3c78:	b00b883a 	mov	r5,r22
    3c7c:	d9800c04 	addi	r6,sp,48
    3c80:	000248c0 	call	248c <__sprint_r>
    3c84:	103bcf1e 	bne	r2,zero,2bc4 <___vfprintf_internal_r+0x6e0>
    3c88:	dc800e17 	ldw	r18,56(sp)
    3c8c:	dc400d17 	ldw	r17,52(sp)
    3c90:	d8c01904 	addi	r3,sp,100
    3c94:	d9014717 	ldw	r4,1308(sp)
    3c98:	d9414117 	ldw	r5,1284(sp)
    3c9c:	8c400044 	addi	r17,r17,1
    3ca0:	9125883a 	add	r18,r18,r4
    3ca4:	008001c4 	movi	r2,7
    3ca8:	19400015 	stw	r5,0(r3)
    3cac:	19000115 	stw	r4,4(r3)
    3cb0:	dc800e15 	stw	r18,56(sp)
    3cb4:	dc400d15 	stw	r17,52(sp)
    3cb8:	147cee16 	blt	r2,r17,3074 <___vfprintf_internal_r+0xb90>
    3cbc:	18c00204 	addi	r3,r3,8
    3cc0:	003b8606 	br	2adc <___vfprintf_internal_r+0x5f8>
    3cc4:	38c00017 	ldw	r3,0(r7)
    3cc8:	39000204 	addi	r4,r7,8
    3ccc:	d9014015 	stw	r4,1280(sp)
    3cd0:	d8c14215 	stw	r3,1288(sp)
    3cd4:	39c00117 	ldw	r7,4(r7)
    3cd8:	d9c14315 	stw	r7,1292(sp)
    3cdc:	003e2006 	br	3560 <___vfprintf_internal_r+0x107c>
    3ce0:	0005883a 	mov	r2,zero
    3ce4:	1409c83a 	sub	r4,r2,r16
    3ce8:	1105803a 	cmpltu	r2,r2,r4
    3cec:	044bc83a 	sub	r5,zero,r17
    3cf0:	2885c83a 	sub	r2,r5,r2
    3cf4:	2021883a 	mov	r16,r4
    3cf8:	1023883a 	mov	r17,r2
    3cfc:	01000044 	movi	r4,1
    3d00:	00800b44 	movi	r2,45
    3d04:	d8800405 	stb	r2,16(sp)
    3d08:	003c8406 	br	2f1c <___vfprintf_internal_r+0xa38>
    3d0c:	d9014f17 	ldw	r4,1340(sp)
    3d10:	b00b883a 	mov	r5,r22
    3d14:	d9800c04 	addi	r6,sp,48
    3d18:	000248c0 	call	248c <__sprint_r>
    3d1c:	103ba91e 	bne	r2,zero,2bc4 <___vfprintf_internal_r+0x6e0>
    3d20:	dc800e17 	ldw	r18,56(sp)
    3d24:	dc400d17 	ldw	r17,52(sp)
    3d28:	d9000517 	ldw	r4,20(sp)
    3d2c:	d9401904 	addi	r5,sp,100
    3d30:	003da706 	br	33d0 <___vfprintf_internal_r+0xeec>
    3d34:	d9014f17 	ldw	r4,1340(sp)
    3d38:	b00b883a 	mov	r5,r22
    3d3c:	d9800c04 	addi	r6,sp,48
    3d40:	000248c0 	call	248c <__sprint_r>
    3d44:	103b9f1e 	bne	r2,zero,2bc4 <___vfprintf_internal_r+0x6e0>
    3d48:	dc800e17 	ldw	r18,56(sp)
    3d4c:	dc400d17 	ldw	r17,52(sp)
    3d50:	d9000517 	ldw	r4,20(sp)
    3d54:	d8c01904 	addi	r3,sp,100
    3d58:	003d9106 	br	33a0 <___vfprintf_internal_r+0xebc>
    3d5c:	07000074 	movhi	fp,1
    3d60:	e73c9484 	addi	fp,fp,-3502
    3d64:	9425883a 	add	r18,r18,r16
    3d68:	8c400044 	addi	r17,r17,1
    3d6c:	008001c4 	movi	r2,7
    3d70:	1f000015 	stw	fp,0(r3)
    3d74:	1c000115 	stw	r16,4(r3)
    3d78:	dc800e15 	stw	r18,56(sp)
    3d7c:	dc400d15 	stw	r17,52(sp)
    3d80:	147fbc16 	blt	r2,r17,3c74 <___vfprintf_internal_r+0x1790>
    3d84:	18c00204 	addi	r3,r3,8
    3d88:	003fc206 	br	3c94 <___vfprintf_internal_r+0x17b0>
    3d8c:	d9014f17 	ldw	r4,1340(sp)
    3d90:	b00b883a 	mov	r5,r22
    3d94:	d9800c04 	addi	r6,sp,48
    3d98:	000248c0 	call	248c <__sprint_r>
    3d9c:	103b891e 	bne	r2,zero,2bc4 <___vfprintf_internal_r+0x6e0>
    3da0:	dc800e17 	ldw	r18,56(sp)
    3da4:	d9000517 	ldw	r4,20(sp)
    3da8:	d8c01904 	addi	r3,sp,100
    3dac:	003d0206 	br	31b8 <___vfprintf_internal_r+0xcd4>
    3db0:	07000074 	movhi	fp,1
    3db4:	e73c9484 	addi	fp,fp,-3502
    3db8:	003be406 	br	2d4c <___vfprintf_internal_r+0x868>
    3dbc:	00800074 	movhi	r2,1
    3dc0:	10bc8304 	addi	r2,r2,-3572
    3dc4:	d8814115 	stw	r2,1284(sp)
    3dc8:	003df506 	br	35a0 <___vfprintf_internal_r+0x10bc>
    3dcc:	d9014217 	ldw	r4,1288(sp)
    3dd0:	d9414317 	ldw	r5,1292(sp)
    3dd4:	00087840 	call	8784 <__isnand>
    3dd8:	10003926 	beq	r2,zero,3ec0 <___vfprintf_internal_r+0x19dc>
    3ddc:	d9414d17 	ldw	r5,1332(sp)
    3de0:	008011c4 	movi	r2,71
    3de4:	1140ce16 	blt	r2,r5,4120 <___vfprintf_internal_r+0x1c3c>
    3de8:	01800074 	movhi	r6,1
    3dec:	31bc8404 	addi	r6,r6,-3568
    3df0:	d9814115 	stw	r6,1284(sp)
    3df4:	003dea06 	br	35a0 <___vfprintf_internal_r+0x10bc>
    3df8:	d9014c17 	ldw	r4,1328(sp)
    3dfc:	bdc00044 	addi	r23,r23,1
    3e00:	b8c00007 	ldb	r3,0(r23)
    3e04:	21000814 	ori	r4,r4,32
    3e08:	d9014c15 	stw	r4,1328(sp)
    3e0c:	003a3406 	br	26e0 <___vfprintf_internal_r+0x1fc>
    3e10:	dcc14515 	stw	r19,1300(sp)
    3e14:	98011016 	blt	r19,zero,4258 <___vfprintf_internal_r+0x1d74>
    3e18:	980f883a 	mov	r7,r19
    3e1c:	d8014615 	stw	zero,1304(sp)
    3e20:	003c5206 	br	2f6c <___vfprintf_internal_r+0xa88>
    3e24:	d9014f17 	ldw	r4,1340(sp)
    3e28:	b00b883a 	mov	r5,r22
    3e2c:	d9800c04 	addi	r6,sp,48
    3e30:	000248c0 	call	248c <__sprint_r>
    3e34:	103b631e 	bne	r2,zero,2bc4 <___vfprintf_internal_r+0x6e0>
    3e38:	dc800e17 	ldw	r18,56(sp)
    3e3c:	d9000517 	ldw	r4,20(sp)
    3e40:	d8c01904 	addi	r3,sp,100
    3e44:	003f2e06 	br	3b00 <___vfprintf_internal_r+0x161c>
    3e48:	d8c14c17 	ldw	r3,1328(sp)
    3e4c:	1880100c 	andi	r2,r3,64
    3e50:	1000a026 	beq	r2,zero,40d4 <___vfprintf_internal_r+0x1bf0>
    3e54:	38800017 	ldw	r2,0(r7)
    3e58:	39c00104 	addi	r7,r7,4
    3e5c:	d9c14015 	stw	r7,1280(sp)
    3e60:	d9014b17 	ldw	r4,1324(sp)
    3e64:	d9c14017 	ldw	r7,1280(sp)
    3e68:	1100000d 	sth	r4,0(r2)
    3e6c:	0039f906 	br	2654 <___vfprintf_internal_r+0x170>
    3e70:	d9014f17 	ldw	r4,1340(sp)
    3e74:	b00b883a 	mov	r5,r22
    3e78:	d9800c04 	addi	r6,sp,48
    3e7c:	000248c0 	call	248c <__sprint_r>
    3e80:	103b501e 	bne	r2,zero,2bc4 <___vfprintf_internal_r+0x6e0>
    3e84:	dc800e17 	ldw	r18,56(sp)
    3e88:	dc400d17 	ldw	r17,52(sp)
    3e8c:	d9000517 	ldw	r4,20(sp)
    3e90:	d8c01904 	addi	r3,sp,100
    3e94:	003f2d06 	br	3b4c <___vfprintf_internal_r+0x1668>
    3e98:	00800184 	movi	r2,6
    3e9c:	14c09a36 	bltu	r2,r19,4108 <___vfprintf_internal_r+0x1c24>
    3ea0:	dcc14515 	stw	r19,1300(sp)
    3ea4:	9800010e 	bge	r19,zero,3eac <___vfprintf_internal_r+0x19c8>
    3ea8:	d8014515 	stw	zero,1300(sp)
    3eac:	00800074 	movhi	r2,1
    3eb0:	10bc8604 	addi	r2,r2,-3560
    3eb4:	980f883a 	mov	r7,r19
    3eb8:	d8814115 	stw	r2,1284(sp)
    3ebc:	003a7806 	br	28a0 <___vfprintf_internal_r+0x3bc>
    3ec0:	00bfffc4 	movi	r2,-1
    3ec4:	9880e226 	beq	r19,r2,4250 <___vfprintf_internal_r+0x1d6c>
    3ec8:	d9414d17 	ldw	r5,1332(sp)
    3ecc:	008019c4 	movi	r2,103
    3ed0:	2880dc26 	beq	r5,r2,4244 <___vfprintf_internal_r+0x1d60>
    3ed4:	008011c4 	movi	r2,71
    3ed8:	2880da26 	beq	r5,r2,4244 <___vfprintf_internal_r+0x1d60>
    3edc:	d9414c17 	ldw	r5,1328(sp)
    3ee0:	d9014317 	ldw	r4,1292(sp)
    3ee4:	d9814217 	ldw	r6,1288(sp)
    3ee8:	29404014 	ori	r5,r5,256
    3eec:	d9414c15 	stw	r5,1328(sp)
    3ef0:	2000cc16 	blt	r4,zero,4224 <___vfprintf_internal_r+0x1d40>
    3ef4:	3021883a 	mov	r16,r6
    3ef8:	2023883a 	mov	r17,r4
    3efc:	0039883a 	mov	fp,zero
    3f00:	d9414d17 	ldw	r5,1332(sp)
    3f04:	00801984 	movi	r2,102
    3f08:	2880b726 	beq	r5,r2,41e8 <___vfprintf_internal_r+0x1d04>
    3f0c:	00801184 	movi	r2,70
    3f10:	2880b526 	beq	r5,r2,41e8 <___vfprintf_internal_r+0x1d04>
    3f14:	00801944 	movi	r2,101
    3f18:	2880c826 	beq	r5,r2,423c <___vfprintf_internal_r+0x1d58>
    3f1c:	00801144 	movi	r2,69
    3f20:	2880c626 	beq	r5,r2,423c <___vfprintf_internal_r+0x1d58>
    3f24:	9829883a 	mov	r20,r19
    3f28:	d9014f17 	ldw	r4,1340(sp)
    3f2c:	d8800504 	addi	r2,sp,20
    3f30:	880d883a 	mov	r6,r17
    3f34:	d8800115 	stw	r2,4(sp)
    3f38:	d8c00604 	addi	r3,sp,24
    3f3c:	d8800704 	addi	r2,sp,28
    3f40:	800b883a 	mov	r5,r16
    3f44:	01c00084 	movi	r7,2
    3f48:	d8c00215 	stw	r3,8(sp)
    3f4c:	d8800315 	stw	r2,12(sp)
    3f50:	dd000015 	stw	r20,0(sp)
    3f54:	00047080 	call	4708 <_dtoa_r>
    3f58:	d9814d17 	ldw	r6,1332(sp)
    3f5c:	d8814115 	stw	r2,1284(sp)
    3f60:	008019c4 	movi	r2,103
    3f64:	30809526 	beq	r6,r2,41bc <___vfprintf_internal_r+0x1cd8>
    3f68:	d8c14d17 	ldw	r3,1332(sp)
    3f6c:	008011c4 	movi	r2,71
    3f70:	18809226 	beq	r3,r2,41bc <___vfprintf_internal_r+0x1cd8>
    3f74:	d9414117 	ldw	r5,1284(sp)
    3f78:	d9814d17 	ldw	r6,1332(sp)
    3f7c:	00801984 	movi	r2,102
    3f80:	2d25883a 	add	r18,r5,r20
    3f84:	30808626 	beq	r6,r2,41a0 <___vfprintf_internal_r+0x1cbc>
    3f88:	00801184 	movi	r2,70
    3f8c:	30808426 	beq	r6,r2,41a0 <___vfprintf_internal_r+0x1cbc>
    3f90:	000d883a 	mov	r6,zero
    3f94:	000f883a 	mov	r7,zero
    3f98:	880b883a 	mov	r5,r17
    3f9c:	8009883a 	mov	r4,r16
    3fa0:	000a4fc0 	call	a4fc <__eqdf2>
    3fa4:	1000751e 	bne	r2,zero,417c <___vfprintf_internal_r+0x1c98>
    3fa8:	9005883a 	mov	r2,r18
    3fac:	dc800715 	stw	r18,28(sp)
    3fb0:	d9014117 	ldw	r4,1284(sp)
    3fb4:	d9414d17 	ldw	r5,1332(sp)
    3fb8:	00c019c4 	movi	r3,103
    3fbc:	1125c83a 	sub	r18,r2,r4
    3fc0:	28c06826 	beq	r5,r3,4164 <___vfprintf_internal_r+0x1c80>
    3fc4:	008011c4 	movi	r2,71
    3fc8:	28806626 	beq	r5,r2,4164 <___vfprintf_internal_r+0x1c80>
    3fcc:	d9000517 	ldw	r4,20(sp)
    3fd0:	d8c14d17 	ldw	r3,1332(sp)
    3fd4:	00801944 	movi	r2,101
    3fd8:	10c05516 	blt	r2,r3,4130 <___vfprintf_internal_r+0x1c4c>
    3fdc:	213fffc4 	addi	r4,r4,-1
    3fe0:	d9000515 	stw	r4,20(sp)
    3fe4:	d8c00805 	stb	r3,32(sp)
    3fe8:	2021883a 	mov	r16,r4
    3fec:	2000c116 	blt	r4,zero,42f4 <___vfprintf_internal_r+0x1e10>
    3ff0:	00800ac4 	movi	r2,43
    3ff4:	d8800845 	stb	r2,33(sp)
    3ff8:	00800244 	movi	r2,9
    3ffc:	1400af0e 	bge	r2,r16,42bc <___vfprintf_internal_r+0x1dd8>
    4000:	1027883a 	mov	r19,r2
    4004:	dc400b84 	addi	r17,sp,46
    4008:	8009883a 	mov	r4,r16
    400c:	01400284 	movi	r5,10
    4010:	0001aa40 	call	1aa4 <__modsi3>
    4014:	10800c04 	addi	r2,r2,48
    4018:	8c7fffc4 	addi	r17,r17,-1
    401c:	8009883a 	mov	r4,r16
    4020:	01400284 	movi	r5,10
    4024:	88800005 	stb	r2,0(r17)
    4028:	0001a440 	call	1a44 <__divsi3>
    402c:	1021883a 	mov	r16,r2
    4030:	98bff516 	blt	r19,r2,4008 <___vfprintf_internal_r+0x1b24>
    4034:	10c00c04 	addi	r3,r2,48
    4038:	d88009c4 	addi	r2,sp,39
    403c:	108001c4 	addi	r2,r2,7
    4040:	897fffc4 	addi	r5,r17,-1
    4044:	88ffffc5 	stb	r3,-1(r17)
    4048:	2880a72e 	bgeu	r5,r2,42e8 <___vfprintf_internal_r+0x1e04>
    404c:	1009883a 	mov	r4,r2
    4050:	d9800804 	addi	r6,sp,32
    4054:	d8c00884 	addi	r3,sp,34
    4058:	28800003 	ldbu	r2,0(r5)
    405c:	29400044 	addi	r5,r5,1
    4060:	18800005 	stb	r2,0(r3)
    4064:	18c00044 	addi	r3,r3,1
    4068:	293ffb36 	bltu	r5,r4,4058 <___vfprintf_internal_r+0x1b74>
    406c:	1987c83a 	sub	r3,r3,r6
    4070:	00800044 	movi	r2,1
    4074:	d8c14815 	stw	r3,1312(sp)
    4078:	90cf883a 	add	r7,r18,r3
    407c:	1480960e 	bge	r2,r18,42d8 <___vfprintf_internal_r+0x1df4>
    4080:	39c00044 	addi	r7,r7,1
    4084:	d9c14515 	stw	r7,1300(sp)
    4088:	38003416 	blt	r7,zero,415c <___vfprintf_internal_r+0x1c78>
    408c:	e0803fcc 	andi	r2,fp,255
    4090:	1080201c 	xori	r2,r2,128
    4094:	10bfe004 	addi	r2,r2,-128
    4098:	10004e26 	beq	r2,zero,41d4 <___vfprintf_internal_r+0x1cf0>
    409c:	00800b44 	movi	r2,45
    40a0:	dc814715 	stw	r18,1308(sp)
    40a4:	d8014615 	stw	zero,1304(sp)
    40a8:	d8800405 	stb	r2,16(sp)
    40ac:	003bb106 	br	2f74 <___vfprintf_internal_r+0xa90>
    40b0:	00800b44 	movi	r2,45
    40b4:	d8800405 	stb	r2,16(sp)
    40b8:	003d3306 	br	3588 <___vfprintf_internal_r+0x10a4>
    40bc:	d9014f17 	ldw	r4,1340(sp)
    40c0:	b00b883a 	mov	r5,r22
    40c4:	d9800c04 	addi	r6,sp,48
    40c8:	000248c0 	call	248c <__sprint_r>
    40cc:	103abd1e 	bne	r2,zero,2bc4 <___vfprintf_internal_r+0x6e0>
    40d0:	003abb06 	br	2bc0 <___vfprintf_internal_r+0x6dc>
    40d4:	38800017 	ldw	r2,0(r7)
    40d8:	39c00104 	addi	r7,r7,4
    40dc:	d9c14015 	stw	r7,1280(sp)
    40e0:	d9414b17 	ldw	r5,1324(sp)
    40e4:	d9c14017 	ldw	r7,1280(sp)
    40e8:	11400015 	stw	r5,0(r2)
    40ec:	00395906 	br	2654 <___vfprintf_internal_r+0x170>
    40f0:	980f883a 	mov	r7,r19
    40f4:	dcc14515 	stw	r19,1300(sp)
    40f8:	d8014615 	stw	zero,1304(sp)
    40fc:	003b9b06 	br	2f6c <___vfprintf_internal_r+0xa88>
    4100:	0027883a 	mov	r19,zero
    4104:	00397806 	br	26e8 <___vfprintf_internal_r+0x204>
    4108:	00c00074 	movhi	r3,1
    410c:	18fc8604 	addi	r3,r3,-3560
    4110:	100f883a 	mov	r7,r2
    4114:	d8814515 	stw	r2,1300(sp)
    4118:	d8c14115 	stw	r3,1284(sp)
    411c:	0039e006 	br	28a0 <___vfprintf_internal_r+0x3bc>
    4120:	00800074 	movhi	r2,1
    4124:	10bc8504 	addi	r2,r2,-3564
    4128:	d8814115 	stw	r2,1284(sp)
    412c:	003d1c06 	br	35a0 <___vfprintf_internal_r+0x10bc>
    4130:	d9414d17 	ldw	r5,1332(sp)
    4134:	00801984 	movi	r2,102
    4138:	28804926 	beq	r5,r2,4260 <___vfprintf_internal_r+0x1d7c>
    413c:	200f883a 	mov	r7,r4
    4140:	24805716 	blt	r4,r18,42a0 <___vfprintf_internal_r+0x1dbc>
    4144:	d9414c17 	ldw	r5,1328(sp)
    4148:	2880004c 	andi	r2,r5,1
    414c:	10000126 	beq	r2,zero,4154 <___vfprintf_internal_r+0x1c70>
    4150:	21c00044 	addi	r7,r4,1
    4154:	d9c14515 	stw	r7,1300(sp)
    4158:	383fcc0e 	bge	r7,zero,408c <___vfprintf_internal_r+0x1ba8>
    415c:	d8014515 	stw	zero,1300(sp)
    4160:	003fca06 	br	408c <___vfprintf_internal_r+0x1ba8>
    4164:	d9000517 	ldw	r4,20(sp)
    4168:	00bfff04 	movi	r2,-4
    416c:	1100480e 	bge	r2,r4,4290 <___vfprintf_internal_r+0x1dac>
    4170:	99004716 	blt	r19,r4,4290 <___vfprintf_internal_r+0x1dac>
    4174:	d8c14d15 	stw	r3,1332(sp)
    4178:	003ff006 	br	413c <___vfprintf_internal_r+0x1c58>
    417c:	d8800717 	ldw	r2,28(sp)
    4180:	14bf8b2e 	bgeu	r2,r18,3fb0 <___vfprintf_internal_r+0x1acc>
    4184:	9007883a 	mov	r3,r18
    4188:	01000c04 	movi	r4,48
    418c:	11000005 	stb	r4,0(r2)
    4190:	10800044 	addi	r2,r2,1
    4194:	d8800715 	stw	r2,28(sp)
    4198:	18bffc1e 	bne	r3,r2,418c <___vfprintf_internal_r+0x1ca8>
    419c:	003f8406 	br	3fb0 <___vfprintf_internal_r+0x1acc>
    41a0:	d8814117 	ldw	r2,1284(sp)
    41a4:	10c00007 	ldb	r3,0(r2)
    41a8:	00800c04 	movi	r2,48
    41ac:	18805b26 	beq	r3,r2,431c <___vfprintf_internal_r+0x1e38>
    41b0:	d9000517 	ldw	r4,20(sp)
    41b4:	9125883a 	add	r18,r18,r4
    41b8:	003f7506 	br	3f90 <___vfprintf_internal_r+0x1aac>
    41bc:	d9014c17 	ldw	r4,1328(sp)
    41c0:	2080004c 	andi	r2,r4,1
    41c4:	1005003a 	cmpeq	r2,r2,zero
    41c8:	103f6a26 	beq	r2,zero,3f74 <___vfprintf_internal_r+0x1a90>
    41cc:	d8800717 	ldw	r2,28(sp)
    41d0:	003f7706 	br	3fb0 <___vfprintf_internal_r+0x1acc>
    41d4:	d9c14515 	stw	r7,1300(sp)
    41d8:	38004d16 	blt	r7,zero,4310 <___vfprintf_internal_r+0x1e2c>
    41dc:	dc814715 	stw	r18,1308(sp)
    41e0:	d8014615 	stw	zero,1304(sp)
    41e4:	003b6106 	br	2f6c <___vfprintf_internal_r+0xa88>
    41e8:	d9014f17 	ldw	r4,1340(sp)
    41ec:	d8800504 	addi	r2,sp,20
    41f0:	d8800115 	stw	r2,4(sp)
    41f4:	d8c00604 	addi	r3,sp,24
    41f8:	d8800704 	addi	r2,sp,28
    41fc:	800b883a 	mov	r5,r16
    4200:	880d883a 	mov	r6,r17
    4204:	01c000c4 	movi	r7,3
    4208:	d8c00215 	stw	r3,8(sp)
    420c:	d8800315 	stw	r2,12(sp)
    4210:	dcc00015 	stw	r19,0(sp)
    4214:	9829883a 	mov	r20,r19
    4218:	00047080 	call	4708 <_dtoa_r>
    421c:	d8814115 	stw	r2,1284(sp)
    4220:	003f5106 	br	3f68 <___vfprintf_internal_r+0x1a84>
    4224:	d8c14217 	ldw	r3,1288(sp)
    4228:	d9014317 	ldw	r4,1292(sp)
    422c:	07000b44 	movi	fp,45
    4230:	1821883a 	mov	r16,r3
    4234:	2460003c 	xorhi	r17,r4,32768
    4238:	003f3106 	br	3f00 <___vfprintf_internal_r+0x1a1c>
    423c:	9d000044 	addi	r20,r19,1
    4240:	003f3906 	br	3f28 <___vfprintf_internal_r+0x1a44>
    4244:	983f251e 	bne	r19,zero,3edc <___vfprintf_internal_r+0x19f8>
    4248:	04c00044 	movi	r19,1
    424c:	003f2306 	br	3edc <___vfprintf_internal_r+0x19f8>
    4250:	04c00184 	movi	r19,6
    4254:	003f2106 	br	3edc <___vfprintf_internal_r+0x19f8>
    4258:	d8014515 	stw	zero,1300(sp)
    425c:	003eee06 	br	3e18 <___vfprintf_internal_r+0x1934>
    4260:	200f883a 	mov	r7,r4
    4264:	0100370e 	bge	zero,r4,4344 <___vfprintf_internal_r+0x1e60>
    4268:	9800031e 	bne	r19,zero,4278 <___vfprintf_internal_r+0x1d94>
    426c:	d9814c17 	ldw	r6,1328(sp)
    4270:	3080004c 	andi	r2,r6,1
    4274:	103fb726 	beq	r2,zero,4154 <___vfprintf_internal_r+0x1c70>
    4278:	20800044 	addi	r2,r4,1
    427c:	98a7883a 	add	r19,r19,r2
    4280:	dcc14515 	stw	r19,1300(sp)
    4284:	980f883a 	mov	r7,r19
    4288:	983f800e 	bge	r19,zero,408c <___vfprintf_internal_r+0x1ba8>
    428c:	003fb306 	br	415c <___vfprintf_internal_r+0x1c78>
    4290:	d9814d17 	ldw	r6,1332(sp)
    4294:	31bfff84 	addi	r6,r6,-2
    4298:	d9814d15 	stw	r6,1332(sp)
    429c:	003f4c06 	br	3fd0 <___vfprintf_internal_r+0x1aec>
    42a0:	0100180e 	bge	zero,r4,4304 <___vfprintf_internal_r+0x1e20>
    42a4:	00800044 	movi	r2,1
    42a8:	1485883a 	add	r2,r2,r18
    42ac:	d8814515 	stw	r2,1300(sp)
    42b0:	100f883a 	mov	r7,r2
    42b4:	103f750e 	bge	r2,zero,408c <___vfprintf_internal_r+0x1ba8>
    42b8:	003fa806 	br	415c <___vfprintf_internal_r+0x1c78>
    42bc:	80c00c04 	addi	r3,r16,48
    42c0:	00800c04 	movi	r2,48
    42c4:	d8c008c5 	stb	r3,35(sp)
    42c8:	d9800804 	addi	r6,sp,32
    42cc:	d8c00904 	addi	r3,sp,36
    42d0:	d8800885 	stb	r2,34(sp)
    42d4:	003f6506 	br	406c <___vfprintf_internal_r+0x1b88>
    42d8:	d9014c17 	ldw	r4,1328(sp)
    42dc:	2084703a 	and	r2,r4,r2
    42e0:	103f9c26 	beq	r2,zero,4154 <___vfprintf_internal_r+0x1c70>
    42e4:	003f6606 	br	4080 <___vfprintf_internal_r+0x1b9c>
    42e8:	d9800804 	addi	r6,sp,32
    42ec:	d8c00884 	addi	r3,sp,34
    42f0:	003f5e06 	br	406c <___vfprintf_internal_r+0x1b88>
    42f4:	00800b44 	movi	r2,45
    42f8:	0121c83a 	sub	r16,zero,r4
    42fc:	d8800845 	stb	r2,33(sp)
    4300:	003f3d06 	br	3ff8 <___vfprintf_internal_r+0x1b14>
    4304:	00800084 	movi	r2,2
    4308:	1105c83a 	sub	r2,r2,r4
    430c:	003fe606 	br	42a8 <___vfprintf_internal_r+0x1dc4>
    4310:	d8014515 	stw	zero,1300(sp)
    4314:	dc814715 	stw	r18,1308(sp)
    4318:	003fb106 	br	41e0 <___vfprintf_internal_r+0x1cfc>
    431c:	000d883a 	mov	r6,zero
    4320:	000f883a 	mov	r7,zero
    4324:	8009883a 	mov	r4,r16
    4328:	880b883a 	mov	r5,r17
    432c:	000a5840 	call	a584 <__nedf2>
    4330:	103f9f26 	beq	r2,zero,41b0 <___vfprintf_internal_r+0x1ccc>
    4334:	00800044 	movi	r2,1
    4338:	1509c83a 	sub	r4,r2,r20
    433c:	d9000515 	stw	r4,20(sp)
    4340:	003f9b06 	br	41b0 <___vfprintf_internal_r+0x1ccc>
    4344:	98000d1e 	bne	r19,zero,437c <___vfprintf_internal_r+0x1e98>
    4348:	d8c14c17 	ldw	r3,1328(sp)
    434c:	1880004c 	andi	r2,r3,1
    4350:	10000a1e 	bne	r2,zero,437c <___vfprintf_internal_r+0x1e98>
    4354:	01000044 	movi	r4,1
    4358:	200f883a 	mov	r7,r4
    435c:	d9014515 	stw	r4,1300(sp)
    4360:	003f4a06 	br	408c <___vfprintf_internal_r+0x1ba8>
    4364:	3cc00017 	ldw	r19,0(r7)
    4368:	39c00104 	addi	r7,r7,4
    436c:	983d0e0e 	bge	r19,zero,37a8 <___vfprintf_internal_r+0x12c4>
    4370:	b8c00007 	ldb	r3,0(r23)
    4374:	04ffffc4 	movi	r19,-1
    4378:	0038d906 	br	26e0 <___vfprintf_internal_r+0x1fc>
    437c:	9cc00084 	addi	r19,r19,2
    4380:	dcc14515 	stw	r19,1300(sp)
    4384:	980f883a 	mov	r7,r19
    4388:	983f400e 	bge	r19,zero,408c <___vfprintf_internal_r+0x1ba8>
    438c:	003f7306 	br	415c <___vfprintf_internal_r+0x1c78>

00004390 <__vfprintf_internal>:
    4390:	00800074 	movhi	r2,1
    4394:	10852d04 	addi	r2,r2,5300
    4398:	2013883a 	mov	r9,r4
    439c:	11000017 	ldw	r4,0(r2)
    43a0:	2805883a 	mov	r2,r5
    43a4:	300f883a 	mov	r7,r6
    43a8:	480b883a 	mov	r5,r9
    43ac:	100d883a 	mov	r6,r2
    43b0:	00024e41 	jmpi	24e4 <___vfprintf_internal_r>

000043b4 <__swsetup_r>:
    43b4:	00800074 	movhi	r2,1
    43b8:	10852d04 	addi	r2,r2,5300
    43bc:	10c00017 	ldw	r3,0(r2)
    43c0:	defffd04 	addi	sp,sp,-12
    43c4:	dc400115 	stw	r17,4(sp)
    43c8:	dc000015 	stw	r16,0(sp)
    43cc:	dfc00215 	stw	ra,8(sp)
    43d0:	2023883a 	mov	r17,r4
    43d4:	2821883a 	mov	r16,r5
    43d8:	18000226 	beq	r3,zero,43e4 <__swsetup_r+0x30>
    43dc:	18800e17 	ldw	r2,56(r3)
    43e0:	10001f26 	beq	r2,zero,4460 <__swsetup_r+0xac>
    43e4:	8100030b 	ldhu	r4,12(r16)
    43e8:	2080020c 	andi	r2,r4,8
    43ec:	10002826 	beq	r2,zero,4490 <__swsetup_r+0xdc>
    43f0:	81400417 	ldw	r5,16(r16)
    43f4:	28001d26 	beq	r5,zero,446c <__swsetup_r+0xb8>
    43f8:	2080004c 	andi	r2,r4,1
    43fc:	1005003a 	cmpeq	r2,r2,zero
    4400:	10000b26 	beq	r2,zero,4430 <__swsetup_r+0x7c>
    4404:	2080008c 	andi	r2,r4,2
    4408:	10001226 	beq	r2,zero,4454 <__swsetup_r+0xa0>
    440c:	0005883a 	mov	r2,zero
    4410:	80800215 	stw	r2,8(r16)
    4414:	28000b26 	beq	r5,zero,4444 <__swsetup_r+0x90>
    4418:	0005883a 	mov	r2,zero
    441c:	dfc00217 	ldw	ra,8(sp)
    4420:	dc400117 	ldw	r17,4(sp)
    4424:	dc000017 	ldw	r16,0(sp)
    4428:	dec00304 	addi	sp,sp,12
    442c:	f800283a 	ret
    4430:	80800517 	ldw	r2,20(r16)
    4434:	80000215 	stw	zero,8(r16)
    4438:	0085c83a 	sub	r2,zero,r2
    443c:	80800615 	stw	r2,24(r16)
    4440:	283ff51e 	bne	r5,zero,4418 <__swsetup_r+0x64>
    4444:	2080200c 	andi	r2,r4,128
    4448:	103ff326 	beq	r2,zero,4418 <__swsetup_r+0x64>
    444c:	00bfffc4 	movi	r2,-1
    4450:	003ff206 	br	441c <__swsetup_r+0x68>
    4454:	80800517 	ldw	r2,20(r16)
    4458:	80800215 	stw	r2,8(r16)
    445c:	003fed06 	br	4414 <__swsetup_r+0x60>
    4460:	1809883a 	mov	r4,r3
    4464:	0005f540 	call	5f54 <__sinit>
    4468:	003fde06 	br	43e4 <__swsetup_r+0x30>
    446c:	20c0a00c 	andi	r3,r4,640
    4470:	00808004 	movi	r2,512
    4474:	18bfe026 	beq	r3,r2,43f8 <__swsetup_r+0x44>
    4478:	8809883a 	mov	r4,r17
    447c:	800b883a 	mov	r5,r16
    4480:	0006ccc0 	call	6ccc <__smakebuf_r>
    4484:	8100030b 	ldhu	r4,12(r16)
    4488:	81400417 	ldw	r5,16(r16)
    448c:	003fda06 	br	43f8 <__swsetup_r+0x44>
    4490:	2080040c 	andi	r2,r4,16
    4494:	103fed26 	beq	r2,zero,444c <__swsetup_r+0x98>
    4498:	2080010c 	andi	r2,r4,4
    449c:	10001226 	beq	r2,zero,44e8 <__swsetup_r+0x134>
    44a0:	81400c17 	ldw	r5,48(r16)
    44a4:	28000526 	beq	r5,zero,44bc <__swsetup_r+0x108>
    44a8:	80801004 	addi	r2,r16,64
    44ac:	28800226 	beq	r5,r2,44b8 <__swsetup_r+0x104>
    44b0:	8809883a 	mov	r4,r17
    44b4:	00062d80 	call	62d8 <_free_r>
    44b8:	80000c15 	stw	zero,48(r16)
    44bc:	8080030b 	ldhu	r2,12(r16)
    44c0:	81400417 	ldw	r5,16(r16)
    44c4:	80000115 	stw	zero,4(r16)
    44c8:	10bff6cc 	andi	r2,r2,65499
    44cc:	8080030d 	sth	r2,12(r16)
    44d0:	81400015 	stw	r5,0(r16)
    44d4:	8080030b 	ldhu	r2,12(r16)
    44d8:	10800214 	ori	r2,r2,8
    44dc:	113fffcc 	andi	r4,r2,65535
    44e0:	8080030d 	sth	r2,12(r16)
    44e4:	003fc306 	br	43f4 <__swsetup_r+0x40>
    44e8:	81400417 	ldw	r5,16(r16)
    44ec:	003ff906 	br	44d4 <__swsetup_r+0x120>

000044f0 <quorem>:
    44f0:	28c00417 	ldw	r3,16(r5)
    44f4:	20800417 	ldw	r2,16(r4)
    44f8:	defff604 	addi	sp,sp,-40
    44fc:	ddc00715 	stw	r23,28(sp)
    4500:	dd400515 	stw	r21,20(sp)
    4504:	dfc00915 	stw	ra,36(sp)
    4508:	df000815 	stw	fp,32(sp)
    450c:	dd800615 	stw	r22,24(sp)
    4510:	dd000415 	stw	r20,16(sp)
    4514:	dcc00315 	stw	r19,12(sp)
    4518:	dc800215 	stw	r18,8(sp)
    451c:	dc400115 	stw	r17,4(sp)
    4520:	dc000015 	stw	r16,0(sp)
    4524:	202f883a 	mov	r23,r4
    4528:	282b883a 	mov	r21,r5
    452c:	10c07416 	blt	r2,r3,4700 <quorem+0x210>
    4530:	1c7fffc4 	addi	r17,r3,-1
    4534:	8c45883a 	add	r2,r17,r17
    4538:	1085883a 	add	r2,r2,r2
    453c:	2c000504 	addi	r16,r5,20
    4540:	24c00504 	addi	r19,r4,20
    4544:	14ed883a 	add	r22,r2,r19
    4548:	80a5883a 	add	r18,r16,r2
    454c:	b7000017 	ldw	fp,0(r22)
    4550:	91400017 	ldw	r5,0(r18)
    4554:	e009883a 	mov	r4,fp
    4558:	29400044 	addi	r5,r5,1
    455c:	0001b040 	call	1b04 <__udivsi3>
    4560:	1029883a 	mov	r20,r2
    4564:	10003c1e 	bne	r2,zero,4658 <quorem+0x168>
    4568:	a80b883a 	mov	r5,r21
    456c:	b809883a 	mov	r4,r23
    4570:	00072b80 	call	72b8 <__mcmp>
    4574:	10002b16 	blt	r2,zero,4624 <quorem+0x134>
    4578:	a5000044 	addi	r20,r20,1
    457c:	980f883a 	mov	r7,r19
    4580:	0011883a 	mov	r8,zero
    4584:	0009883a 	mov	r4,zero
    4588:	81400017 	ldw	r5,0(r16)
    458c:	38c00017 	ldw	r3,0(r7)
    4590:	84000104 	addi	r16,r16,4
    4594:	28bfffcc 	andi	r2,r5,65535
    4598:	2085883a 	add	r2,r4,r2
    459c:	11bfffcc 	andi	r6,r2,65535
    45a0:	193fffcc 	andi	r4,r3,65535
    45a4:	1004d43a 	srli	r2,r2,16
    45a8:	280ad43a 	srli	r5,r5,16
    45ac:	2189c83a 	sub	r4,r4,r6
    45b0:	2209883a 	add	r4,r4,r8
    45b4:	1806d43a 	srli	r3,r3,16
    45b8:	288b883a 	add	r5,r5,r2
    45bc:	200dd43a 	srai	r6,r4,16
    45c0:	28bfffcc 	andi	r2,r5,65535
    45c4:	1887c83a 	sub	r3,r3,r2
    45c8:	1987883a 	add	r3,r3,r6
    45cc:	3900000d 	sth	r4,0(r7)
    45d0:	38c0008d 	sth	r3,2(r7)
    45d4:	2808d43a 	srli	r4,r5,16
    45d8:	39c00104 	addi	r7,r7,4
    45dc:	1811d43a 	srai	r8,r3,16
    45e0:	943fe92e 	bgeu	r18,r16,4588 <quorem+0x98>
    45e4:	8c45883a 	add	r2,r17,r17
    45e8:	1085883a 	add	r2,r2,r2
    45ec:	9885883a 	add	r2,r19,r2
    45f0:	10c00017 	ldw	r3,0(r2)
    45f4:	18000b1e 	bne	r3,zero,4624 <quorem+0x134>
    45f8:	113fff04 	addi	r4,r2,-4
    45fc:	9900082e 	bgeu	r19,r4,4620 <quorem+0x130>
    4600:	10bfff17 	ldw	r2,-4(r2)
    4604:	10000326 	beq	r2,zero,4614 <quorem+0x124>
    4608:	00000506 	br	4620 <quorem+0x130>
    460c:	20800017 	ldw	r2,0(r4)
    4610:	1000031e 	bne	r2,zero,4620 <quorem+0x130>
    4614:	213fff04 	addi	r4,r4,-4
    4618:	8c7fffc4 	addi	r17,r17,-1
    461c:	993ffb36 	bltu	r19,r4,460c <quorem+0x11c>
    4620:	bc400415 	stw	r17,16(r23)
    4624:	a005883a 	mov	r2,r20
    4628:	dfc00917 	ldw	ra,36(sp)
    462c:	df000817 	ldw	fp,32(sp)
    4630:	ddc00717 	ldw	r23,28(sp)
    4634:	dd800617 	ldw	r22,24(sp)
    4638:	dd400517 	ldw	r21,20(sp)
    463c:	dd000417 	ldw	r20,16(sp)
    4640:	dcc00317 	ldw	r19,12(sp)
    4644:	dc800217 	ldw	r18,8(sp)
    4648:	dc400117 	ldw	r17,4(sp)
    464c:	dc000017 	ldw	r16,0(sp)
    4650:	dec00a04 	addi	sp,sp,40
    4654:	f800283a 	ret
    4658:	980f883a 	mov	r7,r19
    465c:	8011883a 	mov	r8,r16
    4660:	0013883a 	mov	r9,zero
    4664:	000d883a 	mov	r6,zero
    4668:	40c00017 	ldw	r3,0(r8)
    466c:	39000017 	ldw	r4,0(r7)
    4670:	42000104 	addi	r8,r8,4
    4674:	18bfffcc 	andi	r2,r3,65535
    4678:	a085383a 	mul	r2,r20,r2
    467c:	1806d43a 	srli	r3,r3,16
    4680:	217fffcc 	andi	r5,r4,65535
    4684:	3085883a 	add	r2,r6,r2
    4688:	11bfffcc 	andi	r6,r2,65535
    468c:	a0c7383a 	mul	r3,r20,r3
    4690:	1004d43a 	srli	r2,r2,16
    4694:	298bc83a 	sub	r5,r5,r6
    4698:	2a4b883a 	add	r5,r5,r9
    469c:	2008d43a 	srli	r4,r4,16
    46a0:	1887883a 	add	r3,r3,r2
    46a4:	280dd43a 	srai	r6,r5,16
    46a8:	18bfffcc 	andi	r2,r3,65535
    46ac:	2089c83a 	sub	r4,r4,r2
    46b0:	2189883a 	add	r4,r4,r6
    46b4:	3900008d 	sth	r4,2(r7)
    46b8:	3940000d 	sth	r5,0(r7)
    46bc:	180cd43a 	srli	r6,r3,16
    46c0:	39c00104 	addi	r7,r7,4
    46c4:	2013d43a 	srai	r9,r4,16
    46c8:	923fe72e 	bgeu	r18,r8,4668 <quorem+0x178>
    46cc:	e03fa61e 	bne	fp,zero,4568 <quorem+0x78>
    46d0:	b0ffff04 	addi	r3,r22,-4
    46d4:	98c0082e 	bgeu	r19,r3,46f8 <quorem+0x208>
    46d8:	b0bfff17 	ldw	r2,-4(r22)
    46dc:	10000326 	beq	r2,zero,46ec <quorem+0x1fc>
    46e0:	00000506 	br	46f8 <quorem+0x208>
    46e4:	18800017 	ldw	r2,0(r3)
    46e8:	1000031e 	bne	r2,zero,46f8 <quorem+0x208>
    46ec:	18ffff04 	addi	r3,r3,-4
    46f0:	8c7fffc4 	addi	r17,r17,-1
    46f4:	98fffb36 	bltu	r19,r3,46e4 <quorem+0x1f4>
    46f8:	bc400415 	stw	r17,16(r23)
    46fc:	003f9a06 	br	4568 <quorem+0x78>
    4700:	0005883a 	mov	r2,zero
    4704:	003fc806 	br	4628 <quorem+0x138>

00004708 <_dtoa_r>:
    4708:	22001017 	ldw	r8,64(r4)
    470c:	deffda04 	addi	sp,sp,-152
    4710:	dd402115 	stw	r21,132(sp)
    4714:	dd002015 	stw	r20,128(sp)
    4718:	dc801e15 	stw	r18,120(sp)
    471c:	dc401d15 	stw	r17,116(sp)
    4720:	dfc02515 	stw	ra,148(sp)
    4724:	df002415 	stw	fp,144(sp)
    4728:	ddc02315 	stw	r23,140(sp)
    472c:	dd802215 	stw	r22,136(sp)
    4730:	dcc01f15 	stw	r19,124(sp)
    4734:	dc001c15 	stw	r16,112(sp)
    4738:	d9001615 	stw	r4,88(sp)
    473c:	3023883a 	mov	r17,r6
    4740:	2829883a 	mov	r20,r5
    4744:	d9c01715 	stw	r7,92(sp)
    4748:	dc802817 	ldw	r18,160(sp)
    474c:	302b883a 	mov	r21,r6
    4750:	40000a26 	beq	r8,zero,477c <_dtoa_r+0x74>
    4754:	20801117 	ldw	r2,68(r4)
    4758:	400b883a 	mov	r5,r8
    475c:	40800115 	stw	r2,4(r8)
    4760:	20c01117 	ldw	r3,68(r4)
    4764:	00800044 	movi	r2,1
    4768:	10c4983a 	sll	r2,r2,r3
    476c:	40800215 	stw	r2,8(r8)
    4770:	000715c0 	call	715c <_Bfree>
    4774:	d8c01617 	ldw	r3,88(sp)
    4778:	18001015 	stw	zero,64(r3)
    477c:	8800a316 	blt	r17,zero,4a0c <_dtoa_r+0x304>
    4780:	90000015 	stw	zero,0(r18)
    4784:	a8dffc2c 	andhi	r3,r21,32752
    4788:	009ffc34 	movhi	r2,32752
    478c:	18809126 	beq	r3,r2,49d4 <_dtoa_r+0x2cc>
    4790:	000d883a 	mov	r6,zero
    4794:	000f883a 	mov	r7,zero
    4798:	a009883a 	mov	r4,r20
    479c:	a80b883a 	mov	r5,r21
    47a0:	dd001215 	stw	r20,72(sp)
    47a4:	dd401315 	stw	r21,76(sp)
    47a8:	000a5840 	call	a584 <__nedf2>
    47ac:	1000171e 	bne	r2,zero,480c <_dtoa_r+0x104>
    47b0:	d9802717 	ldw	r6,156(sp)
    47b4:	00800044 	movi	r2,1
    47b8:	30800015 	stw	r2,0(r6)
    47bc:	d8802917 	ldw	r2,164(sp)
    47c0:	10029b26 	beq	r2,zero,5230 <_dtoa_r+0xb28>
    47c4:	d9002917 	ldw	r4,164(sp)
    47c8:	00800074 	movhi	r2,1
    47cc:	10bc9444 	addi	r2,r2,-3503
    47d0:	10ffffc4 	addi	r3,r2,-1
    47d4:	20800015 	stw	r2,0(r4)
    47d8:	1805883a 	mov	r2,r3
    47dc:	dfc02517 	ldw	ra,148(sp)
    47e0:	df002417 	ldw	fp,144(sp)
    47e4:	ddc02317 	ldw	r23,140(sp)
    47e8:	dd802217 	ldw	r22,136(sp)
    47ec:	dd402117 	ldw	r21,132(sp)
    47f0:	dd002017 	ldw	r20,128(sp)
    47f4:	dcc01f17 	ldw	r19,124(sp)
    47f8:	dc801e17 	ldw	r18,120(sp)
    47fc:	dc401d17 	ldw	r17,116(sp)
    4800:	dc001c17 	ldw	r16,112(sp)
    4804:	dec02604 	addi	sp,sp,152
    4808:	f800283a 	ret
    480c:	d9001617 	ldw	r4,88(sp)
    4810:	d9401217 	ldw	r5,72(sp)
    4814:	d8800104 	addi	r2,sp,4
    4818:	a80d883a 	mov	r6,r21
    481c:	d9c00204 	addi	r7,sp,8
    4820:	d8800015 	stw	r2,0(sp)
    4824:	00077980 	call	7798 <__d2b>
    4828:	d8800715 	stw	r2,28(sp)
    482c:	a804d53a 	srli	r2,r21,20
    4830:	1101ffcc 	andi	r4,r2,2047
    4834:	20008626 	beq	r4,zero,4a50 <_dtoa_r+0x348>
    4838:	d8c01217 	ldw	r3,72(sp)
    483c:	00800434 	movhi	r2,16
    4840:	10bfffc4 	addi	r2,r2,-1
    4844:	ddc00117 	ldw	r23,4(sp)
    4848:	a884703a 	and	r2,r21,r2
    484c:	1811883a 	mov	r8,r3
    4850:	124ffc34 	orhi	r9,r2,16368
    4854:	25bf0044 	addi	r22,r4,-1023
    4858:	d8000815 	stw	zero,32(sp)
    485c:	0005883a 	mov	r2,zero
    4860:	00cffe34 	movhi	r3,16376
    4864:	480b883a 	mov	r5,r9
    4868:	4009883a 	mov	r4,r8
    486c:	180f883a 	mov	r7,r3
    4870:	100d883a 	mov	r6,r2
    4874:	0009dec0 	call	9dec <__subdf3>
    4878:	0218dbf4 	movhi	r8,25455
    487c:	4210d844 	addi	r8,r8,17249
    4880:	024ff4f4 	movhi	r9,16339
    4884:	4a61e9c4 	addi	r9,r9,-30809
    4888:	480f883a 	mov	r7,r9
    488c:	400d883a 	mov	r6,r8
    4890:	180b883a 	mov	r5,r3
    4894:	1009883a 	mov	r4,r2
    4898:	0009ee00 	call	9ee0 <__muldf3>
    489c:	0222d874 	movhi	r8,35681
    48a0:	42322cc4 	addi	r8,r8,-14157
    48a4:	024ff1f4 	movhi	r9,16327
    48a8:	4a628a04 	addi	r9,r9,-30168
    48ac:	480f883a 	mov	r7,r9
    48b0:	400d883a 	mov	r6,r8
    48b4:	180b883a 	mov	r5,r3
    48b8:	1009883a 	mov	r4,r2
    48bc:	0009e6c0 	call	9e6c <__adddf3>
    48c0:	b009883a 	mov	r4,r22
    48c4:	1021883a 	mov	r16,r2
    48c8:	1823883a 	mov	r17,r3
    48cc:	000a7a40 	call	a7a4 <__floatsidf>
    48d0:	021427f4 	movhi	r8,20639
    48d4:	421e7ec4 	addi	r8,r8,31227
    48d8:	024ff4f4 	movhi	r9,16339
    48dc:	4a5104c4 	addi	r9,r9,17427
    48e0:	480f883a 	mov	r7,r9
    48e4:	400d883a 	mov	r6,r8
    48e8:	180b883a 	mov	r5,r3
    48ec:	1009883a 	mov	r4,r2
    48f0:	0009ee00 	call	9ee0 <__muldf3>
    48f4:	180f883a 	mov	r7,r3
    48f8:	880b883a 	mov	r5,r17
    48fc:	100d883a 	mov	r6,r2
    4900:	8009883a 	mov	r4,r16
    4904:	0009e6c0 	call	9e6c <__adddf3>
    4908:	1009883a 	mov	r4,r2
    490c:	180b883a 	mov	r5,r3
    4910:	1021883a 	mov	r16,r2
    4914:	1823883a 	mov	r17,r3
    4918:	000a89c0 	call	a89c <__fixdfsi>
    491c:	000d883a 	mov	r6,zero
    4920:	000f883a 	mov	r7,zero
    4924:	8009883a 	mov	r4,r16
    4928:	880b883a 	mov	r5,r17
    492c:	d8800d15 	stw	r2,52(sp)
    4930:	000a71c0 	call	a71c <__ltdf2>
    4934:	10031716 	blt	r2,zero,5594 <_dtoa_r+0xe8c>
    4938:	d8c00d17 	ldw	r3,52(sp)
    493c:	00800584 	movi	r2,22
    4940:	10c1482e 	bgeu	r2,r3,4e64 <_dtoa_r+0x75c>
    4944:	01000044 	movi	r4,1
    4948:	d9000c15 	stw	r4,48(sp)
    494c:	bd85c83a 	sub	r2,r23,r22
    4950:	11bfffc4 	addi	r6,r2,-1
    4954:	30030b16 	blt	r6,zero,5584 <_dtoa_r+0xe7c>
    4958:	d9800a15 	stw	r6,40(sp)
    495c:	d8001115 	stw	zero,68(sp)
    4960:	d8c00d17 	ldw	r3,52(sp)
    4964:	1802ff16 	blt	r3,zero,5564 <_dtoa_r+0xe5c>
    4968:	d9000a17 	ldw	r4,40(sp)
    496c:	d8c00915 	stw	r3,36(sp)
    4970:	d8001015 	stw	zero,64(sp)
    4974:	20c9883a 	add	r4,r4,r3
    4978:	d9000a15 	stw	r4,40(sp)
    497c:	d9001717 	ldw	r4,92(sp)
    4980:	00800244 	movi	r2,9
    4984:	11004636 	bltu	r2,r4,4aa0 <_dtoa_r+0x398>
    4988:	00800144 	movi	r2,5
    498c:	11020416 	blt	r2,r4,51a0 <_dtoa_r+0xa98>
    4990:	04400044 	movi	r17,1
    4994:	d8c01717 	ldw	r3,92(sp)
    4998:	00800144 	movi	r2,5
    499c:	10c1ed36 	bltu	r2,r3,5154 <_dtoa_r+0xa4c>
    49a0:	18c5883a 	add	r2,r3,r3
    49a4:	1085883a 	add	r2,r2,r2
    49a8:	00c00034 	movhi	r3,0
    49ac:	18d26f04 	addi	r3,r3,18876
    49b0:	10c5883a 	add	r2,r2,r3
    49b4:	11000017 	ldw	r4,0(r2)
    49b8:	2000683a 	jmp	r4
    49bc:	00004aa8 	cmpgeui	zero,zero,298
    49c0:	00004aa8 	cmpgeui	zero,zero,298
    49c4:	000054a8 	cmpgeui	zero,zero,338
    49c8:	00005480 	call	548 <dc_download+0x4c>
    49cc:	000054c4 	movi	zero,339
    49d0:	000054d0 	cmplti	zero,zero,339
    49d4:	d9002717 	ldw	r4,156(sp)
    49d8:	0089c3c4 	movi	r2,9999
    49dc:	20800015 	stw	r2,0(r4)
    49e0:	a0001026 	beq	r20,zero,4a24 <_dtoa_r+0x31c>
    49e4:	00c00074 	movhi	r3,1
    49e8:	18fca004 	addi	r3,r3,-3456
    49ec:	d9802917 	ldw	r6,164(sp)
    49f0:	303f7926 	beq	r6,zero,47d8 <_dtoa_r+0xd0>
    49f4:	188000c7 	ldb	r2,3(r3)
    49f8:	190000c4 	addi	r4,r3,3
    49fc:	1000101e 	bne	r2,zero,4a40 <_dtoa_r+0x338>
    4a00:	d8802917 	ldw	r2,164(sp)
    4a04:	11000015 	stw	r4,0(r2)
    4a08:	003f7306 	br	47d8 <_dtoa_r+0xd0>
    4a0c:	00a00034 	movhi	r2,32768
    4a10:	10bfffc4 	addi	r2,r2,-1
    4a14:	00c00044 	movi	r3,1
    4a18:	88aa703a 	and	r21,r17,r2
    4a1c:	90c00015 	stw	r3,0(r18)
    4a20:	003f5806 	br	4784 <_dtoa_r+0x7c>
    4a24:	00800434 	movhi	r2,16
    4a28:	10bfffc4 	addi	r2,r2,-1
    4a2c:	a884703a 	and	r2,r21,r2
    4a30:	103fec1e 	bne	r2,zero,49e4 <_dtoa_r+0x2dc>
    4a34:	00c00074 	movhi	r3,1
    4a38:	18fc9d04 	addi	r3,r3,-3468
    4a3c:	003feb06 	br	49ec <_dtoa_r+0x2e4>
    4a40:	d8802917 	ldw	r2,164(sp)
    4a44:	19000204 	addi	r4,r3,8
    4a48:	11000015 	stw	r4,0(r2)
    4a4c:	003f6206 	br	47d8 <_dtoa_r+0xd0>
    4a50:	ddc00117 	ldw	r23,4(sp)
    4a54:	d8800217 	ldw	r2,8(sp)
    4a58:	01000804 	movi	r4,32
    4a5c:	b8c10c84 	addi	r3,r23,1074
    4a60:	18a3883a 	add	r17,r3,r2
    4a64:	2441b80e 	bge	r4,r17,5148 <_dtoa_r+0xa40>
    4a68:	00c01004 	movi	r3,64
    4a6c:	1c47c83a 	sub	r3,r3,r17
    4a70:	88bff804 	addi	r2,r17,-32
    4a74:	a8c6983a 	sll	r3,r21,r3
    4a78:	a084d83a 	srl	r2,r20,r2
    4a7c:	1888b03a 	or	r4,r3,r2
    4a80:	000a9740 	call	a974 <__floatunsidf>
    4a84:	1011883a 	mov	r8,r2
    4a88:	00bf8434 	movhi	r2,65040
    4a8c:	01000044 	movi	r4,1
    4a90:	10d3883a 	add	r9,r2,r3
    4a94:	8dbef344 	addi	r22,r17,-1075
    4a98:	d9000815 	stw	r4,32(sp)
    4a9c:	003f6f06 	br	485c <_dtoa_r+0x154>
    4aa0:	d8001715 	stw	zero,92(sp)
    4aa4:	04400044 	movi	r17,1
    4aa8:	00bfffc4 	movi	r2,-1
    4aac:	00c00044 	movi	r3,1
    4ab0:	d8800e15 	stw	r2,56(sp)
    4ab4:	d8002615 	stw	zero,152(sp)
    4ab8:	d8800f15 	stw	r2,60(sp)
    4abc:	d8c00b15 	stw	r3,44(sp)
    4ac0:	1021883a 	mov	r16,r2
    4ac4:	d8801617 	ldw	r2,88(sp)
    4ac8:	10001115 	stw	zero,68(r2)
    4acc:	d8801617 	ldw	r2,88(sp)
    4ad0:	11401117 	ldw	r5,68(r2)
    4ad4:	1009883a 	mov	r4,r2
    4ad8:	00076dc0 	call	76dc <_Balloc>
    4adc:	d8c01617 	ldw	r3,88(sp)
    4ae0:	d8800515 	stw	r2,20(sp)
    4ae4:	18801015 	stw	r2,64(r3)
    4ae8:	00800384 	movi	r2,14
    4aec:	14006836 	bltu	r2,r16,4c90 <_dtoa_r+0x588>
    4af0:	8805003a 	cmpeq	r2,r17,zero
    4af4:	1000661e 	bne	r2,zero,4c90 <_dtoa_r+0x588>
    4af8:	d9000d17 	ldw	r4,52(sp)
    4afc:	0102300e 	bge	zero,r4,53c0 <_dtoa_r+0xcb8>
    4b00:	208003cc 	andi	r2,r4,15
    4b04:	100490fa 	slli	r2,r2,3
    4b08:	2025d13a 	srai	r18,r4,4
    4b0c:	00c00074 	movhi	r3,1
    4b10:	18fcb204 	addi	r3,r3,-3384
    4b14:	10c5883a 	add	r2,r2,r3
    4b18:	90c0040c 	andi	r3,r18,16
    4b1c:	14000017 	ldw	r16,0(r2)
    4b20:	14400117 	ldw	r17,4(r2)
    4b24:	18036a1e 	bne	r3,zero,58d0 <_dtoa_r+0x11c8>
    4b28:	05800084 	movi	r22,2
    4b2c:	90001026 	beq	r18,zero,4b70 <_dtoa_r+0x468>
    4b30:	04c00074 	movhi	r19,1
    4b34:	9cfce404 	addi	r19,r19,-3184
    4b38:	9080004c 	andi	r2,r18,1
    4b3c:	1005003a 	cmpeq	r2,r2,zero
    4b40:	1000081e 	bne	r2,zero,4b64 <_dtoa_r+0x45c>
    4b44:	99800017 	ldw	r6,0(r19)
    4b48:	99c00117 	ldw	r7,4(r19)
    4b4c:	880b883a 	mov	r5,r17
    4b50:	8009883a 	mov	r4,r16
    4b54:	0009ee00 	call	9ee0 <__muldf3>
    4b58:	1021883a 	mov	r16,r2
    4b5c:	b5800044 	addi	r22,r22,1
    4b60:	1823883a 	mov	r17,r3
    4b64:	9025d07a 	srai	r18,r18,1
    4b68:	9cc00204 	addi	r19,r19,8
    4b6c:	903ff21e 	bne	r18,zero,4b38 <_dtoa_r+0x430>
    4b70:	a80b883a 	mov	r5,r21
    4b74:	a009883a 	mov	r4,r20
    4b78:	880f883a 	mov	r7,r17
    4b7c:	800d883a 	mov	r6,r16
    4b80:	000a2a40 	call	a2a4 <__divdf3>
    4b84:	1029883a 	mov	r20,r2
    4b88:	182b883a 	mov	r21,r3
    4b8c:	d8c00c17 	ldw	r3,48(sp)
    4b90:	1805003a 	cmpeq	r2,r3,zero
    4b94:	1000081e 	bne	r2,zero,4bb8 <_dtoa_r+0x4b0>
    4b98:	0005883a 	mov	r2,zero
    4b9c:	00cffc34 	movhi	r3,16368
    4ba0:	180f883a 	mov	r7,r3
    4ba4:	a009883a 	mov	r4,r20
    4ba8:	a80b883a 	mov	r5,r21
    4bac:	100d883a 	mov	r6,r2
    4bb0:	000a71c0 	call	a71c <__ltdf2>
    4bb4:	1003fe16 	blt	r2,zero,5bb0 <_dtoa_r+0x14a8>
    4bb8:	b009883a 	mov	r4,r22
    4bbc:	000a7a40 	call	a7a4 <__floatsidf>
    4bc0:	180b883a 	mov	r5,r3
    4bc4:	1009883a 	mov	r4,r2
    4bc8:	a00d883a 	mov	r6,r20
    4bcc:	a80f883a 	mov	r7,r21
    4bd0:	0009ee00 	call	9ee0 <__muldf3>
    4bd4:	0011883a 	mov	r8,zero
    4bd8:	02500734 	movhi	r9,16412
    4bdc:	1009883a 	mov	r4,r2
    4be0:	180b883a 	mov	r5,r3
    4be4:	480f883a 	mov	r7,r9
    4be8:	400d883a 	mov	r6,r8
    4bec:	0009e6c0 	call	9e6c <__adddf3>
    4bf0:	d9000f17 	ldw	r4,60(sp)
    4bf4:	102d883a 	mov	r22,r2
    4bf8:	00bf3034 	movhi	r2,64704
    4bfc:	18b9883a 	add	fp,r3,r2
    4c00:	e02f883a 	mov	r23,fp
    4c04:	20028f1e 	bne	r4,zero,5644 <_dtoa_r+0xf3c>
    4c08:	0005883a 	mov	r2,zero
    4c0c:	00d00534 	movhi	r3,16404
    4c10:	a009883a 	mov	r4,r20
    4c14:	a80b883a 	mov	r5,r21
    4c18:	180f883a 	mov	r7,r3
    4c1c:	100d883a 	mov	r6,r2
    4c20:	0009dec0 	call	9dec <__subdf3>
    4c24:	1009883a 	mov	r4,r2
    4c28:	e00f883a 	mov	r7,fp
    4c2c:	180b883a 	mov	r5,r3
    4c30:	b00d883a 	mov	r6,r22
    4c34:	1025883a 	mov	r18,r2
    4c38:	1827883a 	mov	r19,r3
    4c3c:	000a60c0 	call	a60c <__gtdf2>
    4c40:	00834f16 	blt	zero,r2,5980 <_dtoa_r+0x1278>
    4c44:	e0e0003c 	xorhi	r3,fp,32768
    4c48:	9009883a 	mov	r4,r18
    4c4c:	980b883a 	mov	r5,r19
    4c50:	180f883a 	mov	r7,r3
    4c54:	b00d883a 	mov	r6,r22
    4c58:	000a71c0 	call	a71c <__ltdf2>
    4c5c:	1000080e 	bge	r2,zero,4c80 <_dtoa_r+0x578>
    4c60:	0027883a 	mov	r19,zero
    4c64:	0025883a 	mov	r18,zero
    4c68:	d8802617 	ldw	r2,152(sp)
    4c6c:	df000517 	ldw	fp,20(sp)
    4c70:	d8000615 	stw	zero,24(sp)
    4c74:	0084303a 	nor	r2,zero,r2
    4c78:	d8800d15 	stw	r2,52(sp)
    4c7c:	00019b06 	br	52ec <_dtoa_r+0xbe4>
    4c80:	d9801217 	ldw	r6,72(sp)
    4c84:	d8801317 	ldw	r2,76(sp)
    4c88:	3029883a 	mov	r20,r6
    4c8c:	102b883a 	mov	r21,r2
    4c90:	d8c00217 	ldw	r3,8(sp)
    4c94:	18008516 	blt	r3,zero,4eac <_dtoa_r+0x7a4>
    4c98:	d9000d17 	ldw	r4,52(sp)
    4c9c:	00800384 	movi	r2,14
    4ca0:	11008216 	blt	r2,r4,4eac <_dtoa_r+0x7a4>
    4ca4:	200490fa 	slli	r2,r4,3
    4ca8:	d9802617 	ldw	r6,152(sp)
    4cac:	00c00074 	movhi	r3,1
    4cb0:	18fcb204 	addi	r3,r3,-3384
    4cb4:	10c5883a 	add	r2,r2,r3
    4cb8:	14800017 	ldw	r18,0(r2)
    4cbc:	14c00117 	ldw	r19,4(r2)
    4cc0:	30031e16 	blt	r6,zero,593c <_dtoa_r+0x1234>
    4cc4:	d9000517 	ldw	r4,20(sp)
    4cc8:	d8c00f17 	ldw	r3,60(sp)
    4ccc:	a823883a 	mov	r17,r21
    4cd0:	a021883a 	mov	r16,r20
    4cd4:	192b883a 	add	r21,r3,r4
    4cd8:	2039883a 	mov	fp,r4
    4cdc:	00000f06 	br	4d1c <_dtoa_r+0x614>
    4ce0:	0005883a 	mov	r2,zero
    4ce4:	00d00934 	movhi	r3,16420
    4ce8:	5009883a 	mov	r4,r10
    4cec:	580b883a 	mov	r5,r11
    4cf0:	180f883a 	mov	r7,r3
    4cf4:	100d883a 	mov	r6,r2
    4cf8:	0009ee00 	call	9ee0 <__muldf3>
    4cfc:	180b883a 	mov	r5,r3
    4d00:	000d883a 	mov	r6,zero
    4d04:	000f883a 	mov	r7,zero
    4d08:	1009883a 	mov	r4,r2
    4d0c:	1021883a 	mov	r16,r2
    4d10:	1823883a 	mov	r17,r3
    4d14:	000a5840 	call	a584 <__nedf2>
    4d18:	10004526 	beq	r2,zero,4e30 <_dtoa_r+0x728>
    4d1c:	900d883a 	mov	r6,r18
    4d20:	980f883a 	mov	r7,r19
    4d24:	8009883a 	mov	r4,r16
    4d28:	880b883a 	mov	r5,r17
    4d2c:	000a2a40 	call	a2a4 <__divdf3>
    4d30:	180b883a 	mov	r5,r3
    4d34:	1009883a 	mov	r4,r2
    4d38:	000a89c0 	call	a89c <__fixdfsi>
    4d3c:	1009883a 	mov	r4,r2
    4d40:	1029883a 	mov	r20,r2
    4d44:	000a7a40 	call	a7a4 <__floatsidf>
    4d48:	180f883a 	mov	r7,r3
    4d4c:	9009883a 	mov	r4,r18
    4d50:	980b883a 	mov	r5,r19
    4d54:	100d883a 	mov	r6,r2
    4d58:	0009ee00 	call	9ee0 <__muldf3>
    4d5c:	180f883a 	mov	r7,r3
    4d60:	880b883a 	mov	r5,r17
    4d64:	8009883a 	mov	r4,r16
    4d68:	100d883a 	mov	r6,r2
    4d6c:	0009dec0 	call	9dec <__subdf3>
    4d70:	1015883a 	mov	r10,r2
    4d74:	a0800c04 	addi	r2,r20,48
    4d78:	e0800005 	stb	r2,0(fp)
    4d7c:	e7000044 	addi	fp,fp,1
    4d80:	1817883a 	mov	r11,r3
    4d84:	e57fd61e 	bne	fp,r21,4ce0 <_dtoa_r+0x5d8>
    4d88:	500d883a 	mov	r6,r10
    4d8c:	180f883a 	mov	r7,r3
    4d90:	5009883a 	mov	r4,r10
    4d94:	180b883a 	mov	r5,r3
    4d98:	0009e6c0 	call	9e6c <__adddf3>
    4d9c:	100d883a 	mov	r6,r2
    4da0:	9009883a 	mov	r4,r18
    4da4:	980b883a 	mov	r5,r19
    4da8:	180f883a 	mov	r7,r3
    4dac:	1021883a 	mov	r16,r2
    4db0:	1823883a 	mov	r17,r3
    4db4:	000a71c0 	call	a71c <__ltdf2>
    4db8:	10000816 	blt	r2,zero,4ddc <_dtoa_r+0x6d4>
    4dbc:	980b883a 	mov	r5,r19
    4dc0:	800d883a 	mov	r6,r16
    4dc4:	880f883a 	mov	r7,r17
    4dc8:	9009883a 	mov	r4,r18
    4dcc:	000a4fc0 	call	a4fc <__eqdf2>
    4dd0:	1000171e 	bne	r2,zero,4e30 <_dtoa_r+0x728>
    4dd4:	a080004c 	andi	r2,r20,1
    4dd8:	10001526 	beq	r2,zero,4e30 <_dtoa_r+0x728>
    4ddc:	d8800d17 	ldw	r2,52(sp)
    4de0:	d8800415 	stw	r2,16(sp)
    4de4:	e009883a 	mov	r4,fp
    4de8:	213fffc4 	addi	r4,r4,-1
    4dec:	20c00007 	ldb	r3,0(r4)
    4df0:	00800e44 	movi	r2,57
    4df4:	1880081e 	bne	r3,r2,4e18 <_dtoa_r+0x710>
    4df8:	d8800517 	ldw	r2,20(sp)
    4dfc:	113ffa1e 	bne	r2,r4,4de8 <_dtoa_r+0x6e0>
    4e00:	d8c00417 	ldw	r3,16(sp)
    4e04:	d9800517 	ldw	r6,20(sp)
    4e08:	00800c04 	movi	r2,48
    4e0c:	18c00044 	addi	r3,r3,1
    4e10:	d8c00415 	stw	r3,16(sp)
    4e14:	30800005 	stb	r2,0(r6)
    4e18:	20800003 	ldbu	r2,0(r4)
    4e1c:	d8c00417 	ldw	r3,16(sp)
    4e20:	27000044 	addi	fp,r4,1
    4e24:	10800044 	addi	r2,r2,1
    4e28:	d8c00d15 	stw	r3,52(sp)
    4e2c:	20800005 	stb	r2,0(r4)
    4e30:	d9001617 	ldw	r4,88(sp)
    4e34:	d9400717 	ldw	r5,28(sp)
    4e38:	000715c0 	call	715c <_Bfree>
    4e3c:	e0000005 	stb	zero,0(fp)
    4e40:	d9800d17 	ldw	r6,52(sp)
    4e44:	d8c02717 	ldw	r3,156(sp)
    4e48:	d9002917 	ldw	r4,164(sp)
    4e4c:	30800044 	addi	r2,r6,1
    4e50:	18800015 	stw	r2,0(r3)
    4e54:	20029c26 	beq	r4,zero,58c8 <_dtoa_r+0x11c0>
    4e58:	d8c00517 	ldw	r3,20(sp)
    4e5c:	27000015 	stw	fp,0(r4)
    4e60:	003e5d06 	br	47d8 <_dtoa_r+0xd0>
    4e64:	d9800d17 	ldw	r6,52(sp)
    4e68:	00c00074 	movhi	r3,1
    4e6c:	18fcb204 	addi	r3,r3,-3384
    4e70:	d9001217 	ldw	r4,72(sp)
    4e74:	300490fa 	slli	r2,r6,3
    4e78:	d9401317 	ldw	r5,76(sp)
    4e7c:	10c5883a 	add	r2,r2,r3
    4e80:	12000017 	ldw	r8,0(r2)
    4e84:	12400117 	ldw	r9,4(r2)
    4e88:	400d883a 	mov	r6,r8
    4e8c:	480f883a 	mov	r7,r9
    4e90:	000a71c0 	call	a71c <__ltdf2>
    4e94:	1000030e 	bge	r2,zero,4ea4 <_dtoa_r+0x79c>
    4e98:	d8800d17 	ldw	r2,52(sp)
    4e9c:	10bfffc4 	addi	r2,r2,-1
    4ea0:	d8800d15 	stw	r2,52(sp)
    4ea4:	d8000c15 	stw	zero,48(sp)
    4ea8:	003ea806 	br	494c <_dtoa_r+0x244>
    4eac:	d9000b17 	ldw	r4,44(sp)
    4eb0:	202cc03a 	cmpne	r22,r4,zero
    4eb4:	b000c71e 	bne	r22,zero,51d4 <_dtoa_r+0xacc>
    4eb8:	dc001117 	ldw	r16,68(sp)
    4ebc:	dc801017 	ldw	r18,64(sp)
    4ec0:	0027883a 	mov	r19,zero
    4ec4:	04000b0e 	bge	zero,r16,4ef4 <_dtoa_r+0x7ec>
    4ec8:	d8c00a17 	ldw	r3,40(sp)
    4ecc:	00c0090e 	bge	zero,r3,4ef4 <_dtoa_r+0x7ec>
    4ed0:	8005883a 	mov	r2,r16
    4ed4:	1c011316 	blt	r3,r16,5324 <_dtoa_r+0xc1c>
    4ed8:	d9000a17 	ldw	r4,40(sp)
    4edc:	d9801117 	ldw	r6,68(sp)
    4ee0:	80a1c83a 	sub	r16,r16,r2
    4ee4:	2089c83a 	sub	r4,r4,r2
    4ee8:	308dc83a 	sub	r6,r6,r2
    4eec:	d9000a15 	stw	r4,40(sp)
    4ef0:	d9801115 	stw	r6,68(sp)
    4ef4:	d8801017 	ldw	r2,64(sp)
    4ef8:	0080150e 	bge	zero,r2,4f50 <_dtoa_r+0x848>
    4efc:	d8c00b17 	ldw	r3,44(sp)
    4f00:	1805003a 	cmpeq	r2,r3,zero
    4f04:	1001c91e 	bne	r2,zero,562c <_dtoa_r+0xf24>
    4f08:	04800e0e 	bge	zero,r18,4f44 <_dtoa_r+0x83c>
    4f0c:	d9001617 	ldw	r4,88(sp)
    4f10:	980b883a 	mov	r5,r19
    4f14:	900d883a 	mov	r6,r18
    4f18:	0007f100 	call	7f10 <__pow5mult>
    4f1c:	d9001617 	ldw	r4,88(sp)
    4f20:	d9800717 	ldw	r6,28(sp)
    4f24:	100b883a 	mov	r5,r2
    4f28:	1027883a 	mov	r19,r2
    4f2c:	0007bec0 	call	7bec <__multiply>
    4f30:	d9001617 	ldw	r4,88(sp)
    4f34:	d9400717 	ldw	r5,28(sp)
    4f38:	1023883a 	mov	r17,r2
    4f3c:	000715c0 	call	715c <_Bfree>
    4f40:	dc400715 	stw	r17,28(sp)
    4f44:	d9001017 	ldw	r4,64(sp)
    4f48:	248dc83a 	sub	r6,r4,r18
    4f4c:	30010e1e 	bne	r6,zero,5388 <_dtoa_r+0xc80>
    4f50:	d9001617 	ldw	r4,88(sp)
    4f54:	04400044 	movi	r17,1
    4f58:	880b883a 	mov	r5,r17
    4f5c:	0007dd40 	call	7dd4 <__i2b>
    4f60:	d9800917 	ldw	r6,36(sp)
    4f64:	1025883a 	mov	r18,r2
    4f68:	0180040e 	bge	zero,r6,4f7c <_dtoa_r+0x874>
    4f6c:	d9001617 	ldw	r4,88(sp)
    4f70:	100b883a 	mov	r5,r2
    4f74:	0007f100 	call	7f10 <__pow5mult>
    4f78:	1025883a 	mov	r18,r2
    4f7c:	d8801717 	ldw	r2,92(sp)
    4f80:	8880f30e 	bge	r17,r2,5350 <_dtoa_r+0xc48>
    4f84:	0023883a 	mov	r17,zero
    4f88:	d9800917 	ldw	r6,36(sp)
    4f8c:	30019e1e 	bne	r6,zero,5608 <_dtoa_r+0xf00>
    4f90:	00c00044 	movi	r3,1
    4f94:	d9000a17 	ldw	r4,40(sp)
    4f98:	20c5883a 	add	r2,r4,r3
    4f9c:	10c007cc 	andi	r3,r2,31
    4fa0:	1800841e 	bne	r3,zero,51b4 <_dtoa_r+0xaac>
    4fa4:	00800704 	movi	r2,28
    4fa8:	d9000a17 	ldw	r4,40(sp)
    4fac:	d9801117 	ldw	r6,68(sp)
    4fb0:	80a1883a 	add	r16,r16,r2
    4fb4:	2089883a 	add	r4,r4,r2
    4fb8:	308d883a 	add	r6,r6,r2
    4fbc:	d9000a15 	stw	r4,40(sp)
    4fc0:	d9801115 	stw	r6,68(sp)
    4fc4:	d8801117 	ldw	r2,68(sp)
    4fc8:	0080050e 	bge	zero,r2,4fe0 <_dtoa_r+0x8d8>
    4fcc:	d9400717 	ldw	r5,28(sp)
    4fd0:	d9001617 	ldw	r4,88(sp)
    4fd4:	100d883a 	mov	r6,r2
    4fd8:	0007aa00 	call	7aa0 <__lshift>
    4fdc:	d8800715 	stw	r2,28(sp)
    4fe0:	d8c00a17 	ldw	r3,40(sp)
    4fe4:	00c0050e 	bge	zero,r3,4ffc <_dtoa_r+0x8f4>
    4fe8:	d9001617 	ldw	r4,88(sp)
    4fec:	900b883a 	mov	r5,r18
    4ff0:	180d883a 	mov	r6,r3
    4ff4:	0007aa00 	call	7aa0 <__lshift>
    4ff8:	1025883a 	mov	r18,r2
    4ffc:	d9000c17 	ldw	r4,48(sp)
    5000:	2005003a 	cmpeq	r2,r4,zero
    5004:	10016f26 	beq	r2,zero,55c4 <_dtoa_r+0xebc>
    5008:	d9000f17 	ldw	r4,60(sp)
    500c:	0102170e 	bge	zero,r4,586c <_dtoa_r+0x1164>
    5010:	d9800b17 	ldw	r6,44(sp)
    5014:	3005003a 	cmpeq	r2,r6,zero
    5018:	1000881e 	bne	r2,zero,523c <_dtoa_r+0xb34>
    501c:	0400050e 	bge	zero,r16,5034 <_dtoa_r+0x92c>
    5020:	d9001617 	ldw	r4,88(sp)
    5024:	980b883a 	mov	r5,r19
    5028:	800d883a 	mov	r6,r16
    502c:	0007aa00 	call	7aa0 <__lshift>
    5030:	1027883a 	mov	r19,r2
    5034:	8804c03a 	cmpne	r2,r17,zero
    5038:	1002541e 	bne	r2,zero,598c <_dtoa_r+0x1284>
    503c:	980b883a 	mov	r5,r19
    5040:	dd800517 	ldw	r22,20(sp)
    5044:	dcc00615 	stw	r19,24(sp)
    5048:	a700004c 	andi	fp,r20,1
    504c:	2827883a 	mov	r19,r5
    5050:	d9000717 	ldw	r4,28(sp)
    5054:	900b883a 	mov	r5,r18
    5058:	00044f00 	call	44f0 <quorem>
    505c:	d9000717 	ldw	r4,28(sp)
    5060:	d9400617 	ldw	r5,24(sp)
    5064:	1023883a 	mov	r17,r2
    5068:	8dc00c04 	addi	r23,r17,48
    506c:	00072b80 	call	72b8 <__mcmp>
    5070:	d9001617 	ldw	r4,88(sp)
    5074:	900b883a 	mov	r5,r18
    5078:	980d883a 	mov	r6,r19
    507c:	1029883a 	mov	r20,r2
    5080:	00079140 	call	7914 <__mdiff>
    5084:	102b883a 	mov	r21,r2
    5088:	10800317 	ldw	r2,12(r2)
    508c:	1001281e 	bne	r2,zero,5530 <_dtoa_r+0xe28>
    5090:	d9000717 	ldw	r4,28(sp)
    5094:	a80b883a 	mov	r5,r21
    5098:	00072b80 	call	72b8 <__mcmp>
    509c:	d9001617 	ldw	r4,88(sp)
    50a0:	1021883a 	mov	r16,r2
    50a4:	a80b883a 	mov	r5,r21
    50a8:	000715c0 	call	715c <_Bfree>
    50ac:	8000041e 	bne	r16,zero,50c0 <_dtoa_r+0x9b8>
    50b0:	d8801717 	ldw	r2,92(sp)
    50b4:	1000021e 	bne	r2,zero,50c0 <_dtoa_r+0x9b8>
    50b8:	e004c03a 	cmpne	r2,fp,zero
    50bc:	10011726 	beq	r2,zero,551c <_dtoa_r+0xe14>
    50c0:	a0010616 	blt	r20,zero,54dc <_dtoa_r+0xdd4>
    50c4:	a000041e 	bne	r20,zero,50d8 <_dtoa_r+0x9d0>
    50c8:	d8c01717 	ldw	r3,92(sp)
    50cc:	1800021e 	bne	r3,zero,50d8 <_dtoa_r+0x9d0>
    50d0:	e004c03a 	cmpne	r2,fp,zero
    50d4:	10010126 	beq	r2,zero,54dc <_dtoa_r+0xdd4>
    50d8:	04023d16 	blt	zero,r16,59d0 <_dtoa_r+0x12c8>
    50dc:	b5c00005 	stb	r23,0(r22)
    50e0:	d9800517 	ldw	r6,20(sp)
    50e4:	d9000f17 	ldw	r4,60(sp)
    50e8:	b5800044 	addi	r22,r22,1
    50ec:	3105883a 	add	r2,r6,r4
    50f0:	b0806526 	beq	r22,r2,5288 <_dtoa_r+0xb80>
    50f4:	d9400717 	ldw	r5,28(sp)
    50f8:	d9001617 	ldw	r4,88(sp)
    50fc:	01800284 	movi	r6,10
    5100:	000f883a 	mov	r7,zero
    5104:	0007e100 	call	7e10 <__multadd>
    5108:	d8800715 	stw	r2,28(sp)
    510c:	d8800617 	ldw	r2,24(sp)
    5110:	14c10c26 	beq	r2,r19,5544 <_dtoa_r+0xe3c>
    5114:	d9400617 	ldw	r5,24(sp)
    5118:	d9001617 	ldw	r4,88(sp)
    511c:	01800284 	movi	r6,10
    5120:	000f883a 	mov	r7,zero
    5124:	0007e100 	call	7e10 <__multadd>
    5128:	d9001617 	ldw	r4,88(sp)
    512c:	980b883a 	mov	r5,r19
    5130:	01800284 	movi	r6,10
    5134:	000f883a 	mov	r7,zero
    5138:	d8800615 	stw	r2,24(sp)
    513c:	0007e100 	call	7e10 <__multadd>
    5140:	1027883a 	mov	r19,r2
    5144:	003fc206 	br	5050 <_dtoa_r+0x948>
    5148:	2445c83a 	sub	r2,r4,r17
    514c:	a088983a 	sll	r4,r20,r2
    5150:	003e4b06 	br	4a80 <_dtoa_r+0x378>
    5154:	01bfffc4 	movi	r6,-1
    5158:	00800044 	movi	r2,1
    515c:	d9800e15 	stw	r6,56(sp)
    5160:	d9800f15 	stw	r6,60(sp)
    5164:	d8800b15 	stw	r2,44(sp)
    5168:	d8c01617 	ldw	r3,88(sp)
    516c:	008005c4 	movi	r2,23
    5170:	18001115 	stw	zero,68(r3)
    5174:	1580082e 	bgeu	r2,r22,5198 <_dtoa_r+0xa90>
    5178:	00c00104 	movi	r3,4
    517c:	0009883a 	mov	r4,zero
    5180:	18c7883a 	add	r3,r3,r3
    5184:	18800504 	addi	r2,r3,20
    5188:	21000044 	addi	r4,r4,1
    518c:	b0bffc2e 	bgeu	r22,r2,5180 <_dtoa_r+0xa78>
    5190:	d9801617 	ldw	r6,88(sp)
    5194:	31001115 	stw	r4,68(r6)
    5198:	dc000f17 	ldw	r16,60(sp)
    519c:	003e4b06 	br	4acc <_dtoa_r+0x3c4>
    51a0:	d9801717 	ldw	r6,92(sp)
    51a4:	0023883a 	mov	r17,zero
    51a8:	31bfff04 	addi	r6,r6,-4
    51ac:	d9801715 	stw	r6,92(sp)
    51b0:	003df806 	br	4994 <_dtoa_r+0x28c>
    51b4:	00800804 	movi	r2,32
    51b8:	10c9c83a 	sub	r4,r2,r3
    51bc:	00c00104 	movi	r3,4
    51c0:	19005a16 	blt	r3,r4,532c <_dtoa_r+0xc24>
    51c4:	008000c4 	movi	r2,3
    51c8:	113f7e16 	blt	r2,r4,4fc4 <_dtoa_r+0x8bc>
    51cc:	20800704 	addi	r2,r4,28
    51d0:	003f7506 	br	4fa8 <_dtoa_r+0x8a0>
    51d4:	d9801717 	ldw	r6,92(sp)
    51d8:	00800044 	movi	r2,1
    51dc:	1180a10e 	bge	r2,r6,5464 <_dtoa_r+0xd5c>
    51e0:	d9800f17 	ldw	r6,60(sp)
    51e4:	d8c01017 	ldw	r3,64(sp)
    51e8:	30bfffc4 	addi	r2,r6,-1
    51ec:	1881c616 	blt	r3,r2,5908 <_dtoa_r+0x1200>
    51f0:	18a5c83a 	sub	r18,r3,r2
    51f4:	d8800f17 	ldw	r2,60(sp)
    51f8:	10026216 	blt	r2,zero,5b84 <_dtoa_r+0x147c>
    51fc:	dc001117 	ldw	r16,68(sp)
    5200:	1007883a 	mov	r3,r2
    5204:	d9800a17 	ldw	r6,40(sp)
    5208:	d8801117 	ldw	r2,68(sp)
    520c:	d9001617 	ldw	r4,88(sp)
    5210:	30cd883a 	add	r6,r6,r3
    5214:	10c5883a 	add	r2,r2,r3
    5218:	01400044 	movi	r5,1
    521c:	d9800a15 	stw	r6,40(sp)
    5220:	d8801115 	stw	r2,68(sp)
    5224:	0007dd40 	call	7dd4 <__i2b>
    5228:	1027883a 	mov	r19,r2
    522c:	003f2506 	br	4ec4 <_dtoa_r+0x7bc>
    5230:	00c00074 	movhi	r3,1
    5234:	18fc9404 	addi	r3,r3,-3504
    5238:	003d6706 	br	47d8 <_dtoa_r+0xd0>
    523c:	dd800517 	ldw	r22,20(sp)
    5240:	04000044 	movi	r16,1
    5244:	00000706 	br	5264 <_dtoa_r+0xb5c>
    5248:	d9400717 	ldw	r5,28(sp)
    524c:	d9001617 	ldw	r4,88(sp)
    5250:	01800284 	movi	r6,10
    5254:	000f883a 	mov	r7,zero
    5258:	0007e100 	call	7e10 <__multadd>
    525c:	d8800715 	stw	r2,28(sp)
    5260:	84000044 	addi	r16,r16,1
    5264:	d9000717 	ldw	r4,28(sp)
    5268:	900b883a 	mov	r5,r18
    526c:	00044f00 	call	44f0 <quorem>
    5270:	15c00c04 	addi	r23,r2,48
    5274:	b5c00005 	stb	r23,0(r22)
    5278:	d8c00f17 	ldw	r3,60(sp)
    527c:	b5800044 	addi	r22,r22,1
    5280:	80fff116 	blt	r16,r3,5248 <_dtoa_r+0xb40>
    5284:	d8000615 	stw	zero,24(sp)
    5288:	d9400717 	ldw	r5,28(sp)
    528c:	d9001617 	ldw	r4,88(sp)
    5290:	01800044 	movi	r6,1
    5294:	0007aa00 	call	7aa0 <__lshift>
    5298:	1009883a 	mov	r4,r2
    529c:	900b883a 	mov	r5,r18
    52a0:	d8800715 	stw	r2,28(sp)
    52a4:	00072b80 	call	72b8 <__mcmp>
    52a8:	00803c0e 	bge	zero,r2,539c <_dtoa_r+0xc94>
    52ac:	b009883a 	mov	r4,r22
    52b0:	213fffc4 	addi	r4,r4,-1
    52b4:	21400003 	ldbu	r5,0(r4)
    52b8:	00800e44 	movi	r2,57
    52bc:	28c03fcc 	andi	r3,r5,255
    52c0:	18c0201c 	xori	r3,r3,128
    52c4:	18ffe004 	addi	r3,r3,-128
    52c8:	1881981e 	bne	r3,r2,592c <_dtoa_r+0x1224>
    52cc:	d9800517 	ldw	r6,20(sp)
    52d0:	21bff71e 	bne	r4,r6,52b0 <_dtoa_r+0xba8>
    52d4:	d8800d17 	ldw	r2,52(sp)
    52d8:	37000044 	addi	fp,r6,1
    52dc:	10800044 	addi	r2,r2,1
    52e0:	d8800d15 	stw	r2,52(sp)
    52e4:	00800c44 	movi	r2,49
    52e8:	30800005 	stb	r2,0(r6)
    52ec:	d9001617 	ldw	r4,88(sp)
    52f0:	900b883a 	mov	r5,r18
    52f4:	000715c0 	call	715c <_Bfree>
    52f8:	983ecd26 	beq	r19,zero,4e30 <_dtoa_r+0x728>
    52fc:	d8c00617 	ldw	r3,24(sp)
    5300:	18000426 	beq	r3,zero,5314 <_dtoa_r+0xc0c>
    5304:	1cc00326 	beq	r3,r19,5314 <_dtoa_r+0xc0c>
    5308:	d9001617 	ldw	r4,88(sp)
    530c:	180b883a 	mov	r5,r3
    5310:	000715c0 	call	715c <_Bfree>
    5314:	d9001617 	ldw	r4,88(sp)
    5318:	980b883a 	mov	r5,r19
    531c:	000715c0 	call	715c <_Bfree>
    5320:	003ec306 	br	4e30 <_dtoa_r+0x728>
    5324:	1805883a 	mov	r2,r3
    5328:	003eeb06 	br	4ed8 <_dtoa_r+0x7d0>
    532c:	d9800a17 	ldw	r6,40(sp)
    5330:	d8c01117 	ldw	r3,68(sp)
    5334:	20bfff04 	addi	r2,r4,-4
    5338:	308d883a 	add	r6,r6,r2
    533c:	1887883a 	add	r3,r3,r2
    5340:	80a1883a 	add	r16,r16,r2
    5344:	d9800a15 	stw	r6,40(sp)
    5348:	d8c01115 	stw	r3,68(sp)
    534c:	003f1d06 	br	4fc4 <_dtoa_r+0x8bc>
    5350:	a03f0c1e 	bne	r20,zero,4f84 <_dtoa_r+0x87c>
    5354:	00800434 	movhi	r2,16
    5358:	10bfffc4 	addi	r2,r2,-1
    535c:	a884703a 	and	r2,r21,r2
    5360:	103f081e 	bne	r2,zero,4f84 <_dtoa_r+0x87c>
    5364:	a89ffc2c 	andhi	r2,r21,32752
    5368:	103f0626 	beq	r2,zero,4f84 <_dtoa_r+0x87c>
    536c:	d8c01117 	ldw	r3,68(sp)
    5370:	d9000a17 	ldw	r4,40(sp)
    5374:	18c00044 	addi	r3,r3,1
    5378:	21000044 	addi	r4,r4,1
    537c:	d8c01115 	stw	r3,68(sp)
    5380:	d9000a15 	stw	r4,40(sp)
    5384:	003f0006 	br	4f88 <_dtoa_r+0x880>
    5388:	d9400717 	ldw	r5,28(sp)
    538c:	d9001617 	ldw	r4,88(sp)
    5390:	0007f100 	call	7f10 <__pow5mult>
    5394:	d8800715 	stw	r2,28(sp)
    5398:	003eed06 	br	4f50 <_dtoa_r+0x848>
    539c:	1000021e 	bne	r2,zero,53a8 <_dtoa_r+0xca0>
    53a0:	b880004c 	andi	r2,r23,1
    53a4:	103fc11e 	bne	r2,zero,52ac <_dtoa_r+0xba4>
    53a8:	b5bfffc4 	addi	r22,r22,-1
    53ac:	b0c00007 	ldb	r3,0(r22)
    53b0:	00800c04 	movi	r2,48
    53b4:	18bffc26 	beq	r3,r2,53a8 <_dtoa_r+0xca0>
    53b8:	b7000044 	addi	fp,r22,1
    53bc:	003fcb06 	br	52ec <_dtoa_r+0xbe4>
    53c0:	d9800d17 	ldw	r6,52(sp)
    53c4:	018fc83a 	sub	r7,zero,r6
    53c8:	3801f726 	beq	r7,zero,5ba8 <_dtoa_r+0x14a0>
    53cc:	398003cc 	andi	r6,r7,15
    53d0:	300c90fa 	slli	r6,r6,3
    53d4:	01400074 	movhi	r5,1
    53d8:	297cb204 	addi	r5,r5,-3384
    53dc:	d9001217 	ldw	r4,72(sp)
    53e0:	314d883a 	add	r6,r6,r5
    53e4:	30c00117 	ldw	r3,4(r6)
    53e8:	30800017 	ldw	r2,0(r6)
    53ec:	d9401317 	ldw	r5,76(sp)
    53f0:	3821d13a 	srai	r16,r7,4
    53f4:	100d883a 	mov	r6,r2
    53f8:	180f883a 	mov	r7,r3
    53fc:	0009ee00 	call	9ee0 <__muldf3>
    5400:	1011883a 	mov	r8,r2
    5404:	1813883a 	mov	r9,r3
    5408:	1029883a 	mov	r20,r2
    540c:	182b883a 	mov	r21,r3
    5410:	8001e526 	beq	r16,zero,5ba8 <_dtoa_r+0x14a0>
    5414:	05800084 	movi	r22,2
    5418:	04400074 	movhi	r17,1
    541c:	8c7ce404 	addi	r17,r17,-3184
    5420:	8080004c 	andi	r2,r16,1
    5424:	1005003a 	cmpeq	r2,r2,zero
    5428:	1000081e 	bne	r2,zero,544c <_dtoa_r+0xd44>
    542c:	89800017 	ldw	r6,0(r17)
    5430:	89c00117 	ldw	r7,4(r17)
    5434:	480b883a 	mov	r5,r9
    5438:	4009883a 	mov	r4,r8
    543c:	0009ee00 	call	9ee0 <__muldf3>
    5440:	1011883a 	mov	r8,r2
    5444:	b5800044 	addi	r22,r22,1
    5448:	1813883a 	mov	r9,r3
    544c:	8021d07a 	srai	r16,r16,1
    5450:	8c400204 	addi	r17,r17,8
    5454:	803ff21e 	bne	r16,zero,5420 <_dtoa_r+0xd18>
    5458:	4029883a 	mov	r20,r8
    545c:	482b883a 	mov	r21,r9
    5460:	003dca06 	br	4b8c <_dtoa_r+0x484>
    5464:	d9000817 	ldw	r4,32(sp)
    5468:	2005003a 	cmpeq	r2,r4,zero
    546c:	1001f61e 	bne	r2,zero,5c48 <_dtoa_r+0x1540>
    5470:	dc001117 	ldw	r16,68(sp)
    5474:	dc801017 	ldw	r18,64(sp)
    5478:	18c10cc4 	addi	r3,r3,1075
    547c:	003f6106 	br	5204 <_dtoa_r+0xafc>
    5480:	d8000b15 	stw	zero,44(sp)
    5484:	d9802617 	ldw	r6,152(sp)
    5488:	d8c00d17 	ldw	r3,52(sp)
    548c:	30800044 	addi	r2,r6,1
    5490:	18ad883a 	add	r22,r3,r2
    5494:	b13fffc4 	addi	r4,r22,-1
    5498:	d9000e15 	stw	r4,56(sp)
    549c:	0581f60e 	bge	zero,r22,5c78 <_dtoa_r+0x1570>
    54a0:	dd800f15 	stw	r22,60(sp)
    54a4:	003f3006 	br	5168 <_dtoa_r+0xa60>
    54a8:	d8000b15 	stw	zero,44(sp)
    54ac:	d9002617 	ldw	r4,152(sp)
    54b0:	0101eb0e 	bge	zero,r4,5c60 <_dtoa_r+0x1558>
    54b4:	202d883a 	mov	r22,r4
    54b8:	d9000e15 	stw	r4,56(sp)
    54bc:	d9000f15 	stw	r4,60(sp)
    54c0:	003f2906 	br	5168 <_dtoa_r+0xa60>
    54c4:	01800044 	movi	r6,1
    54c8:	d9800b15 	stw	r6,44(sp)
    54cc:	003ff706 	br	54ac <_dtoa_r+0xda4>
    54d0:	01000044 	movi	r4,1
    54d4:	d9000b15 	stw	r4,44(sp)
    54d8:	003fea06 	br	5484 <_dtoa_r+0xd7c>
    54dc:	04000c0e 	bge	zero,r16,5510 <_dtoa_r+0xe08>
    54e0:	d9400717 	ldw	r5,28(sp)
    54e4:	d9001617 	ldw	r4,88(sp)
    54e8:	01800044 	movi	r6,1
    54ec:	0007aa00 	call	7aa0 <__lshift>
    54f0:	1009883a 	mov	r4,r2
    54f4:	900b883a 	mov	r5,r18
    54f8:	d8800715 	stw	r2,28(sp)
    54fc:	00072b80 	call	72b8 <__mcmp>
    5500:	0081e00e 	bge	zero,r2,5c84 <_dtoa_r+0x157c>
    5504:	bdc00044 	addi	r23,r23,1
    5508:	00800e84 	movi	r2,58
    550c:	b881a226 	beq	r23,r2,5b98 <_dtoa_r+0x1490>
    5510:	b7000044 	addi	fp,r22,1
    5514:	b5c00005 	stb	r23,0(r22)
    5518:	003f7406 	br	52ec <_dtoa_r+0xbe4>
    551c:	00800e44 	movi	r2,57
    5520:	b8819d26 	beq	r23,r2,5b98 <_dtoa_r+0x1490>
    5524:	053ffa0e 	bge	zero,r20,5510 <_dtoa_r+0xe08>
    5528:	8dc00c44 	addi	r23,r17,49
    552c:	003ff806 	br	5510 <_dtoa_r+0xe08>
    5530:	d9001617 	ldw	r4,88(sp)
    5534:	a80b883a 	mov	r5,r21
    5538:	04000044 	movi	r16,1
    553c:	000715c0 	call	715c <_Bfree>
    5540:	003edf06 	br	50c0 <_dtoa_r+0x9b8>
    5544:	d9001617 	ldw	r4,88(sp)
    5548:	980b883a 	mov	r5,r19
    554c:	01800284 	movi	r6,10
    5550:	000f883a 	mov	r7,zero
    5554:	0007e100 	call	7e10 <__multadd>
    5558:	1027883a 	mov	r19,r2
    555c:	d8800615 	stw	r2,24(sp)
    5560:	003ebb06 	br	5050 <_dtoa_r+0x948>
    5564:	d9801117 	ldw	r6,68(sp)
    5568:	d8800d17 	ldw	r2,52(sp)
    556c:	d8000915 	stw	zero,36(sp)
    5570:	308dc83a 	sub	r6,r6,r2
    5574:	0087c83a 	sub	r3,zero,r2
    5578:	d9801115 	stw	r6,68(sp)
    557c:	d8c01015 	stw	r3,64(sp)
    5580:	003cfe06 	br	497c <_dtoa_r+0x274>
    5584:	018dc83a 	sub	r6,zero,r6
    5588:	d9801115 	stw	r6,68(sp)
    558c:	d8000a15 	stw	zero,40(sp)
    5590:	003cf306 	br	4960 <_dtoa_r+0x258>
    5594:	d9000d17 	ldw	r4,52(sp)
    5598:	000a7a40 	call	a7a4 <__floatsidf>
    559c:	880b883a 	mov	r5,r17
    55a0:	8009883a 	mov	r4,r16
    55a4:	180f883a 	mov	r7,r3
    55a8:	100d883a 	mov	r6,r2
    55ac:	000a5840 	call	a584 <__nedf2>
    55b0:	103ce126 	beq	r2,zero,4938 <_dtoa_r+0x230>
    55b4:	d9800d17 	ldw	r6,52(sp)
    55b8:	31bfffc4 	addi	r6,r6,-1
    55bc:	d9800d15 	stw	r6,52(sp)
    55c0:	003cdd06 	br	4938 <_dtoa_r+0x230>
    55c4:	d9000717 	ldw	r4,28(sp)
    55c8:	900b883a 	mov	r5,r18
    55cc:	00072b80 	call	72b8 <__mcmp>
    55d0:	103e8d0e 	bge	r2,zero,5008 <_dtoa_r+0x900>
    55d4:	d9400717 	ldw	r5,28(sp)
    55d8:	d9001617 	ldw	r4,88(sp)
    55dc:	01800284 	movi	r6,10
    55e0:	000f883a 	mov	r7,zero
    55e4:	0007e100 	call	7e10 <__multadd>
    55e8:	d9800d17 	ldw	r6,52(sp)
    55ec:	d8800715 	stw	r2,28(sp)
    55f0:	31bfffc4 	addi	r6,r6,-1
    55f4:	d9800d15 	stw	r6,52(sp)
    55f8:	b001a71e 	bne	r22,zero,5c98 <_dtoa_r+0x1590>
    55fc:	d8800e17 	ldw	r2,56(sp)
    5600:	d8800f15 	stw	r2,60(sp)
    5604:	003e8006 	br	5008 <_dtoa_r+0x900>
    5608:	90800417 	ldw	r2,16(r18)
    560c:	1085883a 	add	r2,r2,r2
    5610:	1085883a 	add	r2,r2,r2
    5614:	1485883a 	add	r2,r2,r18
    5618:	11000417 	ldw	r4,16(r2)
    561c:	00071840 	call	7184 <__hi0bits>
    5620:	00c00804 	movi	r3,32
    5624:	1887c83a 	sub	r3,r3,r2
    5628:	003e5a06 	br	4f94 <_dtoa_r+0x88c>
    562c:	d9400717 	ldw	r5,28(sp)
    5630:	d9801017 	ldw	r6,64(sp)
    5634:	d9001617 	ldw	r4,88(sp)
    5638:	0007f100 	call	7f10 <__pow5mult>
    563c:	d8800715 	stw	r2,28(sp)
    5640:	003e4306 	br	4f50 <_dtoa_r+0x848>
    5644:	d9800f17 	ldw	r6,60(sp)
    5648:	d8800d17 	ldw	r2,52(sp)
    564c:	d9800315 	stw	r6,12(sp)
    5650:	d8800415 	stw	r2,16(sp)
    5654:	d8c00b17 	ldw	r3,44(sp)
    5658:	1805003a 	cmpeq	r2,r3,zero
    565c:	1000e21e 	bne	r2,zero,59e8 <_dtoa_r+0x12e0>
    5660:	d9000317 	ldw	r4,12(sp)
    5664:	0005883a 	mov	r2,zero
    5668:	00cff834 	movhi	r3,16352
    566c:	200c90fa 	slli	r6,r4,3
    5670:	01000074 	movhi	r4,1
    5674:	213cb204 	addi	r4,r4,-3384
    5678:	180b883a 	mov	r5,r3
    567c:	310d883a 	add	r6,r6,r4
    5680:	327fff17 	ldw	r9,-4(r6)
    5684:	323ffe17 	ldw	r8,-8(r6)
    5688:	1009883a 	mov	r4,r2
    568c:	480f883a 	mov	r7,r9
    5690:	400d883a 	mov	r6,r8
    5694:	000a2a40 	call	a2a4 <__divdf3>
    5698:	180b883a 	mov	r5,r3
    569c:	b00d883a 	mov	r6,r22
    56a0:	b80f883a 	mov	r7,r23
    56a4:	1009883a 	mov	r4,r2
    56a8:	0009dec0 	call	9dec <__subdf3>
    56ac:	a80b883a 	mov	r5,r21
    56b0:	a009883a 	mov	r4,r20
    56b4:	d8c01915 	stw	r3,100(sp)
    56b8:	d8801815 	stw	r2,96(sp)
    56bc:	000a89c0 	call	a89c <__fixdfsi>
    56c0:	1009883a 	mov	r4,r2
    56c4:	1027883a 	mov	r19,r2
    56c8:	000a7a40 	call	a7a4 <__floatsidf>
    56cc:	a80b883a 	mov	r5,r21
    56d0:	a009883a 	mov	r4,r20
    56d4:	180f883a 	mov	r7,r3
    56d8:	100d883a 	mov	r6,r2
    56dc:	0009dec0 	call	9dec <__subdf3>
    56e0:	d9801817 	ldw	r6,96(sp)
    56e4:	1823883a 	mov	r17,r3
    56e8:	d8801415 	stw	r2,80(sp)
    56ec:	302d883a 	mov	r22,r6
    56f0:	d9800517 	ldw	r6,20(sp)
    56f4:	9cc00c04 	addi	r19,r19,48
    56f8:	dc401515 	stw	r17,84(sp)
    56fc:	d8c01917 	ldw	r3,100(sp)
    5700:	34c00005 	stb	r19,0(r6)
    5704:	d8800517 	ldw	r2,20(sp)
    5708:	d9401917 	ldw	r5,100(sp)
    570c:	d9801417 	ldw	r6,80(sp)
    5710:	b009883a 	mov	r4,r22
    5714:	880f883a 	mov	r7,r17
    5718:	182f883a 	mov	r23,r3
    571c:	17000044 	addi	fp,r2,1
    5720:	000a60c0 	call	a60c <__gtdf2>
    5724:	00804e16 	blt	zero,r2,5860 <_dtoa_r+0x1158>
    5728:	d9801417 	ldw	r6,80(sp)
    572c:	0005883a 	mov	r2,zero
    5730:	00cffc34 	movhi	r3,16368
    5734:	180b883a 	mov	r5,r3
    5738:	880f883a 	mov	r7,r17
    573c:	1009883a 	mov	r4,r2
    5740:	0009dec0 	call	9dec <__subdf3>
    5744:	d9401917 	ldw	r5,100(sp)
    5748:	180f883a 	mov	r7,r3
    574c:	b009883a 	mov	r4,r22
    5750:	100d883a 	mov	r6,r2
    5754:	000a60c0 	call	a60c <__gtdf2>
    5758:	00bda216 	blt	zero,r2,4de4 <_dtoa_r+0x6dc>
    575c:	d8c00317 	ldw	r3,12(sp)
    5760:	00800044 	movi	r2,1
    5764:	10c01216 	blt	r2,r3,57b0 <_dtoa_r+0x10a8>
    5768:	003d4506 	br	4c80 <_dtoa_r+0x578>
    576c:	d9801417 	ldw	r6,80(sp)
    5770:	0005883a 	mov	r2,zero
    5774:	00cffc34 	movhi	r3,16368
    5778:	180b883a 	mov	r5,r3
    577c:	880f883a 	mov	r7,r17
    5780:	1009883a 	mov	r4,r2
    5784:	0009dec0 	call	9dec <__subdf3>
    5788:	d9c01b17 	ldw	r7,108(sp)
    578c:	180b883a 	mov	r5,r3
    5790:	1009883a 	mov	r4,r2
    5794:	b00d883a 	mov	r6,r22
    5798:	000a71c0 	call	a71c <__ltdf2>
    579c:	103d9116 	blt	r2,zero,4de4 <_dtoa_r+0x6dc>
    57a0:	d9800517 	ldw	r6,20(sp)
    57a4:	d9000317 	ldw	r4,12(sp)
    57a8:	3105883a 	add	r2,r6,r4
    57ac:	e0bd3426 	beq	fp,r2,4c80 <_dtoa_r+0x578>
    57b0:	04500934 	movhi	r17,16420
    57b4:	0021883a 	mov	r16,zero
    57b8:	b80b883a 	mov	r5,r23
    57bc:	b009883a 	mov	r4,r22
    57c0:	800d883a 	mov	r6,r16
    57c4:	880f883a 	mov	r7,r17
    57c8:	0009ee00 	call	9ee0 <__muldf3>
    57cc:	d9401517 	ldw	r5,84(sp)
    57d0:	d9001417 	ldw	r4,80(sp)
    57d4:	880f883a 	mov	r7,r17
    57d8:	000d883a 	mov	r6,zero
    57dc:	d8801a15 	stw	r2,104(sp)
    57e0:	d8c01b15 	stw	r3,108(sp)
    57e4:	0009ee00 	call	9ee0 <__muldf3>
    57e8:	180b883a 	mov	r5,r3
    57ec:	1009883a 	mov	r4,r2
    57f0:	1823883a 	mov	r17,r3
    57f4:	1021883a 	mov	r16,r2
    57f8:	000a89c0 	call	a89c <__fixdfsi>
    57fc:	1009883a 	mov	r4,r2
    5800:	102b883a 	mov	r21,r2
    5804:	000a7a40 	call	a7a4 <__floatsidf>
    5808:	880b883a 	mov	r5,r17
    580c:	8009883a 	mov	r4,r16
    5810:	180f883a 	mov	r7,r3
    5814:	100d883a 	mov	r6,r2
    5818:	0009dec0 	call	9dec <__subdf3>
    581c:	1021883a 	mov	r16,r2
    5820:	d9001b17 	ldw	r4,108(sp)
    5824:	1823883a 	mov	r17,r3
    5828:	dc001415 	stw	r16,80(sp)
    582c:	ad400c04 	addi	r21,r21,48
    5830:	dc401515 	stw	r17,84(sp)
    5834:	d8801a17 	ldw	r2,104(sp)
    5838:	e5400005 	stb	r21,0(fp)
    583c:	202f883a 	mov	r23,r4
    5840:	d9c01b17 	ldw	r7,108(sp)
    5844:	d9001417 	ldw	r4,80(sp)
    5848:	880b883a 	mov	r5,r17
    584c:	100d883a 	mov	r6,r2
    5850:	102d883a 	mov	r22,r2
    5854:	e7000044 	addi	fp,fp,1
    5858:	000a71c0 	call	a71c <__ltdf2>
    585c:	103fc30e 	bge	r2,zero,576c <_dtoa_r+0x1064>
    5860:	d9000417 	ldw	r4,16(sp)
    5864:	d9000d15 	stw	r4,52(sp)
    5868:	003d7106 	br	4e30 <_dtoa_r+0x728>
    586c:	d9801717 	ldw	r6,92(sp)
    5870:	00800084 	movi	r2,2
    5874:	11bde60e 	bge	r2,r6,5010 <_dtoa_r+0x908>
    5878:	203cfb1e 	bne	r4,zero,4c68 <_dtoa_r+0x560>
    587c:	d9001617 	ldw	r4,88(sp)
    5880:	900b883a 	mov	r5,r18
    5884:	01800144 	movi	r6,5
    5888:	000f883a 	mov	r7,zero
    588c:	0007e100 	call	7e10 <__multadd>
    5890:	d9000717 	ldw	r4,28(sp)
    5894:	100b883a 	mov	r5,r2
    5898:	1025883a 	mov	r18,r2
    589c:	00072b80 	call	72b8 <__mcmp>
    58a0:	00bcf10e 	bge	zero,r2,4c68 <_dtoa_r+0x560>
    58a4:	d8c00d17 	ldw	r3,52(sp)
    58a8:	d9000517 	ldw	r4,20(sp)
    58ac:	d8000615 	stw	zero,24(sp)
    58b0:	18c00044 	addi	r3,r3,1
    58b4:	d8c00d15 	stw	r3,52(sp)
    58b8:	00800c44 	movi	r2,49
    58bc:	27000044 	addi	fp,r4,1
    58c0:	20800005 	stb	r2,0(r4)
    58c4:	003e8906 	br	52ec <_dtoa_r+0xbe4>
    58c8:	d8c00517 	ldw	r3,20(sp)
    58cc:	003bc206 	br	47d8 <_dtoa_r+0xd0>
    58d0:	01800074 	movhi	r6,1
    58d4:	31bce404 	addi	r6,r6,-3184
    58d8:	30c00917 	ldw	r3,36(r6)
    58dc:	30800817 	ldw	r2,32(r6)
    58e0:	d9001217 	ldw	r4,72(sp)
    58e4:	d9401317 	ldw	r5,76(sp)
    58e8:	180f883a 	mov	r7,r3
    58ec:	100d883a 	mov	r6,r2
    58f0:	000a2a40 	call	a2a4 <__divdf3>
    58f4:	948003cc 	andi	r18,r18,15
    58f8:	058000c4 	movi	r22,3
    58fc:	1029883a 	mov	r20,r2
    5900:	182b883a 	mov	r21,r3
    5904:	003c8906 	br	4b2c <_dtoa_r+0x424>
    5908:	d9001017 	ldw	r4,64(sp)
    590c:	d9800917 	ldw	r6,36(sp)
    5910:	0025883a 	mov	r18,zero
    5914:	1105c83a 	sub	r2,r2,r4
    5918:	2089883a 	add	r4,r4,r2
    591c:	308d883a 	add	r6,r6,r2
    5920:	d9001015 	stw	r4,64(sp)
    5924:	d9800915 	stw	r6,36(sp)
    5928:	003e3206 	br	51f4 <_dtoa_r+0xaec>
    592c:	28800044 	addi	r2,r5,1
    5930:	27000044 	addi	fp,r4,1
    5934:	20800005 	stb	r2,0(r4)
    5938:	003e6c06 	br	52ec <_dtoa_r+0xbe4>
    593c:	d8800f17 	ldw	r2,60(sp)
    5940:	00bce016 	blt	zero,r2,4cc4 <_dtoa_r+0x5bc>
    5944:	d9800f17 	ldw	r6,60(sp)
    5948:	303cc51e 	bne	r6,zero,4c60 <_dtoa_r+0x558>
    594c:	0005883a 	mov	r2,zero
    5950:	00d00534 	movhi	r3,16404
    5954:	980b883a 	mov	r5,r19
    5958:	180f883a 	mov	r7,r3
    595c:	9009883a 	mov	r4,r18
    5960:	100d883a 	mov	r6,r2
    5964:	0009ee00 	call	9ee0 <__muldf3>
    5968:	180b883a 	mov	r5,r3
    596c:	a80f883a 	mov	r7,r21
    5970:	1009883a 	mov	r4,r2
    5974:	a00d883a 	mov	r6,r20
    5978:	000a6940 	call	a694 <__gedf2>
    597c:	103cb80e 	bge	r2,zero,4c60 <_dtoa_r+0x558>
    5980:	0027883a 	mov	r19,zero
    5984:	0025883a 	mov	r18,zero
    5988:	003fc606 	br	58a4 <_dtoa_r+0x119c>
    598c:	99400117 	ldw	r5,4(r19)
    5990:	d9001617 	ldw	r4,88(sp)
    5994:	00076dc0 	call	76dc <_Balloc>
    5998:	99800417 	ldw	r6,16(r19)
    599c:	11000304 	addi	r4,r2,12
    59a0:	99400304 	addi	r5,r19,12
    59a4:	318d883a 	add	r6,r6,r6
    59a8:	318d883a 	add	r6,r6,r6
    59ac:	31800204 	addi	r6,r6,8
    59b0:	1023883a 	mov	r17,r2
    59b4:	0006f440 	call	6f44 <memcpy>
    59b8:	d9001617 	ldw	r4,88(sp)
    59bc:	880b883a 	mov	r5,r17
    59c0:	01800044 	movi	r6,1
    59c4:	0007aa00 	call	7aa0 <__lshift>
    59c8:	100b883a 	mov	r5,r2
    59cc:	003d9c06 	br	5040 <_dtoa_r+0x938>
    59d0:	00800e44 	movi	r2,57
    59d4:	b8807026 	beq	r23,r2,5b98 <_dtoa_r+0x1490>
    59d8:	b8800044 	addi	r2,r23,1
    59dc:	b7000044 	addi	fp,r22,1
    59e0:	b0800005 	stb	r2,0(r22)
    59e4:	003e4106 	br	52ec <_dtoa_r+0xbe4>
    59e8:	d8800317 	ldw	r2,12(sp)
    59ec:	01800074 	movhi	r6,1
    59f0:	31bcb204 	addi	r6,r6,-3384
    59f4:	b009883a 	mov	r4,r22
    59f8:	100e90fa 	slli	r7,r2,3
    59fc:	b80b883a 	mov	r5,r23
    5a00:	398f883a 	add	r7,r7,r6
    5a04:	38bffe17 	ldw	r2,-8(r7)
    5a08:	d9800517 	ldw	r6,20(sp)
    5a0c:	38ffff17 	ldw	r3,-4(r7)
    5a10:	37000044 	addi	fp,r6,1
    5a14:	180f883a 	mov	r7,r3
    5a18:	100d883a 	mov	r6,r2
    5a1c:	0009ee00 	call	9ee0 <__muldf3>
    5a20:	a80b883a 	mov	r5,r21
    5a24:	a009883a 	mov	r4,r20
    5a28:	182f883a 	mov	r23,r3
    5a2c:	102d883a 	mov	r22,r2
    5a30:	000a89c0 	call	a89c <__fixdfsi>
    5a34:	1009883a 	mov	r4,r2
    5a38:	1027883a 	mov	r19,r2
    5a3c:	000a7a40 	call	a7a4 <__floatsidf>
    5a40:	a80b883a 	mov	r5,r21
    5a44:	a009883a 	mov	r4,r20
    5a48:	180f883a 	mov	r7,r3
    5a4c:	100d883a 	mov	r6,r2
    5a50:	0009dec0 	call	9dec <__subdf3>
    5a54:	180b883a 	mov	r5,r3
    5a58:	d8c00517 	ldw	r3,20(sp)
    5a5c:	9cc00c04 	addi	r19,r19,48
    5a60:	1009883a 	mov	r4,r2
    5a64:	1cc00005 	stb	r19,0(r3)
    5a68:	2021883a 	mov	r16,r4
    5a6c:	d9000317 	ldw	r4,12(sp)
    5a70:	00800044 	movi	r2,1
    5a74:	2823883a 	mov	r17,r5
    5a78:	20802226 	beq	r4,r2,5b04 <_dtoa_r+0x13fc>
    5a7c:	1029883a 	mov	r20,r2
    5a80:	0005883a 	mov	r2,zero
    5a84:	00d00934 	movhi	r3,16420
    5a88:	180f883a 	mov	r7,r3
    5a8c:	100d883a 	mov	r6,r2
    5a90:	880b883a 	mov	r5,r17
    5a94:	8009883a 	mov	r4,r16
    5a98:	0009ee00 	call	9ee0 <__muldf3>
    5a9c:	180b883a 	mov	r5,r3
    5aa0:	1009883a 	mov	r4,r2
    5aa4:	1823883a 	mov	r17,r3
    5aa8:	1021883a 	mov	r16,r2
    5aac:	000a89c0 	call	a89c <__fixdfsi>
    5ab0:	1009883a 	mov	r4,r2
    5ab4:	102b883a 	mov	r21,r2
    5ab8:	000a7a40 	call	a7a4 <__floatsidf>
    5abc:	880b883a 	mov	r5,r17
    5ac0:	8009883a 	mov	r4,r16
    5ac4:	180f883a 	mov	r7,r3
    5ac8:	100d883a 	mov	r6,r2
    5acc:	0009dec0 	call	9dec <__subdf3>
    5ad0:	180b883a 	mov	r5,r3
    5ad4:	d8c00517 	ldw	r3,20(sp)
    5ad8:	1009883a 	mov	r4,r2
    5adc:	ad400c04 	addi	r21,r21,48
    5ae0:	1d05883a 	add	r2,r3,r20
    5ae4:	15400005 	stb	r21,0(r2)
    5ae8:	2021883a 	mov	r16,r4
    5aec:	d9000317 	ldw	r4,12(sp)
    5af0:	a5000044 	addi	r20,r20,1
    5af4:	2823883a 	mov	r17,r5
    5af8:	a13fe11e 	bne	r20,r4,5a80 <_dtoa_r+0x1378>
    5afc:	e505883a 	add	r2,fp,r20
    5b00:	173fffc4 	addi	fp,r2,-1
    5b04:	0025883a 	mov	r18,zero
    5b08:	04cff834 	movhi	r19,16352
    5b0c:	b009883a 	mov	r4,r22
    5b10:	b80b883a 	mov	r5,r23
    5b14:	900d883a 	mov	r6,r18
    5b18:	980f883a 	mov	r7,r19
    5b1c:	0009e6c0 	call	9e6c <__adddf3>
    5b20:	180b883a 	mov	r5,r3
    5b24:	1009883a 	mov	r4,r2
    5b28:	800d883a 	mov	r6,r16
    5b2c:	880f883a 	mov	r7,r17
    5b30:	000a71c0 	call	a71c <__ltdf2>
    5b34:	103cab16 	blt	r2,zero,4de4 <_dtoa_r+0x6dc>
    5b38:	0009883a 	mov	r4,zero
    5b3c:	980b883a 	mov	r5,r19
    5b40:	b80f883a 	mov	r7,r23
    5b44:	b00d883a 	mov	r6,r22
    5b48:	0009dec0 	call	9dec <__subdf3>
    5b4c:	180b883a 	mov	r5,r3
    5b50:	880f883a 	mov	r7,r17
    5b54:	1009883a 	mov	r4,r2
    5b58:	800d883a 	mov	r6,r16
    5b5c:	000a60c0 	call	a60c <__gtdf2>
    5b60:	00bc470e 	bge	zero,r2,4c80 <_dtoa_r+0x578>
    5b64:	00c00c04 	movi	r3,48
    5b68:	e73fffc4 	addi	fp,fp,-1
    5b6c:	e0800007 	ldb	r2,0(fp)
    5b70:	10fffd26 	beq	r2,r3,5b68 <_dtoa_r+0x1460>
    5b74:	d9800417 	ldw	r6,16(sp)
    5b78:	e7000044 	addi	fp,fp,1
    5b7c:	d9800d15 	stw	r6,52(sp)
    5b80:	003cab06 	br	4e30 <_dtoa_r+0x728>
    5b84:	d8c00f17 	ldw	r3,60(sp)
    5b88:	d9001117 	ldw	r4,68(sp)
    5b8c:	20e1c83a 	sub	r16,r4,r3
    5b90:	0007883a 	mov	r3,zero
    5b94:	003d9b06 	br	5204 <_dtoa_r+0xafc>
    5b98:	00800e44 	movi	r2,57
    5b9c:	b0800005 	stb	r2,0(r22)
    5ba0:	b5800044 	addi	r22,r22,1
    5ba4:	003dc106 	br	52ac <_dtoa_r+0xba4>
    5ba8:	05800084 	movi	r22,2
    5bac:	003bf706 	br	4b8c <_dtoa_r+0x484>
    5bb0:	d9000f17 	ldw	r4,60(sp)
    5bb4:	013c000e 	bge	zero,r4,4bb8 <_dtoa_r+0x4b0>
    5bb8:	d9800e17 	ldw	r6,56(sp)
    5bbc:	01bc300e 	bge	zero,r6,4c80 <_dtoa_r+0x578>
    5bc0:	0005883a 	mov	r2,zero
    5bc4:	00d00934 	movhi	r3,16420
    5bc8:	a80b883a 	mov	r5,r21
    5bcc:	180f883a 	mov	r7,r3
    5bd0:	a009883a 	mov	r4,r20
    5bd4:	100d883a 	mov	r6,r2
    5bd8:	0009ee00 	call	9ee0 <__muldf3>
    5bdc:	b1000044 	addi	r4,r22,1
    5be0:	1021883a 	mov	r16,r2
    5be4:	1823883a 	mov	r17,r3
    5be8:	000a7a40 	call	a7a4 <__floatsidf>
    5bec:	880b883a 	mov	r5,r17
    5bf0:	8009883a 	mov	r4,r16
    5bf4:	180f883a 	mov	r7,r3
    5bf8:	100d883a 	mov	r6,r2
    5bfc:	0009ee00 	call	9ee0 <__muldf3>
    5c00:	0011883a 	mov	r8,zero
    5c04:	02500734 	movhi	r9,16412
    5c08:	180b883a 	mov	r5,r3
    5c0c:	480f883a 	mov	r7,r9
    5c10:	1009883a 	mov	r4,r2
    5c14:	400d883a 	mov	r6,r8
    5c18:	0009e6c0 	call	9e6c <__adddf3>
    5c1c:	102d883a 	mov	r22,r2
    5c20:	00bf3034 	movhi	r2,64704
    5c24:	10ef883a 	add	r23,r2,r3
    5c28:	d8800d17 	ldw	r2,52(sp)
    5c2c:	d8c00e17 	ldw	r3,56(sp)
    5c30:	8029883a 	mov	r20,r16
    5c34:	10bfffc4 	addi	r2,r2,-1
    5c38:	882b883a 	mov	r21,r17
    5c3c:	d8800415 	stw	r2,16(sp)
    5c40:	d8c00315 	stw	r3,12(sp)
    5c44:	003e8306 	br	5654 <_dtoa_r+0xf4c>
    5c48:	d8800117 	ldw	r2,4(sp)
    5c4c:	dc001117 	ldw	r16,68(sp)
    5c50:	dc801017 	ldw	r18,64(sp)
    5c54:	00c00d84 	movi	r3,54
    5c58:	1887c83a 	sub	r3,r3,r2
    5c5c:	003d6906 	br	5204 <_dtoa_r+0xafc>
    5c60:	01800044 	movi	r6,1
    5c64:	3021883a 	mov	r16,r6
    5c68:	d9800f15 	stw	r6,60(sp)
    5c6c:	d9802615 	stw	r6,152(sp)
    5c70:	d9800e15 	stw	r6,56(sp)
    5c74:	003b9306 	br	4ac4 <_dtoa_r+0x3bc>
    5c78:	b021883a 	mov	r16,r22
    5c7c:	dd800f15 	stw	r22,60(sp)
    5c80:	003b9006 	br	4ac4 <_dtoa_r+0x3bc>
    5c84:	103e221e 	bne	r2,zero,5510 <_dtoa_r+0xe08>
    5c88:	b880004c 	andi	r2,r23,1
    5c8c:	1005003a 	cmpeq	r2,r2,zero
    5c90:	103e1f1e 	bne	r2,zero,5510 <_dtoa_r+0xe08>
    5c94:	003e1b06 	br	5504 <_dtoa_r+0xdfc>
    5c98:	d9001617 	ldw	r4,88(sp)
    5c9c:	980b883a 	mov	r5,r19
    5ca0:	01800284 	movi	r6,10
    5ca4:	000f883a 	mov	r7,zero
    5ca8:	0007e100 	call	7e10 <__multadd>
    5cac:	d8c00e17 	ldw	r3,56(sp)
    5cb0:	1027883a 	mov	r19,r2
    5cb4:	d8c00f15 	stw	r3,60(sp)
    5cb8:	003cd306 	br	5008 <_dtoa_r+0x900>

00005cbc <_fflush_r>:
    5cbc:	defffb04 	addi	sp,sp,-20
    5cc0:	dcc00315 	stw	r19,12(sp)
    5cc4:	dc800215 	stw	r18,8(sp)
    5cc8:	dfc00415 	stw	ra,16(sp)
    5ccc:	dc400115 	stw	r17,4(sp)
    5cd0:	dc000015 	stw	r16,0(sp)
    5cd4:	2027883a 	mov	r19,r4
    5cd8:	2825883a 	mov	r18,r5
    5cdc:	20000226 	beq	r4,zero,5ce8 <_fflush_r+0x2c>
    5ce0:	20800e17 	ldw	r2,56(r4)
    5ce4:	10005626 	beq	r2,zero,5e40 <_fflush_r+0x184>
    5ce8:	9100030b 	ldhu	r4,12(r18)
    5cec:	20ffffcc 	andi	r3,r4,65535
    5cf0:	18e0001c 	xori	r3,r3,32768
    5cf4:	18e00004 	addi	r3,r3,-32768
    5cf8:	1880020c 	andi	r2,r3,8
    5cfc:	1000261e 	bne	r2,zero,5d98 <_fflush_r+0xdc>
    5d00:	90c00117 	ldw	r3,4(r18)
    5d04:	20820014 	ori	r2,r4,2048
    5d08:	9080030d 	sth	r2,12(r18)
    5d0c:	1009883a 	mov	r4,r2
    5d10:	00c0400e 	bge	zero,r3,5e14 <_fflush_r+0x158>
    5d14:	92000a17 	ldw	r8,40(r18)
    5d18:	40004026 	beq	r8,zero,5e1c <_fflush_r+0x160>
    5d1c:	2084000c 	andi	r2,r4,4096
    5d20:	10005326 	beq	r2,zero,5e70 <_fflush_r+0x1b4>
    5d24:	94001417 	ldw	r16,80(r18)
    5d28:	9080030b 	ldhu	r2,12(r18)
    5d2c:	1080010c 	andi	r2,r2,4
    5d30:	1000481e 	bne	r2,zero,5e54 <_fflush_r+0x198>
    5d34:	91400717 	ldw	r5,28(r18)
    5d38:	9809883a 	mov	r4,r19
    5d3c:	800d883a 	mov	r6,r16
    5d40:	000f883a 	mov	r7,zero
    5d44:	403ee83a 	callr	r8
    5d48:	8080261e 	bne	r16,r2,5de4 <_fflush_r+0x128>
    5d4c:	9080030b 	ldhu	r2,12(r18)
    5d50:	91000417 	ldw	r4,16(r18)
    5d54:	90000115 	stw	zero,4(r18)
    5d58:	10bdffcc 	andi	r2,r2,63487
    5d5c:	10ffffcc 	andi	r3,r2,65535
    5d60:	18c4000c 	andi	r3,r3,4096
    5d64:	9080030d 	sth	r2,12(r18)
    5d68:	91000015 	stw	r4,0(r18)
    5d6c:	18002b26 	beq	r3,zero,5e1c <_fflush_r+0x160>
    5d70:	0007883a 	mov	r3,zero
    5d74:	1805883a 	mov	r2,r3
    5d78:	94001415 	stw	r16,80(r18)
    5d7c:	dfc00417 	ldw	ra,16(sp)
    5d80:	dcc00317 	ldw	r19,12(sp)
    5d84:	dc800217 	ldw	r18,8(sp)
    5d88:	dc400117 	ldw	r17,4(sp)
    5d8c:	dc000017 	ldw	r16,0(sp)
    5d90:	dec00504 	addi	sp,sp,20
    5d94:	f800283a 	ret
    5d98:	94400417 	ldw	r17,16(r18)
    5d9c:	88001f26 	beq	r17,zero,5e1c <_fflush_r+0x160>
    5da0:	90800017 	ldw	r2,0(r18)
    5da4:	18c000cc 	andi	r3,r3,3
    5da8:	94400015 	stw	r17,0(r18)
    5dac:	1461c83a 	sub	r16,r2,r17
    5db0:	18002526 	beq	r3,zero,5e48 <_fflush_r+0x18c>
    5db4:	0005883a 	mov	r2,zero
    5db8:	90800215 	stw	r2,8(r18)
    5dbc:	0400170e 	bge	zero,r16,5e1c <_fflush_r+0x160>
    5dc0:	90c00917 	ldw	r3,36(r18)
    5dc4:	91400717 	ldw	r5,28(r18)
    5dc8:	880d883a 	mov	r6,r17
    5dcc:	800f883a 	mov	r7,r16
    5dd0:	9809883a 	mov	r4,r19
    5dd4:	183ee83a 	callr	r3
    5dd8:	88a3883a 	add	r17,r17,r2
    5ddc:	80a1c83a 	sub	r16,r16,r2
    5de0:	00bff616 	blt	zero,r2,5dbc <_fflush_r+0x100>
    5de4:	9080030b 	ldhu	r2,12(r18)
    5de8:	00ffffc4 	movi	r3,-1
    5dec:	10801014 	ori	r2,r2,64
    5df0:	9080030d 	sth	r2,12(r18)
    5df4:	1805883a 	mov	r2,r3
    5df8:	dfc00417 	ldw	ra,16(sp)
    5dfc:	dcc00317 	ldw	r19,12(sp)
    5e00:	dc800217 	ldw	r18,8(sp)
    5e04:	dc400117 	ldw	r17,4(sp)
    5e08:	dc000017 	ldw	r16,0(sp)
    5e0c:	dec00504 	addi	sp,sp,20
    5e10:	f800283a 	ret
    5e14:	90800f17 	ldw	r2,60(r18)
    5e18:	00bfbe16 	blt	zero,r2,5d14 <_fflush_r+0x58>
    5e1c:	0007883a 	mov	r3,zero
    5e20:	1805883a 	mov	r2,r3
    5e24:	dfc00417 	ldw	ra,16(sp)
    5e28:	dcc00317 	ldw	r19,12(sp)
    5e2c:	dc800217 	ldw	r18,8(sp)
    5e30:	dc400117 	ldw	r17,4(sp)
    5e34:	dc000017 	ldw	r16,0(sp)
    5e38:	dec00504 	addi	sp,sp,20
    5e3c:	f800283a 	ret
    5e40:	0005f540 	call	5f54 <__sinit>
    5e44:	003fa806 	br	5ce8 <_fflush_r+0x2c>
    5e48:	90800517 	ldw	r2,20(r18)
    5e4c:	90800215 	stw	r2,8(r18)
    5e50:	003fda06 	br	5dbc <_fflush_r+0x100>
    5e54:	90800117 	ldw	r2,4(r18)
    5e58:	90c00c17 	ldw	r3,48(r18)
    5e5c:	80a1c83a 	sub	r16,r16,r2
    5e60:	183fb426 	beq	r3,zero,5d34 <_fflush_r+0x78>
    5e64:	90800f17 	ldw	r2,60(r18)
    5e68:	80a1c83a 	sub	r16,r16,r2
    5e6c:	003fb106 	br	5d34 <_fflush_r+0x78>
    5e70:	91400717 	ldw	r5,28(r18)
    5e74:	9809883a 	mov	r4,r19
    5e78:	000d883a 	mov	r6,zero
    5e7c:	01c00044 	movi	r7,1
    5e80:	403ee83a 	callr	r8
    5e84:	1021883a 	mov	r16,r2
    5e88:	00bfffc4 	movi	r2,-1
    5e8c:	80800226 	beq	r16,r2,5e98 <_fflush_r+0x1dc>
    5e90:	92000a17 	ldw	r8,40(r18)
    5e94:	003fa406 	br	5d28 <_fflush_r+0x6c>
    5e98:	98c00017 	ldw	r3,0(r19)
    5e9c:	00800744 	movi	r2,29
    5ea0:	18bfde26 	beq	r3,r2,5e1c <_fflush_r+0x160>
    5ea4:	9080030b 	ldhu	r2,12(r18)
    5ea8:	8007883a 	mov	r3,r16
    5eac:	10801014 	ori	r2,r2,64
    5eb0:	9080030d 	sth	r2,12(r18)
    5eb4:	003fcf06 	br	5df4 <_fflush_r+0x138>

00005eb8 <fflush>:
    5eb8:	01400034 	movhi	r5,0
    5ebc:	29572f04 	addi	r5,r5,23740
    5ec0:	2007883a 	mov	r3,r4
    5ec4:	20000526 	beq	r4,zero,5edc <fflush+0x24>
    5ec8:	00800074 	movhi	r2,1
    5ecc:	10852d04 	addi	r2,r2,5300
    5ed0:	11000017 	ldw	r4,0(r2)
    5ed4:	180b883a 	mov	r5,r3
    5ed8:	0005cbc1 	jmpi	5cbc <_fflush_r>
    5edc:	00800074 	movhi	r2,1
    5ee0:	10852e04 	addi	r2,r2,5304
    5ee4:	11000017 	ldw	r4,0(r2)
    5ee8:	0006a881 	jmpi	6a88 <_fwalk_reent>

00005eec <std>:
    5eec:	00800074 	movhi	r2,1
    5ef0:	10a1ed04 	addi	r2,r2,-30796
    5ef4:	20800b15 	stw	r2,44(r4)
    5ef8:	00800074 	movhi	r2,1
    5efc:	10a22804 	addi	r2,r2,-30560
    5f00:	20800815 	stw	r2,32(r4)
    5f04:	00c00074 	movhi	r3,1
    5f08:	18e20904 	addi	r3,r3,-30684
    5f0c:	00800074 	movhi	r2,1
    5f10:	10a1ef04 	addi	r2,r2,-30788
    5f14:	2140030d 	sth	r5,12(r4)
    5f18:	2180038d 	sth	r6,14(r4)
    5f1c:	20c00915 	stw	r3,36(r4)
    5f20:	20800a15 	stw	r2,40(r4)
    5f24:	20000015 	stw	zero,0(r4)
    5f28:	20000115 	stw	zero,4(r4)
    5f2c:	20000215 	stw	zero,8(r4)
    5f30:	20000415 	stw	zero,16(r4)
    5f34:	20000515 	stw	zero,20(r4)
    5f38:	20000615 	stw	zero,24(r4)
    5f3c:	21000715 	stw	r4,28(r4)
    5f40:	f800283a 	ret

00005f44 <__sfp_lock_acquire>:
    5f44:	f800283a 	ret

00005f48 <__sfp_lock_release>:
    5f48:	f800283a 	ret

00005f4c <__sinit_lock_acquire>:
    5f4c:	f800283a 	ret

00005f50 <__sinit_lock_release>:
    5f50:	f800283a 	ret

00005f54 <__sinit>:
    5f54:	20800e17 	ldw	r2,56(r4)
    5f58:	defffd04 	addi	sp,sp,-12
    5f5c:	dc400115 	stw	r17,4(sp)
    5f60:	dc000015 	stw	r16,0(sp)
    5f64:	dfc00215 	stw	ra,8(sp)
    5f68:	04400044 	movi	r17,1
    5f6c:	01400104 	movi	r5,4
    5f70:	000d883a 	mov	r6,zero
    5f74:	2021883a 	mov	r16,r4
    5f78:	2200bb04 	addi	r8,r4,748
    5f7c:	200f883a 	mov	r7,r4
    5f80:	10000526 	beq	r2,zero,5f98 <__sinit+0x44>
    5f84:	dfc00217 	ldw	ra,8(sp)
    5f88:	dc400117 	ldw	r17,4(sp)
    5f8c:	dc000017 	ldw	r16,0(sp)
    5f90:	dec00304 	addi	sp,sp,12
    5f94:	f800283a 	ret
    5f98:	21000117 	ldw	r4,4(r4)
    5f9c:	00800034 	movhi	r2,0
    5fa0:	10980e04 	addi	r2,r2,24632
    5fa4:	00c000c4 	movi	r3,3
    5fa8:	80800f15 	stw	r2,60(r16)
    5fac:	80c0b915 	stw	r3,740(r16)
    5fb0:	8200ba15 	stw	r8,744(r16)
    5fb4:	84400e15 	stw	r17,56(r16)
    5fb8:	8000b815 	stw	zero,736(r16)
    5fbc:	0005eec0 	call	5eec <std>
    5fc0:	81000217 	ldw	r4,8(r16)
    5fc4:	880d883a 	mov	r6,r17
    5fc8:	800f883a 	mov	r7,r16
    5fcc:	01400284 	movi	r5,10
    5fd0:	0005eec0 	call	5eec <std>
    5fd4:	81000317 	ldw	r4,12(r16)
    5fd8:	800f883a 	mov	r7,r16
    5fdc:	01400484 	movi	r5,18
    5fe0:	01800084 	movi	r6,2
    5fe4:	dfc00217 	ldw	ra,8(sp)
    5fe8:	dc400117 	ldw	r17,4(sp)
    5fec:	dc000017 	ldw	r16,0(sp)
    5ff0:	dec00304 	addi	sp,sp,12
    5ff4:	0005eec1 	jmpi	5eec <std>

00005ff8 <__fp_lock>:
    5ff8:	0005883a 	mov	r2,zero
    5ffc:	f800283a 	ret

00006000 <__fp_unlock>:
    6000:	0005883a 	mov	r2,zero
    6004:	f800283a 	ret

00006008 <__fp_unlock_all>:
    6008:	00800074 	movhi	r2,1
    600c:	10852d04 	addi	r2,r2,5300
    6010:	11000017 	ldw	r4,0(r2)
    6014:	01400034 	movhi	r5,0
    6018:	29580004 	addi	r5,r5,24576
    601c:	0006b501 	jmpi	6b50 <_fwalk>

00006020 <__fp_lock_all>:
    6020:	00800074 	movhi	r2,1
    6024:	10852d04 	addi	r2,r2,5300
    6028:	11000017 	ldw	r4,0(r2)
    602c:	01400034 	movhi	r5,0
    6030:	2957fe04 	addi	r5,r5,24568
    6034:	0006b501 	jmpi	6b50 <_fwalk>

00006038 <_cleanup_r>:
    6038:	01400074 	movhi	r5,1
    603c:	29631a04 	addi	r5,r5,-29592
    6040:	0006b501 	jmpi	6b50 <_fwalk>

00006044 <_cleanup>:
    6044:	00800074 	movhi	r2,1
    6048:	10852e04 	addi	r2,r2,5304
    604c:	11000017 	ldw	r4,0(r2)
    6050:	00060381 	jmpi	6038 <_cleanup_r>

00006054 <__sfmoreglue>:
    6054:	defffc04 	addi	sp,sp,-16
    6058:	dc400115 	stw	r17,4(sp)
    605c:	2c401724 	muli	r17,r5,92
    6060:	dc800215 	stw	r18,8(sp)
    6064:	2825883a 	mov	r18,r5
    6068:	89400304 	addi	r5,r17,12
    606c:	dc000015 	stw	r16,0(sp)
    6070:	dfc00315 	stw	ra,12(sp)
    6074:	0001b3c0 	call	1b3c <_malloc_r>
    6078:	0021883a 	mov	r16,zero
    607c:	880d883a 	mov	r6,r17
    6080:	000b883a 	mov	r5,zero
    6084:	10000626 	beq	r2,zero,60a0 <__sfmoreglue+0x4c>
    6088:	11000304 	addi	r4,r2,12
    608c:	14800115 	stw	r18,4(r2)
    6090:	10000015 	stw	zero,0(r2)
    6094:	11000215 	stw	r4,8(r2)
    6098:	1021883a 	mov	r16,r2
    609c:	00070c40 	call	70c4 <memset>
    60a0:	8005883a 	mov	r2,r16
    60a4:	dfc00317 	ldw	ra,12(sp)
    60a8:	dc800217 	ldw	r18,8(sp)
    60ac:	dc400117 	ldw	r17,4(sp)
    60b0:	dc000017 	ldw	r16,0(sp)
    60b4:	dec00404 	addi	sp,sp,16
    60b8:	f800283a 	ret

000060bc <__sfp>:
    60bc:	defffd04 	addi	sp,sp,-12
    60c0:	00800074 	movhi	r2,1
    60c4:	10852e04 	addi	r2,r2,5304
    60c8:	dc000015 	stw	r16,0(sp)
    60cc:	14000017 	ldw	r16,0(r2)
    60d0:	dc400115 	stw	r17,4(sp)
    60d4:	dfc00215 	stw	ra,8(sp)
    60d8:	80800e17 	ldw	r2,56(r16)
    60dc:	2023883a 	mov	r17,r4
    60e0:	10002626 	beq	r2,zero,617c <__sfp+0xc0>
    60e4:	8400b804 	addi	r16,r16,736
    60e8:	80800117 	ldw	r2,4(r16)
    60ec:	81000217 	ldw	r4,8(r16)
    60f0:	10ffffc4 	addi	r3,r2,-1
    60f4:	18000916 	blt	r3,zero,611c <__sfp+0x60>
    60f8:	2080030f 	ldh	r2,12(r4)
    60fc:	10000b26 	beq	r2,zero,612c <__sfp+0x70>
    6100:	017fffc4 	movi	r5,-1
    6104:	00000206 	br	6110 <__sfp+0x54>
    6108:	2080030f 	ldh	r2,12(r4)
    610c:	10000726 	beq	r2,zero,612c <__sfp+0x70>
    6110:	18ffffc4 	addi	r3,r3,-1
    6114:	21001704 	addi	r4,r4,92
    6118:	197ffb1e 	bne	r3,r5,6108 <__sfp+0x4c>
    611c:	80800017 	ldw	r2,0(r16)
    6120:	10001926 	beq	r2,zero,6188 <__sfp+0xcc>
    6124:	1021883a 	mov	r16,r2
    6128:	003fef06 	br	60e8 <__sfp+0x2c>
    612c:	00bfffc4 	movi	r2,-1
    6130:	00c00044 	movi	r3,1
    6134:	2080038d 	sth	r2,14(r4)
    6138:	20c0030d 	sth	r3,12(r4)
    613c:	20000015 	stw	zero,0(r4)
    6140:	20000215 	stw	zero,8(r4)
    6144:	20000115 	stw	zero,4(r4)
    6148:	20000415 	stw	zero,16(r4)
    614c:	20000515 	stw	zero,20(r4)
    6150:	20000615 	stw	zero,24(r4)
    6154:	20000c15 	stw	zero,48(r4)
    6158:	20000d15 	stw	zero,52(r4)
    615c:	20001115 	stw	zero,68(r4)
    6160:	20001215 	stw	zero,72(r4)
    6164:	2005883a 	mov	r2,r4
    6168:	dfc00217 	ldw	ra,8(sp)
    616c:	dc400117 	ldw	r17,4(sp)
    6170:	dc000017 	ldw	r16,0(sp)
    6174:	dec00304 	addi	sp,sp,12
    6178:	f800283a 	ret
    617c:	8009883a 	mov	r4,r16
    6180:	0005f540 	call	5f54 <__sinit>
    6184:	003fd706 	br	60e4 <__sfp+0x28>
    6188:	8809883a 	mov	r4,r17
    618c:	01400104 	movi	r5,4
    6190:	00060540 	call	6054 <__sfmoreglue>
    6194:	80800015 	stw	r2,0(r16)
    6198:	103fe21e 	bne	r2,zero,6124 <__sfp+0x68>
    619c:	00800304 	movi	r2,12
    61a0:	0009883a 	mov	r4,zero
    61a4:	88800015 	stw	r2,0(r17)
    61a8:	003fee06 	br	6164 <__sfp+0xa8>

000061ac <_malloc_trim_r>:
    61ac:	defffb04 	addi	sp,sp,-20
    61b0:	dcc00315 	stw	r19,12(sp)
    61b4:	04c00074 	movhi	r19,1
    61b8:	9cfe5c04 	addi	r19,r19,-1680
    61bc:	dc800215 	stw	r18,8(sp)
    61c0:	dc400115 	stw	r17,4(sp)
    61c4:	dc000015 	stw	r16,0(sp)
    61c8:	2823883a 	mov	r17,r5
    61cc:	2025883a 	mov	r18,r4
    61d0:	dfc00415 	stw	ra,16(sp)
    61d4:	000b7b80 	call	b7b8 <__malloc_lock>
    61d8:	98800217 	ldw	r2,8(r19)
    61dc:	9009883a 	mov	r4,r18
    61e0:	000b883a 	mov	r5,zero
    61e4:	10c00117 	ldw	r3,4(r2)
    61e8:	00bfff04 	movi	r2,-4
    61ec:	18a0703a 	and	r16,r3,r2
    61f0:	8463c83a 	sub	r17,r16,r17
    61f4:	8c43fbc4 	addi	r17,r17,4079
    61f8:	8822d33a 	srli	r17,r17,12
    61fc:	0083ffc4 	movi	r2,4095
    6200:	8c7fffc4 	addi	r17,r17,-1
    6204:	8822933a 	slli	r17,r17,12
    6208:	1440060e 	bge	r2,r17,6224 <_malloc_trim_r+0x78>
    620c:	00023a80 	call	23a8 <_sbrk_r>
    6210:	98c00217 	ldw	r3,8(r19)
    6214:	9009883a 	mov	r4,r18
    6218:	044bc83a 	sub	r5,zero,r17
    621c:	80c7883a 	add	r3,r16,r3
    6220:	10c00926 	beq	r2,r3,6248 <_malloc_trim_r+0x9c>
    6224:	000b7d80 	call	b7d8 <__malloc_unlock>
    6228:	0005883a 	mov	r2,zero
    622c:	dfc00417 	ldw	ra,16(sp)
    6230:	dcc00317 	ldw	r19,12(sp)
    6234:	dc800217 	ldw	r18,8(sp)
    6238:	dc400117 	ldw	r17,4(sp)
    623c:	dc000017 	ldw	r16,0(sp)
    6240:	dec00504 	addi	sp,sp,20
    6244:	f800283a 	ret
    6248:	9009883a 	mov	r4,r18
    624c:	00023a80 	call	23a8 <_sbrk_r>
    6250:	844dc83a 	sub	r6,r16,r17
    6254:	00ffffc4 	movi	r3,-1
    6258:	9009883a 	mov	r4,r18
    625c:	000b883a 	mov	r5,zero
    6260:	01c00074 	movhi	r7,1
    6264:	39cc9604 	addi	r7,r7,12888
    6268:	31800054 	ori	r6,r6,1
    626c:	10c00926 	beq	r2,r3,6294 <_malloc_trim_r+0xe8>
    6270:	38800017 	ldw	r2,0(r7)
    6274:	98c00217 	ldw	r3,8(r19)
    6278:	9009883a 	mov	r4,r18
    627c:	1445c83a 	sub	r2,r2,r17
    6280:	38800015 	stw	r2,0(r7)
    6284:	19800115 	stw	r6,4(r3)
    6288:	000b7d80 	call	b7d8 <__malloc_unlock>
    628c:	00800044 	movi	r2,1
    6290:	003fe606 	br	622c <_malloc_trim_r+0x80>
    6294:	00023a80 	call	23a8 <_sbrk_r>
    6298:	99800217 	ldw	r6,8(r19)
    629c:	100f883a 	mov	r7,r2
    62a0:	9009883a 	mov	r4,r18
    62a4:	1187c83a 	sub	r3,r2,r6
    62a8:	008003c4 	movi	r2,15
    62ac:	19400054 	ori	r5,r3,1
    62b0:	10ffdc0e 	bge	r2,r3,6224 <_malloc_trim_r+0x78>
    62b4:	00800074 	movhi	r2,1
    62b8:	10852c04 	addi	r2,r2,5296
    62bc:	10c00017 	ldw	r3,0(r2)
    62c0:	00800074 	movhi	r2,1
    62c4:	108c9604 	addi	r2,r2,12888
    62c8:	31400115 	stw	r5,4(r6)
    62cc:	38c7c83a 	sub	r3,r7,r3
    62d0:	10c00015 	stw	r3,0(r2)
    62d4:	003fd306 	br	6224 <_malloc_trim_r+0x78>

000062d8 <_free_r>:
    62d8:	defffd04 	addi	sp,sp,-12
    62dc:	dc400115 	stw	r17,4(sp)
    62e0:	dc000015 	stw	r16,0(sp)
    62e4:	dfc00215 	stw	ra,8(sp)
    62e8:	2821883a 	mov	r16,r5
    62ec:	2023883a 	mov	r17,r4
    62f0:	28005a26 	beq	r5,zero,645c <_free_r+0x184>
    62f4:	000b7b80 	call	b7b8 <__malloc_lock>
    62f8:	823ffe04 	addi	r8,r16,-8
    62fc:	41400117 	ldw	r5,4(r8)
    6300:	00bfff84 	movi	r2,-2
    6304:	02800074 	movhi	r10,1
    6308:	52be5c04 	addi	r10,r10,-1680
    630c:	288e703a 	and	r7,r5,r2
    6310:	41cd883a 	add	r6,r8,r7
    6314:	30c00117 	ldw	r3,4(r6)
    6318:	51000217 	ldw	r4,8(r10)
    631c:	00bfff04 	movi	r2,-4
    6320:	1892703a 	and	r9,r3,r2
    6324:	5017883a 	mov	r11,r10
    6328:	31006726 	beq	r6,r4,64c8 <_free_r+0x1f0>
    632c:	2880004c 	andi	r2,r5,1
    6330:	1005003a 	cmpeq	r2,r2,zero
    6334:	32400115 	stw	r9,4(r6)
    6338:	10001a1e 	bne	r2,zero,63a4 <_free_r+0xcc>
    633c:	000b883a 	mov	r5,zero
    6340:	3247883a 	add	r3,r6,r9
    6344:	18800117 	ldw	r2,4(r3)
    6348:	1080004c 	andi	r2,r2,1
    634c:	1000231e 	bne	r2,zero,63dc <_free_r+0x104>
    6350:	280ac03a 	cmpne	r5,r5,zero
    6354:	3a4f883a 	add	r7,r7,r9
    6358:	2800451e 	bne	r5,zero,6470 <_free_r+0x198>
    635c:	31000217 	ldw	r4,8(r6)
    6360:	00800074 	movhi	r2,1
    6364:	10be5e04 	addi	r2,r2,-1672
    6368:	20807b26 	beq	r4,r2,6558 <_free_r+0x280>
    636c:	30800317 	ldw	r2,12(r6)
    6370:	3a07883a 	add	r3,r7,r8
    6374:	19c00015 	stw	r7,0(r3)
    6378:	11000215 	stw	r4,8(r2)
    637c:	20800315 	stw	r2,12(r4)
    6380:	38800054 	ori	r2,r7,1
    6384:	40800115 	stw	r2,4(r8)
    6388:	28001a26 	beq	r5,zero,63f4 <_free_r+0x11c>
    638c:	8809883a 	mov	r4,r17
    6390:	dfc00217 	ldw	ra,8(sp)
    6394:	dc400117 	ldw	r17,4(sp)
    6398:	dc000017 	ldw	r16,0(sp)
    639c:	dec00304 	addi	sp,sp,12
    63a0:	000b7d81 	jmpi	b7d8 <__malloc_unlock>
    63a4:	80bffe17 	ldw	r2,-8(r16)
    63a8:	50c00204 	addi	r3,r10,8
    63ac:	4091c83a 	sub	r8,r8,r2
    63b0:	41000217 	ldw	r4,8(r8)
    63b4:	388f883a 	add	r7,r7,r2
    63b8:	20c06126 	beq	r4,r3,6540 <_free_r+0x268>
    63bc:	40800317 	ldw	r2,12(r8)
    63c0:	3247883a 	add	r3,r6,r9
    63c4:	000b883a 	mov	r5,zero
    63c8:	11000215 	stw	r4,8(r2)
    63cc:	20800315 	stw	r2,12(r4)
    63d0:	18800117 	ldw	r2,4(r3)
    63d4:	1080004c 	andi	r2,r2,1
    63d8:	103fdd26 	beq	r2,zero,6350 <_free_r+0x78>
    63dc:	38800054 	ori	r2,r7,1
    63e0:	3a07883a 	add	r3,r7,r8
    63e4:	280ac03a 	cmpne	r5,r5,zero
    63e8:	40800115 	stw	r2,4(r8)
    63ec:	19c00015 	stw	r7,0(r3)
    63f0:	283fe61e 	bne	r5,zero,638c <_free_r+0xb4>
    63f4:	00807fc4 	movi	r2,511
    63f8:	11c01f2e 	bgeu	r2,r7,6478 <_free_r+0x1a0>
    63fc:	3806d27a 	srli	r3,r7,9
    6400:	1800481e 	bne	r3,zero,6524 <_free_r+0x24c>
    6404:	3804d0fa 	srli	r2,r7,3
    6408:	100690fa 	slli	r3,r2,3
    640c:	1acd883a 	add	r6,r3,r11
    6410:	31400217 	ldw	r5,8(r6)
    6414:	31405926 	beq	r6,r5,657c <_free_r+0x2a4>
    6418:	28800117 	ldw	r2,4(r5)
    641c:	00ffff04 	movi	r3,-4
    6420:	10c4703a 	and	r2,r2,r3
    6424:	3880022e 	bgeu	r7,r2,6430 <_free_r+0x158>
    6428:	29400217 	ldw	r5,8(r5)
    642c:	317ffa1e 	bne	r6,r5,6418 <_free_r+0x140>
    6430:	29800317 	ldw	r6,12(r5)
    6434:	41800315 	stw	r6,12(r8)
    6438:	41400215 	stw	r5,8(r8)
    643c:	8809883a 	mov	r4,r17
    6440:	2a000315 	stw	r8,12(r5)
    6444:	32000215 	stw	r8,8(r6)
    6448:	dfc00217 	ldw	ra,8(sp)
    644c:	dc400117 	ldw	r17,4(sp)
    6450:	dc000017 	ldw	r16,0(sp)
    6454:	dec00304 	addi	sp,sp,12
    6458:	000b7d81 	jmpi	b7d8 <__malloc_unlock>
    645c:	dfc00217 	ldw	ra,8(sp)
    6460:	dc400117 	ldw	r17,4(sp)
    6464:	dc000017 	ldw	r16,0(sp)
    6468:	dec00304 	addi	sp,sp,12
    646c:	f800283a 	ret
    6470:	31000217 	ldw	r4,8(r6)
    6474:	003fbd06 	br	636c <_free_r+0x94>
    6478:	3806d0fa 	srli	r3,r7,3
    647c:	00800044 	movi	r2,1
    6480:	51400117 	ldw	r5,4(r10)
    6484:	180890fa 	slli	r4,r3,3
    6488:	1807d0ba 	srai	r3,r3,2
    648c:	22c9883a 	add	r4,r4,r11
    6490:	21800217 	ldw	r6,8(r4)
    6494:	10c4983a 	sll	r2,r2,r3
    6498:	41000315 	stw	r4,12(r8)
    649c:	41800215 	stw	r6,8(r8)
    64a0:	288ab03a 	or	r5,r5,r2
    64a4:	22000215 	stw	r8,8(r4)
    64a8:	8809883a 	mov	r4,r17
    64ac:	51400115 	stw	r5,4(r10)
    64b0:	32000315 	stw	r8,12(r6)
    64b4:	dfc00217 	ldw	ra,8(sp)
    64b8:	dc400117 	ldw	r17,4(sp)
    64bc:	dc000017 	ldw	r16,0(sp)
    64c0:	dec00304 	addi	sp,sp,12
    64c4:	000b7d81 	jmpi	b7d8 <__malloc_unlock>
    64c8:	2880004c 	andi	r2,r5,1
    64cc:	3a4d883a 	add	r6,r7,r9
    64d0:	1000071e 	bne	r2,zero,64f0 <_free_r+0x218>
    64d4:	80bffe17 	ldw	r2,-8(r16)
    64d8:	4091c83a 	sub	r8,r8,r2
    64dc:	41000317 	ldw	r4,12(r8)
    64e0:	40c00217 	ldw	r3,8(r8)
    64e4:	308d883a 	add	r6,r6,r2
    64e8:	20c00215 	stw	r3,8(r4)
    64ec:	19000315 	stw	r4,12(r3)
    64f0:	00800074 	movhi	r2,1
    64f4:	10852b04 	addi	r2,r2,5292
    64f8:	11000017 	ldw	r4,0(r2)
    64fc:	30c00054 	ori	r3,r6,1
    6500:	52000215 	stw	r8,8(r10)
    6504:	40c00115 	stw	r3,4(r8)
    6508:	313fa036 	bltu	r6,r4,638c <_free_r+0xb4>
    650c:	00800074 	movhi	r2,1
    6510:	108c8904 	addi	r2,r2,12836
    6514:	11400017 	ldw	r5,0(r2)
    6518:	8809883a 	mov	r4,r17
    651c:	00061ac0 	call	61ac <_malloc_trim_r>
    6520:	003f9a06 	br	638c <_free_r+0xb4>
    6524:	00800104 	movi	r2,4
    6528:	10c0072e 	bgeu	r2,r3,6548 <_free_r+0x270>
    652c:	00800504 	movi	r2,20
    6530:	10c01936 	bltu	r2,r3,6598 <_free_r+0x2c0>
    6534:	188016c4 	addi	r2,r3,91
    6538:	100690fa 	slli	r3,r2,3
    653c:	003fb306 	br	640c <_free_r+0x134>
    6540:	01400044 	movi	r5,1
    6544:	003f7e06 	br	6340 <_free_r+0x68>
    6548:	3804d1ba 	srli	r2,r7,6
    654c:	10800e04 	addi	r2,r2,56
    6550:	100690fa 	slli	r3,r2,3
    6554:	003fad06 	br	640c <_free_r+0x134>
    6558:	22000315 	stw	r8,12(r4)
    655c:	22000215 	stw	r8,8(r4)
    6560:	3a05883a 	add	r2,r7,r8
    6564:	38c00054 	ori	r3,r7,1
    6568:	11c00015 	stw	r7,0(r2)
    656c:	41000215 	stw	r4,8(r8)
    6570:	40c00115 	stw	r3,4(r8)
    6574:	41000315 	stw	r4,12(r8)
    6578:	003f8406 	br	638c <_free_r+0xb4>
    657c:	1005d0ba 	srai	r2,r2,2
    6580:	00c00044 	movi	r3,1
    6584:	51000117 	ldw	r4,4(r10)
    6588:	1886983a 	sll	r3,r3,r2
    658c:	20c8b03a 	or	r4,r4,r3
    6590:	51000115 	stw	r4,4(r10)
    6594:	003fa706 	br	6434 <_free_r+0x15c>
    6598:	00801504 	movi	r2,84
    659c:	10c00436 	bltu	r2,r3,65b0 <_free_r+0x2d8>
    65a0:	3804d33a 	srli	r2,r7,12
    65a4:	10801b84 	addi	r2,r2,110
    65a8:	100690fa 	slli	r3,r2,3
    65ac:	003f9706 	br	640c <_free_r+0x134>
    65b0:	00805504 	movi	r2,340
    65b4:	10c00436 	bltu	r2,r3,65c8 <_free_r+0x2f0>
    65b8:	3804d3fa 	srli	r2,r7,15
    65bc:	10801dc4 	addi	r2,r2,119
    65c0:	100690fa 	slli	r3,r2,3
    65c4:	003f9106 	br	640c <_free_r+0x134>
    65c8:	00815504 	movi	r2,1364
    65cc:	10c0032e 	bgeu	r2,r3,65dc <_free_r+0x304>
    65d0:	00801f84 	movi	r2,126
    65d4:	00c0fc04 	movi	r3,1008
    65d8:	003f8c06 	br	640c <_free_r+0x134>
    65dc:	3804d4ba 	srli	r2,r7,18
    65e0:	10801f04 	addi	r2,r2,124
    65e4:	100690fa 	slli	r3,r2,3
    65e8:	003f8806 	br	640c <_free_r+0x134>

000065ec <__sfvwrite_r>:
    65ec:	30800217 	ldw	r2,8(r6)
    65f0:	defff504 	addi	sp,sp,-44
    65f4:	df000915 	stw	fp,36(sp)
    65f8:	dd800715 	stw	r22,28(sp)
    65fc:	dc800315 	stw	r18,12(sp)
    6600:	dfc00a15 	stw	ra,40(sp)
    6604:	ddc00815 	stw	r23,32(sp)
    6608:	dd400615 	stw	r21,24(sp)
    660c:	dd000515 	stw	r20,20(sp)
    6610:	dcc00415 	stw	r19,16(sp)
    6614:	dc400215 	stw	r17,8(sp)
    6618:	dc000115 	stw	r16,4(sp)
    661c:	302d883a 	mov	r22,r6
    6620:	2039883a 	mov	fp,r4
    6624:	2825883a 	mov	r18,r5
    6628:	10001c26 	beq	r2,zero,669c <__sfvwrite_r+0xb0>
    662c:	29c0030b 	ldhu	r7,12(r5)
    6630:	3880020c 	andi	r2,r7,8
    6634:	10002726 	beq	r2,zero,66d4 <__sfvwrite_r+0xe8>
    6638:	28800417 	ldw	r2,16(r5)
    663c:	10002526 	beq	r2,zero,66d4 <__sfvwrite_r+0xe8>
    6640:	3880008c 	andi	r2,r7,2
    6644:	b5400017 	ldw	r21,0(r22)
    6648:	10002826 	beq	r2,zero,66ec <__sfvwrite_r+0x100>
    664c:	0021883a 	mov	r16,zero
    6650:	0023883a 	mov	r17,zero
    6654:	880d883a 	mov	r6,r17
    6658:	e009883a 	mov	r4,fp
    665c:	00810004 	movi	r2,1024
    6660:	80006e26 	beq	r16,zero,681c <__sfvwrite_r+0x230>
    6664:	800f883a 	mov	r7,r16
    6668:	91400717 	ldw	r5,28(r18)
    666c:	1400012e 	bgeu	r2,r16,6674 <__sfvwrite_r+0x88>
    6670:	100f883a 	mov	r7,r2
    6674:	90c00917 	ldw	r3,36(r18)
    6678:	183ee83a 	callr	r3
    667c:	1007883a 	mov	r3,r2
    6680:	80a1c83a 	sub	r16,r16,r2
    6684:	88a3883a 	add	r17,r17,r2
    6688:	00806d0e 	bge	zero,r2,6840 <__sfvwrite_r+0x254>
    668c:	b0800217 	ldw	r2,8(r22)
    6690:	10c5c83a 	sub	r2,r2,r3
    6694:	b0800215 	stw	r2,8(r22)
    6698:	103fee1e 	bne	r2,zero,6654 <__sfvwrite_r+0x68>
    669c:	0009883a 	mov	r4,zero
    66a0:	2005883a 	mov	r2,r4
    66a4:	dfc00a17 	ldw	ra,40(sp)
    66a8:	df000917 	ldw	fp,36(sp)
    66ac:	ddc00817 	ldw	r23,32(sp)
    66b0:	dd800717 	ldw	r22,28(sp)
    66b4:	dd400617 	ldw	r21,24(sp)
    66b8:	dd000517 	ldw	r20,20(sp)
    66bc:	dcc00417 	ldw	r19,16(sp)
    66c0:	dc800317 	ldw	r18,12(sp)
    66c4:	dc400217 	ldw	r17,8(sp)
    66c8:	dc000117 	ldw	r16,4(sp)
    66cc:	dec00b04 	addi	sp,sp,44
    66d0:	f800283a 	ret
    66d4:	00043b40 	call	43b4 <__swsetup_r>
    66d8:	1000e41e 	bne	r2,zero,6a6c <__sfvwrite_r+0x480>
    66dc:	91c0030b 	ldhu	r7,12(r18)
    66e0:	b5400017 	ldw	r21,0(r22)
    66e4:	3880008c 	andi	r2,r7,2
    66e8:	103fd81e 	bne	r2,zero,664c <__sfvwrite_r+0x60>
    66ec:	3880004c 	andi	r2,r7,1
    66f0:	1005003a 	cmpeq	r2,r2,zero
    66f4:	10005726 	beq	r2,zero,6854 <__sfvwrite_r+0x268>
    66f8:	0029883a 	mov	r20,zero
    66fc:	002f883a 	mov	r23,zero
    6700:	a0004226 	beq	r20,zero,680c <__sfvwrite_r+0x220>
    6704:	3880800c 	andi	r2,r7,512
    6708:	94000217 	ldw	r16,8(r18)
    670c:	10008b26 	beq	r2,zero,693c <__sfvwrite_r+0x350>
    6710:	800d883a 	mov	r6,r16
    6714:	a400a536 	bltu	r20,r16,69ac <__sfvwrite_r+0x3c0>
    6718:	3881200c 	andi	r2,r7,1152
    671c:	10002726 	beq	r2,zero,67bc <__sfvwrite_r+0x1d0>
    6720:	90800517 	ldw	r2,20(r18)
    6724:	92000417 	ldw	r8,16(r18)
    6728:	91400017 	ldw	r5,0(r18)
    672c:	1087883a 	add	r3,r2,r2
    6730:	1887883a 	add	r3,r3,r2
    6734:	1808d7fa 	srli	r4,r3,31
    6738:	2a21c83a 	sub	r16,r5,r8
    673c:	80800044 	addi	r2,r16,1
    6740:	20c9883a 	add	r4,r4,r3
    6744:	2027d07a 	srai	r19,r4,1
    6748:	a085883a 	add	r2,r20,r2
    674c:	980d883a 	mov	r6,r19
    6750:	9880022e 	bgeu	r19,r2,675c <__sfvwrite_r+0x170>
    6754:	1027883a 	mov	r19,r2
    6758:	100d883a 	mov	r6,r2
    675c:	3881000c 	andi	r2,r7,1024
    6760:	1000b826 	beq	r2,zero,6a44 <__sfvwrite_r+0x458>
    6764:	300b883a 	mov	r5,r6
    6768:	e009883a 	mov	r4,fp
    676c:	0001b3c0 	call	1b3c <_malloc_r>
    6770:	10003126 	beq	r2,zero,6838 <__sfvwrite_r+0x24c>
    6774:	91400417 	ldw	r5,16(r18)
    6778:	1009883a 	mov	r4,r2
    677c:	800d883a 	mov	r6,r16
    6780:	1023883a 	mov	r17,r2
    6784:	0006f440 	call	6f44 <memcpy>
    6788:	90c0030b 	ldhu	r3,12(r18)
    678c:	00beffc4 	movi	r2,-1025
    6790:	1886703a 	and	r3,r3,r2
    6794:	18c02014 	ori	r3,r3,128
    6798:	90c0030d 	sth	r3,12(r18)
    679c:	9c07c83a 	sub	r3,r19,r16
    67a0:	8c05883a 	add	r2,r17,r16
    67a4:	a00d883a 	mov	r6,r20
    67a8:	a021883a 	mov	r16,r20
    67ac:	90800015 	stw	r2,0(r18)
    67b0:	90c00215 	stw	r3,8(r18)
    67b4:	94400415 	stw	r17,16(r18)
    67b8:	94c00515 	stw	r19,20(r18)
    67bc:	91000017 	ldw	r4,0(r18)
    67c0:	b80b883a 	mov	r5,r23
    67c4:	a023883a 	mov	r17,r20
    67c8:	0006fe40 	call	6fe4 <memmove>
    67cc:	90c00217 	ldw	r3,8(r18)
    67d0:	90800017 	ldw	r2,0(r18)
    67d4:	a027883a 	mov	r19,r20
    67d8:	1c07c83a 	sub	r3,r3,r16
    67dc:	1405883a 	add	r2,r2,r16
    67e0:	90c00215 	stw	r3,8(r18)
    67e4:	a021883a 	mov	r16,r20
    67e8:	90800015 	stw	r2,0(r18)
    67ec:	b0800217 	ldw	r2,8(r22)
    67f0:	1405c83a 	sub	r2,r2,r16
    67f4:	b0800215 	stw	r2,8(r22)
    67f8:	103fa826 	beq	r2,zero,669c <__sfvwrite_r+0xb0>
    67fc:	a469c83a 	sub	r20,r20,r17
    6800:	91c0030b 	ldhu	r7,12(r18)
    6804:	bcef883a 	add	r23,r23,r19
    6808:	a03fbe1e 	bne	r20,zero,6704 <__sfvwrite_r+0x118>
    680c:	adc00017 	ldw	r23,0(r21)
    6810:	ad000117 	ldw	r20,4(r21)
    6814:	ad400204 	addi	r21,r21,8
    6818:	003fb906 	br	6700 <__sfvwrite_r+0x114>
    681c:	ac400017 	ldw	r17,0(r21)
    6820:	ac000117 	ldw	r16,4(r21)
    6824:	ad400204 	addi	r21,r21,8
    6828:	003f8a06 	br	6654 <__sfvwrite_r+0x68>
    682c:	91400417 	ldw	r5,16(r18)
    6830:	e009883a 	mov	r4,fp
    6834:	00062d80 	call	62d8 <_free_r>
    6838:	00800304 	movi	r2,12
    683c:	e0800015 	stw	r2,0(fp)
    6840:	9080030b 	ldhu	r2,12(r18)
    6844:	013fffc4 	movi	r4,-1
    6848:	10801014 	ori	r2,r2,64
    684c:	9080030d 	sth	r2,12(r18)
    6850:	003f9306 	br	66a0 <__sfvwrite_r+0xb4>
    6854:	0027883a 	mov	r19,zero
    6858:	002f883a 	mov	r23,zero
    685c:	d8000015 	stw	zero,0(sp)
    6860:	0029883a 	mov	r20,zero
    6864:	98001e26 	beq	r19,zero,68e0 <__sfvwrite_r+0x2f4>
    6868:	d8c00017 	ldw	r3,0(sp)
    686c:	1804c03a 	cmpne	r2,r3,zero
    6870:	10005e26 	beq	r2,zero,69ec <__sfvwrite_r+0x400>
    6874:	9821883a 	mov	r16,r19
    6878:	a4c0012e 	bgeu	r20,r19,6880 <__sfvwrite_r+0x294>
    687c:	a021883a 	mov	r16,r20
    6880:	91000017 	ldw	r4,0(r18)
    6884:	90800417 	ldw	r2,16(r18)
    6888:	91800217 	ldw	r6,8(r18)
    688c:	91c00517 	ldw	r7,20(r18)
    6890:	1100022e 	bgeu	r2,r4,689c <__sfvwrite_r+0x2b0>
    6894:	31e3883a 	add	r17,r6,r7
    6898:	8c001616 	blt	r17,r16,68f4 <__sfvwrite_r+0x308>
    689c:	81c03816 	blt	r16,r7,6980 <__sfvwrite_r+0x394>
    68a0:	90c00917 	ldw	r3,36(r18)
    68a4:	91400717 	ldw	r5,28(r18)
    68a8:	e009883a 	mov	r4,fp
    68ac:	b80d883a 	mov	r6,r23
    68b0:	183ee83a 	callr	r3
    68b4:	1023883a 	mov	r17,r2
    68b8:	00bfe10e 	bge	zero,r2,6840 <__sfvwrite_r+0x254>
    68bc:	a469c83a 	sub	r20,r20,r17
    68c0:	a0001826 	beq	r20,zero,6924 <__sfvwrite_r+0x338>
    68c4:	b0800217 	ldw	r2,8(r22)
    68c8:	1445c83a 	sub	r2,r2,r17
    68cc:	b0800215 	stw	r2,8(r22)
    68d0:	103f7226 	beq	r2,zero,669c <__sfvwrite_r+0xb0>
    68d4:	9c67c83a 	sub	r19,r19,r17
    68d8:	bc6f883a 	add	r23,r23,r17
    68dc:	983fe21e 	bne	r19,zero,6868 <__sfvwrite_r+0x27c>
    68e0:	adc00017 	ldw	r23,0(r21)
    68e4:	acc00117 	ldw	r19,4(r21)
    68e8:	ad400204 	addi	r21,r21,8
    68ec:	d8000015 	stw	zero,0(sp)
    68f0:	003fdc06 	br	6864 <__sfvwrite_r+0x278>
    68f4:	b80b883a 	mov	r5,r23
    68f8:	880d883a 	mov	r6,r17
    68fc:	0006fe40 	call	6fe4 <memmove>
    6900:	90c00017 	ldw	r3,0(r18)
    6904:	e009883a 	mov	r4,fp
    6908:	900b883a 	mov	r5,r18
    690c:	1c47883a 	add	r3,r3,r17
    6910:	90c00015 	stw	r3,0(r18)
    6914:	0005cbc0 	call	5cbc <_fflush_r>
    6918:	103fc91e 	bne	r2,zero,6840 <__sfvwrite_r+0x254>
    691c:	a469c83a 	sub	r20,r20,r17
    6920:	a03fe81e 	bne	r20,zero,68c4 <__sfvwrite_r+0x2d8>
    6924:	e009883a 	mov	r4,fp
    6928:	900b883a 	mov	r5,r18
    692c:	0005cbc0 	call	5cbc <_fflush_r>
    6930:	103fc31e 	bne	r2,zero,6840 <__sfvwrite_r+0x254>
    6934:	d8000015 	stw	zero,0(sp)
    6938:	003fe206 	br	68c4 <__sfvwrite_r+0x2d8>
    693c:	91000017 	ldw	r4,0(r18)
    6940:	90800417 	ldw	r2,16(r18)
    6944:	1100022e 	bgeu	r2,r4,6950 <__sfvwrite_r+0x364>
    6948:	8023883a 	mov	r17,r16
    694c:	85003136 	bltu	r16,r20,6a14 <__sfvwrite_r+0x428>
    6950:	91c00517 	ldw	r7,20(r18)
    6954:	a1c01836 	bltu	r20,r7,69b8 <__sfvwrite_r+0x3cc>
    6958:	90c00917 	ldw	r3,36(r18)
    695c:	91400717 	ldw	r5,28(r18)
    6960:	e009883a 	mov	r4,fp
    6964:	b80d883a 	mov	r6,r23
    6968:	183ee83a 	callr	r3
    696c:	1021883a 	mov	r16,r2
    6970:	00bfb30e 	bge	zero,r2,6840 <__sfvwrite_r+0x254>
    6974:	1023883a 	mov	r17,r2
    6978:	1027883a 	mov	r19,r2
    697c:	003f9b06 	br	67ec <__sfvwrite_r+0x200>
    6980:	b80b883a 	mov	r5,r23
    6984:	800d883a 	mov	r6,r16
    6988:	0006fe40 	call	6fe4 <memmove>
    698c:	90c00217 	ldw	r3,8(r18)
    6990:	90800017 	ldw	r2,0(r18)
    6994:	8023883a 	mov	r17,r16
    6998:	1c07c83a 	sub	r3,r3,r16
    699c:	1405883a 	add	r2,r2,r16
    69a0:	90c00215 	stw	r3,8(r18)
    69a4:	90800015 	stw	r2,0(r18)
    69a8:	003fc406 	br	68bc <__sfvwrite_r+0x2d0>
    69ac:	a00d883a 	mov	r6,r20
    69b0:	a021883a 	mov	r16,r20
    69b4:	003f8106 	br	67bc <__sfvwrite_r+0x1d0>
    69b8:	b80b883a 	mov	r5,r23
    69bc:	a00d883a 	mov	r6,r20
    69c0:	0006fe40 	call	6fe4 <memmove>
    69c4:	90c00217 	ldw	r3,8(r18)
    69c8:	90800017 	ldw	r2,0(r18)
    69cc:	a021883a 	mov	r16,r20
    69d0:	1d07c83a 	sub	r3,r3,r20
    69d4:	1505883a 	add	r2,r2,r20
    69d8:	a023883a 	mov	r17,r20
    69dc:	a027883a 	mov	r19,r20
    69e0:	90c00215 	stw	r3,8(r18)
    69e4:	90800015 	stw	r2,0(r18)
    69e8:	003f8006 	br	67ec <__sfvwrite_r+0x200>
    69ec:	b809883a 	mov	r4,r23
    69f0:	01400284 	movi	r5,10
    69f4:	980d883a 	mov	r6,r19
    69f8:	0006e600 	call	6e60 <memchr>
    69fc:	10001726 	beq	r2,zero,6a5c <__sfvwrite_r+0x470>
    6a00:	15c5c83a 	sub	r2,r2,r23
    6a04:	15000044 	addi	r20,r2,1
    6a08:	00800044 	movi	r2,1
    6a0c:	d8800015 	stw	r2,0(sp)
    6a10:	003f9806 	br	6874 <__sfvwrite_r+0x288>
    6a14:	b80b883a 	mov	r5,r23
    6a18:	800d883a 	mov	r6,r16
    6a1c:	0006fe40 	call	6fe4 <memmove>
    6a20:	90c00017 	ldw	r3,0(r18)
    6a24:	e009883a 	mov	r4,fp
    6a28:	900b883a 	mov	r5,r18
    6a2c:	1c07883a 	add	r3,r3,r16
    6a30:	90c00015 	stw	r3,0(r18)
    6a34:	8027883a 	mov	r19,r16
    6a38:	0005cbc0 	call	5cbc <_fflush_r>
    6a3c:	103f6b26 	beq	r2,zero,67ec <__sfvwrite_r+0x200>
    6a40:	003f7f06 	br	6840 <__sfvwrite_r+0x254>
    6a44:	400b883a 	mov	r5,r8
    6a48:	e009883a 	mov	r4,fp
    6a4c:	00081500 	call	8150 <_realloc_r>
    6a50:	103f7626 	beq	r2,zero,682c <__sfvwrite_r+0x240>
    6a54:	1023883a 	mov	r17,r2
    6a58:	003f5006 	br	679c <__sfvwrite_r+0x1b0>
    6a5c:	00c00044 	movi	r3,1
    6a60:	9d000044 	addi	r20,r19,1
    6a64:	d8c00015 	stw	r3,0(sp)
    6a68:	003f8206 	br	6874 <__sfvwrite_r+0x288>
    6a6c:	9080030b 	ldhu	r2,12(r18)
    6a70:	00c00244 	movi	r3,9
    6a74:	013fffc4 	movi	r4,-1
    6a78:	10801014 	ori	r2,r2,64
    6a7c:	9080030d 	sth	r2,12(r18)
    6a80:	e0c00015 	stw	r3,0(fp)
    6a84:	003f0606 	br	66a0 <__sfvwrite_r+0xb4>

00006a88 <_fwalk_reent>:
    6a88:	defff704 	addi	sp,sp,-36
    6a8c:	dcc00315 	stw	r19,12(sp)
    6a90:	24c0b804 	addi	r19,r4,736
    6a94:	dd800615 	stw	r22,24(sp)
    6a98:	dd400515 	stw	r21,20(sp)
    6a9c:	dfc00815 	stw	ra,32(sp)
    6aa0:	ddc00715 	stw	r23,28(sp)
    6aa4:	dd000415 	stw	r20,16(sp)
    6aa8:	dc800215 	stw	r18,8(sp)
    6aac:	dc400115 	stw	r17,4(sp)
    6ab0:	dc000015 	stw	r16,0(sp)
    6ab4:	202b883a 	mov	r21,r4
    6ab8:	282d883a 	mov	r22,r5
    6abc:	0005f440 	call	5f44 <__sfp_lock_acquire>
    6ac0:	98002126 	beq	r19,zero,6b48 <_fwalk_reent+0xc0>
    6ac4:	002f883a 	mov	r23,zero
    6ac8:	9c800117 	ldw	r18,4(r19)
    6acc:	9c000217 	ldw	r16,8(r19)
    6ad0:	90bfffc4 	addi	r2,r18,-1
    6ad4:	10000d16 	blt	r2,zero,6b0c <_fwalk_reent+0x84>
    6ad8:	0023883a 	mov	r17,zero
    6adc:	053fffc4 	movi	r20,-1
    6ae0:	8080030f 	ldh	r2,12(r16)
    6ae4:	8c400044 	addi	r17,r17,1
    6ae8:	10000626 	beq	r2,zero,6b04 <_fwalk_reent+0x7c>
    6aec:	8080038f 	ldh	r2,14(r16)
    6af0:	800b883a 	mov	r5,r16
    6af4:	a809883a 	mov	r4,r21
    6af8:	15000226 	beq	r2,r20,6b04 <_fwalk_reent+0x7c>
    6afc:	b03ee83a 	callr	r22
    6b00:	b8aeb03a 	or	r23,r23,r2
    6b04:	84001704 	addi	r16,r16,92
    6b08:	947ff51e 	bne	r18,r17,6ae0 <_fwalk_reent+0x58>
    6b0c:	9cc00017 	ldw	r19,0(r19)
    6b10:	983fed1e 	bne	r19,zero,6ac8 <_fwalk_reent+0x40>
    6b14:	0005f480 	call	5f48 <__sfp_lock_release>
    6b18:	b805883a 	mov	r2,r23
    6b1c:	dfc00817 	ldw	ra,32(sp)
    6b20:	ddc00717 	ldw	r23,28(sp)
    6b24:	dd800617 	ldw	r22,24(sp)
    6b28:	dd400517 	ldw	r21,20(sp)
    6b2c:	dd000417 	ldw	r20,16(sp)
    6b30:	dcc00317 	ldw	r19,12(sp)
    6b34:	dc800217 	ldw	r18,8(sp)
    6b38:	dc400117 	ldw	r17,4(sp)
    6b3c:	dc000017 	ldw	r16,0(sp)
    6b40:	dec00904 	addi	sp,sp,36
    6b44:	f800283a 	ret
    6b48:	002f883a 	mov	r23,zero
    6b4c:	003ff106 	br	6b14 <_fwalk_reent+0x8c>

00006b50 <_fwalk>:
    6b50:	defff804 	addi	sp,sp,-32
    6b54:	dcc00315 	stw	r19,12(sp)
    6b58:	24c0b804 	addi	r19,r4,736
    6b5c:	dd400515 	stw	r21,20(sp)
    6b60:	dfc00715 	stw	ra,28(sp)
    6b64:	dd800615 	stw	r22,24(sp)
    6b68:	dd000415 	stw	r20,16(sp)
    6b6c:	dc800215 	stw	r18,8(sp)
    6b70:	dc400115 	stw	r17,4(sp)
    6b74:	dc000015 	stw	r16,0(sp)
    6b78:	282b883a 	mov	r21,r5
    6b7c:	0005f440 	call	5f44 <__sfp_lock_acquire>
    6b80:	98001f26 	beq	r19,zero,6c00 <_fwalk+0xb0>
    6b84:	002d883a 	mov	r22,zero
    6b88:	9c800117 	ldw	r18,4(r19)
    6b8c:	9c000217 	ldw	r16,8(r19)
    6b90:	90bfffc4 	addi	r2,r18,-1
    6b94:	10000c16 	blt	r2,zero,6bc8 <_fwalk+0x78>
    6b98:	0023883a 	mov	r17,zero
    6b9c:	053fffc4 	movi	r20,-1
    6ba0:	8080030f 	ldh	r2,12(r16)
    6ba4:	8c400044 	addi	r17,r17,1
    6ba8:	10000526 	beq	r2,zero,6bc0 <_fwalk+0x70>
    6bac:	8080038f 	ldh	r2,14(r16)
    6bb0:	8009883a 	mov	r4,r16
    6bb4:	15000226 	beq	r2,r20,6bc0 <_fwalk+0x70>
    6bb8:	a83ee83a 	callr	r21
    6bbc:	b0acb03a 	or	r22,r22,r2
    6bc0:	84001704 	addi	r16,r16,92
    6bc4:	947ff61e 	bne	r18,r17,6ba0 <_fwalk+0x50>
    6bc8:	9cc00017 	ldw	r19,0(r19)
    6bcc:	983fee1e 	bne	r19,zero,6b88 <_fwalk+0x38>
    6bd0:	0005f480 	call	5f48 <__sfp_lock_release>
    6bd4:	b005883a 	mov	r2,r22
    6bd8:	dfc00717 	ldw	ra,28(sp)
    6bdc:	dd800617 	ldw	r22,24(sp)
    6be0:	dd400517 	ldw	r21,20(sp)
    6be4:	dd000417 	ldw	r20,16(sp)
    6be8:	dcc00317 	ldw	r19,12(sp)
    6bec:	dc800217 	ldw	r18,8(sp)
    6bf0:	dc400117 	ldw	r17,4(sp)
    6bf4:	dc000017 	ldw	r16,0(sp)
    6bf8:	dec00804 	addi	sp,sp,32
    6bfc:	f800283a 	ret
    6c00:	002d883a 	mov	r22,zero
    6c04:	003ff206 	br	6bd0 <_fwalk+0x80>

00006c08 <__locale_charset>:
    6c08:	d0a00517 	ldw	r2,-32748(gp)
    6c0c:	f800283a 	ret

00006c10 <_localeconv_r>:
    6c10:	00800074 	movhi	r2,1
    6c14:	10bca604 	addi	r2,r2,-3432
    6c18:	f800283a 	ret

00006c1c <localeconv>:
    6c1c:	00800074 	movhi	r2,1
    6c20:	10852d04 	addi	r2,r2,5300
    6c24:	11000017 	ldw	r4,0(r2)
    6c28:	0006c101 	jmpi	6c10 <_localeconv_r>

00006c2c <_setlocale_r>:
    6c2c:	defffc04 	addi	sp,sp,-16
    6c30:	00c00074 	movhi	r3,1
    6c34:	18fca104 	addi	r3,r3,-3452
    6c38:	dc800215 	stw	r18,8(sp)
    6c3c:	dc400115 	stw	r17,4(sp)
    6c40:	dc000015 	stw	r16,0(sp)
    6c44:	2023883a 	mov	r17,r4
    6c48:	2825883a 	mov	r18,r5
    6c4c:	dfc00315 	stw	ra,12(sp)
    6c50:	3021883a 	mov	r16,r6
    6c54:	3009883a 	mov	r4,r6
    6c58:	180b883a 	mov	r5,r3
    6c5c:	30000926 	beq	r6,zero,6c84 <_setlocale_r+0x58>
    6c60:	00089000 	call	8900 <strcmp>
    6c64:	8009883a 	mov	r4,r16
    6c68:	01400074 	movhi	r5,1
    6c6c:	297c8c04 	addi	r5,r5,-3536
    6c70:	10000b1e 	bne	r2,zero,6ca0 <_setlocale_r+0x74>
    6c74:	8c000d15 	stw	r16,52(r17)
    6c78:	8c800c15 	stw	r18,48(r17)
    6c7c:	00c00074 	movhi	r3,1
    6c80:	18fca104 	addi	r3,r3,-3452
    6c84:	1805883a 	mov	r2,r3
    6c88:	dfc00317 	ldw	ra,12(sp)
    6c8c:	dc800217 	ldw	r18,8(sp)
    6c90:	dc400117 	ldw	r17,4(sp)
    6c94:	dc000017 	ldw	r16,0(sp)
    6c98:	dec00404 	addi	sp,sp,16
    6c9c:	f800283a 	ret
    6ca0:	00089000 	call	8900 <strcmp>
    6ca4:	0007883a 	mov	r3,zero
    6ca8:	103ff226 	beq	r2,zero,6c74 <_setlocale_r+0x48>
    6cac:	003ff506 	br	6c84 <_setlocale_r+0x58>

00006cb0 <setlocale>:
    6cb0:	01800074 	movhi	r6,1
    6cb4:	31852d04 	addi	r6,r6,5300
    6cb8:	2007883a 	mov	r3,r4
    6cbc:	31000017 	ldw	r4,0(r6)
    6cc0:	280d883a 	mov	r6,r5
    6cc4:	180b883a 	mov	r5,r3
    6cc8:	0006c2c1 	jmpi	6c2c <_setlocale_r>

00006ccc <__smakebuf_r>:
    6ccc:	2880030b 	ldhu	r2,12(r5)
    6cd0:	deffed04 	addi	sp,sp,-76
    6cd4:	dc401015 	stw	r17,64(sp)
    6cd8:	1080008c 	andi	r2,r2,2
    6cdc:	dc000f15 	stw	r16,60(sp)
    6ce0:	dfc01215 	stw	ra,72(sp)
    6ce4:	dc801115 	stw	r18,68(sp)
    6ce8:	2821883a 	mov	r16,r5
    6cec:	2023883a 	mov	r17,r4
    6cf0:	10000b26 	beq	r2,zero,6d20 <__smakebuf_r+0x54>
    6cf4:	28c010c4 	addi	r3,r5,67
    6cf8:	00800044 	movi	r2,1
    6cfc:	28800515 	stw	r2,20(r5)
    6d00:	28c00415 	stw	r3,16(r5)
    6d04:	28c00015 	stw	r3,0(r5)
    6d08:	dfc01217 	ldw	ra,72(sp)
    6d0c:	dc801117 	ldw	r18,68(sp)
    6d10:	dc401017 	ldw	r17,64(sp)
    6d14:	dc000f17 	ldw	r16,60(sp)
    6d18:	dec01304 	addi	sp,sp,76
    6d1c:	f800283a 	ret
    6d20:	2940038f 	ldh	r5,14(r5)
    6d24:	28002116 	blt	r5,zero,6dac <__smakebuf_r+0xe0>
    6d28:	d80d883a 	mov	r6,sp
    6d2c:	0008c7c0 	call	8c7c <_fstat_r>
    6d30:	10001e16 	blt	r2,zero,6dac <__smakebuf_r+0xe0>
    6d34:	d8800117 	ldw	r2,4(sp)
    6d38:	00e00014 	movui	r3,32768
    6d3c:	113c000c 	andi	r4,r2,61440
    6d40:	20c03126 	beq	r4,r3,6e08 <__smakebuf_r+0x13c>
    6d44:	8080030b 	ldhu	r2,12(r16)
    6d48:	00c80004 	movi	r3,8192
    6d4c:	10820014 	ori	r2,r2,2048
    6d50:	8080030d 	sth	r2,12(r16)
    6d54:	20c01e26 	beq	r4,r3,6dd0 <__smakebuf_r+0x104>
    6d58:	04810004 	movi	r18,1024
    6d5c:	8809883a 	mov	r4,r17
    6d60:	900b883a 	mov	r5,r18
    6d64:	0001b3c0 	call	1b3c <_malloc_r>
    6d68:	1009883a 	mov	r4,r2
    6d6c:	10003126 	beq	r2,zero,6e34 <__smakebuf_r+0x168>
    6d70:	80c0030b 	ldhu	r3,12(r16)
    6d74:	00800034 	movhi	r2,0
    6d78:	10980e04 	addi	r2,r2,24632
    6d7c:	88800f15 	stw	r2,60(r17)
    6d80:	18c02014 	ori	r3,r3,128
    6d84:	84800515 	stw	r18,20(r16)
    6d88:	80c0030d 	sth	r3,12(r16)
    6d8c:	81000415 	stw	r4,16(r16)
    6d90:	81000015 	stw	r4,0(r16)
    6d94:	dfc01217 	ldw	ra,72(sp)
    6d98:	dc801117 	ldw	r18,68(sp)
    6d9c:	dc401017 	ldw	r17,64(sp)
    6da0:	dc000f17 	ldw	r16,60(sp)
    6da4:	dec01304 	addi	sp,sp,76
    6da8:	f800283a 	ret
    6dac:	80c0030b 	ldhu	r3,12(r16)
    6db0:	1880200c 	andi	r2,r3,128
    6db4:	10000426 	beq	r2,zero,6dc8 <__smakebuf_r+0xfc>
    6db8:	04801004 	movi	r18,64
    6dbc:	18820014 	ori	r2,r3,2048
    6dc0:	8080030d 	sth	r2,12(r16)
    6dc4:	003fe506 	br	6d5c <__smakebuf_r+0x90>
    6dc8:	04810004 	movi	r18,1024
    6dcc:	003ffb06 	br	6dbc <__smakebuf_r+0xf0>
    6dd0:	8140038f 	ldh	r5,14(r16)
    6dd4:	8809883a 	mov	r4,r17
    6dd8:	0008cf00 	call	8cf0 <_isatty_r>
    6ddc:	103fde26 	beq	r2,zero,6d58 <__smakebuf_r+0x8c>
    6de0:	8080030b 	ldhu	r2,12(r16)
    6de4:	80c010c4 	addi	r3,r16,67
    6de8:	04810004 	movi	r18,1024
    6dec:	10800054 	ori	r2,r2,1
    6df0:	8080030d 	sth	r2,12(r16)
    6df4:	00800044 	movi	r2,1
    6df8:	80c00415 	stw	r3,16(r16)
    6dfc:	80800515 	stw	r2,20(r16)
    6e00:	80c00015 	stw	r3,0(r16)
    6e04:	003fd506 	br	6d5c <__smakebuf_r+0x90>
    6e08:	80c00a17 	ldw	r3,40(r16)
    6e0c:	00800074 	movhi	r2,1
    6e10:	10a1ef04 	addi	r2,r2,-30788
    6e14:	18bfcb1e 	bne	r3,r2,6d44 <__smakebuf_r+0x78>
    6e18:	8080030b 	ldhu	r2,12(r16)
    6e1c:	00c10004 	movi	r3,1024
    6e20:	1825883a 	mov	r18,r3
    6e24:	10c4b03a 	or	r2,r2,r3
    6e28:	8080030d 	sth	r2,12(r16)
    6e2c:	80c01315 	stw	r3,76(r16)
    6e30:	003fca06 	br	6d5c <__smakebuf_r+0x90>
    6e34:	8100030b 	ldhu	r4,12(r16)
    6e38:	2080800c 	andi	r2,r4,512
    6e3c:	103fb21e 	bne	r2,zero,6d08 <__smakebuf_r+0x3c>
    6e40:	80c010c4 	addi	r3,r16,67
    6e44:	21000094 	ori	r4,r4,2
    6e48:	00800044 	movi	r2,1
    6e4c:	80800515 	stw	r2,20(r16)
    6e50:	8100030d 	sth	r4,12(r16)
    6e54:	80c00415 	stw	r3,16(r16)
    6e58:	80c00015 	stw	r3,0(r16)
    6e5c:	003faa06 	br	6d08 <__smakebuf_r+0x3c>

00006e60 <memchr>:
    6e60:	008000c4 	movi	r2,3
    6e64:	29403fcc 	andi	r5,r5,255
    6e68:	2007883a 	mov	r3,r4
    6e6c:	1180022e 	bgeu	r2,r6,6e78 <memchr+0x18>
    6e70:	2084703a 	and	r2,r4,r2
    6e74:	10000b26 	beq	r2,zero,6ea4 <memchr+0x44>
    6e78:	313fffc4 	addi	r4,r6,-1
    6e7c:	3000051e 	bne	r6,zero,6e94 <memchr+0x34>
    6e80:	00002c06 	br	6f34 <memchr+0xd4>
    6e84:	213fffc4 	addi	r4,r4,-1
    6e88:	00bfffc4 	movi	r2,-1
    6e8c:	18c00044 	addi	r3,r3,1
    6e90:	20802826 	beq	r4,r2,6f34 <memchr+0xd4>
    6e94:	18800003 	ldbu	r2,0(r3)
    6e98:	28bffa1e 	bne	r5,r2,6e84 <memchr+0x24>
    6e9c:	1805883a 	mov	r2,r3
    6ea0:	f800283a 	ret
    6ea4:	0011883a 	mov	r8,zero
    6ea8:	0007883a 	mov	r3,zero
    6eac:	01c00104 	movi	r7,4
    6eb0:	4004923a 	slli	r2,r8,8
    6eb4:	18c00044 	addi	r3,r3,1
    6eb8:	1151883a 	add	r8,r2,r5
    6ebc:	19fffc1e 	bne	r3,r7,6eb0 <memchr+0x50>
    6ec0:	02bfbff4 	movhi	r10,65279
    6ec4:	52bfbfc4 	addi	r10,r10,-257
    6ec8:	02602074 	movhi	r9,32897
    6ecc:	4a602004 	addi	r9,r9,-32640
    6ed0:	02c000c4 	movi	r11,3
    6ed4:	20800017 	ldw	r2,0(r4)
    6ed8:	31bfff04 	addi	r6,r6,-4
    6edc:	200f883a 	mov	r7,r4
    6ee0:	1204f03a 	xor	r2,r2,r8
    6ee4:	1287883a 	add	r3,r2,r10
    6ee8:	1a46703a 	and	r3,r3,r9
    6eec:	0084303a 	nor	r2,zero,r2
    6ef0:	10c4703a 	and	r2,r2,r3
    6ef4:	10000b26 	beq	r2,zero,6f24 <memchr+0xc4>
    6ef8:	20800003 	ldbu	r2,0(r4)
    6efc:	28800f26 	beq	r5,r2,6f3c <memchr+0xdc>
    6f00:	20800043 	ldbu	r2,1(r4)
    6f04:	21c00044 	addi	r7,r4,1
    6f08:	28800c26 	beq	r5,r2,6f3c <memchr+0xdc>
    6f0c:	20800083 	ldbu	r2,2(r4)
    6f10:	21c00084 	addi	r7,r4,2
    6f14:	28800926 	beq	r5,r2,6f3c <memchr+0xdc>
    6f18:	208000c3 	ldbu	r2,3(r4)
    6f1c:	21c000c4 	addi	r7,r4,3
    6f20:	28800626 	beq	r5,r2,6f3c <memchr+0xdc>
    6f24:	21000104 	addi	r4,r4,4
    6f28:	59bfea36 	bltu	r11,r6,6ed4 <memchr+0x74>
    6f2c:	2007883a 	mov	r3,r4
    6f30:	003fd106 	br	6e78 <memchr+0x18>
    6f34:	0005883a 	mov	r2,zero
    6f38:	f800283a 	ret
    6f3c:	3805883a 	mov	r2,r7
    6f40:	f800283a 	ret

00006f44 <memcpy>:
    6f44:	01c003c4 	movi	r7,15
    6f48:	2007883a 	mov	r3,r4
    6f4c:	3980032e 	bgeu	r7,r6,6f5c <memcpy+0x18>
    6f50:	2904b03a 	or	r2,r5,r4
    6f54:	108000cc 	andi	r2,r2,3
    6f58:	10000926 	beq	r2,zero,6f80 <memcpy+0x3c>
    6f5c:	30000626 	beq	r6,zero,6f78 <memcpy+0x34>
    6f60:	30cd883a 	add	r6,r6,r3
    6f64:	28800003 	ldbu	r2,0(r5)
    6f68:	29400044 	addi	r5,r5,1
    6f6c:	18800005 	stb	r2,0(r3)
    6f70:	18c00044 	addi	r3,r3,1
    6f74:	30fffb1e 	bne	r6,r3,6f64 <memcpy+0x20>
    6f78:	2005883a 	mov	r2,r4
    6f7c:	f800283a 	ret
    6f80:	3811883a 	mov	r8,r7
    6f84:	200f883a 	mov	r7,r4
    6f88:	28c00017 	ldw	r3,0(r5)
    6f8c:	31bffc04 	addi	r6,r6,-16
    6f90:	38c00015 	stw	r3,0(r7)
    6f94:	28800117 	ldw	r2,4(r5)
    6f98:	38800115 	stw	r2,4(r7)
    6f9c:	28c00217 	ldw	r3,8(r5)
    6fa0:	38c00215 	stw	r3,8(r7)
    6fa4:	28800317 	ldw	r2,12(r5)
    6fa8:	29400404 	addi	r5,r5,16
    6fac:	38800315 	stw	r2,12(r7)
    6fb0:	39c00404 	addi	r7,r7,16
    6fb4:	41bff436 	bltu	r8,r6,6f88 <memcpy+0x44>
    6fb8:	008000c4 	movi	r2,3
    6fbc:	1180072e 	bgeu	r2,r6,6fdc <memcpy+0x98>
    6fc0:	1007883a 	mov	r3,r2
    6fc4:	28800017 	ldw	r2,0(r5)
    6fc8:	31bfff04 	addi	r6,r6,-4
    6fcc:	29400104 	addi	r5,r5,4
    6fd0:	38800015 	stw	r2,0(r7)
    6fd4:	39c00104 	addi	r7,r7,4
    6fd8:	19bffa36 	bltu	r3,r6,6fc4 <memcpy+0x80>
    6fdc:	3807883a 	mov	r3,r7
    6fe0:	003fde06 	br	6f5c <memcpy+0x18>

00006fe4 <memmove>:
    6fe4:	2807883a 	mov	r3,r5
    6fe8:	2011883a 	mov	r8,r4
    6fec:	29000c2e 	bgeu	r5,r4,7020 <memmove+0x3c>
    6ff0:	298f883a 	add	r7,r5,r6
    6ff4:	21c00a2e 	bgeu	r4,r7,7020 <memmove+0x3c>
    6ff8:	30000726 	beq	r6,zero,7018 <memmove+0x34>
    6ffc:	2187883a 	add	r3,r4,r6
    7000:	198dc83a 	sub	r6,r3,r6
    7004:	39ffffc4 	addi	r7,r7,-1
    7008:	38800003 	ldbu	r2,0(r7)
    700c:	18ffffc4 	addi	r3,r3,-1
    7010:	18800005 	stb	r2,0(r3)
    7014:	19bffb1e 	bne	r3,r6,7004 <memmove+0x20>
    7018:	2005883a 	mov	r2,r4
    701c:	f800283a 	ret
    7020:	01c003c4 	movi	r7,15
    7024:	39800a36 	bltu	r7,r6,7050 <memmove+0x6c>
    7028:	303ffb26 	beq	r6,zero,7018 <memmove+0x34>
    702c:	400f883a 	mov	r7,r8
    7030:	320d883a 	add	r6,r6,r8
    7034:	28800003 	ldbu	r2,0(r5)
    7038:	29400044 	addi	r5,r5,1
    703c:	38800005 	stb	r2,0(r7)
    7040:	39c00044 	addi	r7,r7,1
    7044:	39bffb1e 	bne	r7,r6,7034 <memmove+0x50>
    7048:	2005883a 	mov	r2,r4
    704c:	f800283a 	ret
    7050:	1904b03a 	or	r2,r3,r4
    7054:	108000cc 	andi	r2,r2,3
    7058:	103ff31e 	bne	r2,zero,7028 <memmove+0x44>
    705c:	3811883a 	mov	r8,r7
    7060:	180b883a 	mov	r5,r3
    7064:	200f883a 	mov	r7,r4
    7068:	28c00017 	ldw	r3,0(r5)
    706c:	31bffc04 	addi	r6,r6,-16
    7070:	38c00015 	stw	r3,0(r7)
    7074:	28800117 	ldw	r2,4(r5)
    7078:	38800115 	stw	r2,4(r7)
    707c:	28c00217 	ldw	r3,8(r5)
    7080:	38c00215 	stw	r3,8(r7)
    7084:	28800317 	ldw	r2,12(r5)
    7088:	29400404 	addi	r5,r5,16
    708c:	38800315 	stw	r2,12(r7)
    7090:	39c00404 	addi	r7,r7,16
    7094:	41bff436 	bltu	r8,r6,7068 <memmove+0x84>
    7098:	008000c4 	movi	r2,3
    709c:	1180072e 	bgeu	r2,r6,70bc <memmove+0xd8>
    70a0:	1007883a 	mov	r3,r2
    70a4:	28800017 	ldw	r2,0(r5)
    70a8:	31bfff04 	addi	r6,r6,-4
    70ac:	29400104 	addi	r5,r5,4
    70b0:	38800015 	stw	r2,0(r7)
    70b4:	39c00104 	addi	r7,r7,4
    70b8:	19bffa36 	bltu	r3,r6,70a4 <memmove+0xc0>
    70bc:	3811883a 	mov	r8,r7
    70c0:	003fd906 	br	7028 <memmove+0x44>

000070c4 <memset>:
    70c4:	008000c4 	movi	r2,3
    70c8:	29403fcc 	andi	r5,r5,255
    70cc:	2007883a 	mov	r3,r4
    70d0:	1180022e 	bgeu	r2,r6,70dc <memset+0x18>
    70d4:	2084703a 	and	r2,r4,r2
    70d8:	10000826 	beq	r2,zero,70fc <memset+0x38>
    70dc:	30000526 	beq	r6,zero,70f4 <memset+0x30>
    70e0:	2805883a 	mov	r2,r5
    70e4:	30cd883a 	add	r6,r6,r3
    70e8:	18800005 	stb	r2,0(r3)
    70ec:	18c00044 	addi	r3,r3,1
    70f0:	19bffd1e 	bne	r3,r6,70e8 <memset+0x24>
    70f4:	2005883a 	mov	r2,r4
    70f8:	f800283a 	ret
    70fc:	2804923a 	slli	r2,r5,8
    7100:	020003c4 	movi	r8,15
    7104:	200f883a 	mov	r7,r4
    7108:	2884b03a 	or	r2,r5,r2
    710c:	1006943a 	slli	r3,r2,16
    7110:	10c6b03a 	or	r3,r2,r3
    7114:	41800a2e 	bgeu	r8,r6,7140 <memset+0x7c>
    7118:	4005883a 	mov	r2,r8
    711c:	31bffc04 	addi	r6,r6,-16
    7120:	38c00015 	stw	r3,0(r7)
    7124:	38c00115 	stw	r3,4(r7)
    7128:	38c00215 	stw	r3,8(r7)
    712c:	38c00315 	stw	r3,12(r7)
    7130:	39c00404 	addi	r7,r7,16
    7134:	11bff936 	bltu	r2,r6,711c <memset+0x58>
    7138:	008000c4 	movi	r2,3
    713c:	1180052e 	bgeu	r2,r6,7154 <memset+0x90>
    7140:	31bfff04 	addi	r6,r6,-4
    7144:	008000c4 	movi	r2,3
    7148:	38c00015 	stw	r3,0(r7)
    714c:	39c00104 	addi	r7,r7,4
    7150:	11bffb36 	bltu	r2,r6,7140 <memset+0x7c>
    7154:	3807883a 	mov	r3,r7
    7158:	003fe006 	br	70dc <memset+0x18>

0000715c <_Bfree>:
    715c:	28000826 	beq	r5,zero,7180 <_Bfree+0x24>
    7160:	28800117 	ldw	r2,4(r5)
    7164:	21001317 	ldw	r4,76(r4)
    7168:	1085883a 	add	r2,r2,r2
    716c:	1085883a 	add	r2,r2,r2
    7170:	1105883a 	add	r2,r2,r4
    7174:	10c00017 	ldw	r3,0(r2)
    7178:	28c00015 	stw	r3,0(r5)
    717c:	11400015 	stw	r5,0(r2)
    7180:	f800283a 	ret

00007184 <__hi0bits>:
    7184:	20bfffec 	andhi	r2,r4,65535
    7188:	10001426 	beq	r2,zero,71dc <__hi0bits+0x58>
    718c:	0007883a 	mov	r3,zero
    7190:	20bfc02c 	andhi	r2,r4,65280
    7194:	1000021e 	bne	r2,zero,71a0 <__hi0bits+0x1c>
    7198:	2008923a 	slli	r4,r4,8
    719c:	18c00204 	addi	r3,r3,8
    71a0:	20bc002c 	andhi	r2,r4,61440
    71a4:	1000021e 	bne	r2,zero,71b0 <__hi0bits+0x2c>
    71a8:	2008913a 	slli	r4,r4,4
    71ac:	18c00104 	addi	r3,r3,4
    71b0:	20b0002c 	andhi	r2,r4,49152
    71b4:	1000031e 	bne	r2,zero,71c4 <__hi0bits+0x40>
    71b8:	2105883a 	add	r2,r4,r4
    71bc:	18c00084 	addi	r3,r3,2
    71c0:	1089883a 	add	r4,r2,r2
    71c4:	20000316 	blt	r4,zero,71d4 <__hi0bits+0x50>
    71c8:	2090002c 	andhi	r2,r4,16384
    71cc:	10000626 	beq	r2,zero,71e8 <__hi0bits+0x64>
    71d0:	18c00044 	addi	r3,r3,1
    71d4:	1805883a 	mov	r2,r3
    71d8:	f800283a 	ret
    71dc:	2008943a 	slli	r4,r4,16
    71e0:	00c00404 	movi	r3,16
    71e4:	003fea06 	br	7190 <__hi0bits+0xc>
    71e8:	00c00804 	movi	r3,32
    71ec:	1805883a 	mov	r2,r3
    71f0:	f800283a 	ret

000071f4 <__lo0bits>:
    71f4:	20c00017 	ldw	r3,0(r4)
    71f8:	188001cc 	andi	r2,r3,7
    71fc:	10000a26 	beq	r2,zero,7228 <__lo0bits+0x34>
    7200:	1880004c 	andi	r2,r3,1
    7204:	1005003a 	cmpeq	r2,r2,zero
    7208:	10002126 	beq	r2,zero,7290 <__lo0bits+0x9c>
    720c:	1880008c 	andi	r2,r3,2
    7210:	1000251e 	bne	r2,zero,72a8 <__lo0bits+0xb4>
    7214:	1804d0ba 	srli	r2,r3,2
    7218:	01400084 	movi	r5,2
    721c:	20800015 	stw	r2,0(r4)
    7220:	2805883a 	mov	r2,r5
    7224:	f800283a 	ret
    7228:	18bfffcc 	andi	r2,r3,65535
    722c:	10001526 	beq	r2,zero,7284 <__lo0bits+0x90>
    7230:	000b883a 	mov	r5,zero
    7234:	18803fcc 	andi	r2,r3,255
    7238:	1000021e 	bne	r2,zero,7244 <__lo0bits+0x50>
    723c:	1806d23a 	srli	r3,r3,8
    7240:	29400204 	addi	r5,r5,8
    7244:	188003cc 	andi	r2,r3,15
    7248:	1000021e 	bne	r2,zero,7254 <__lo0bits+0x60>
    724c:	1806d13a 	srli	r3,r3,4
    7250:	29400104 	addi	r5,r5,4
    7254:	188000cc 	andi	r2,r3,3
    7258:	1000021e 	bne	r2,zero,7264 <__lo0bits+0x70>
    725c:	1806d0ba 	srli	r3,r3,2
    7260:	29400084 	addi	r5,r5,2
    7264:	1880004c 	andi	r2,r3,1
    7268:	1000031e 	bne	r2,zero,7278 <__lo0bits+0x84>
    726c:	1806d07a 	srli	r3,r3,1
    7270:	18000a26 	beq	r3,zero,729c <__lo0bits+0xa8>
    7274:	29400044 	addi	r5,r5,1
    7278:	2805883a 	mov	r2,r5
    727c:	20c00015 	stw	r3,0(r4)
    7280:	f800283a 	ret
    7284:	1806d43a 	srli	r3,r3,16
    7288:	01400404 	movi	r5,16
    728c:	003fe906 	br	7234 <__lo0bits+0x40>
    7290:	000b883a 	mov	r5,zero
    7294:	2805883a 	mov	r2,r5
    7298:	f800283a 	ret
    729c:	01400804 	movi	r5,32
    72a0:	2805883a 	mov	r2,r5
    72a4:	f800283a 	ret
    72a8:	1804d07a 	srli	r2,r3,1
    72ac:	01400044 	movi	r5,1
    72b0:	20800015 	stw	r2,0(r4)
    72b4:	003fda06 	br	7220 <__lo0bits+0x2c>

000072b8 <__mcmp>:
    72b8:	20800417 	ldw	r2,16(r4)
    72bc:	28c00417 	ldw	r3,16(r5)
    72c0:	10cfc83a 	sub	r7,r2,r3
    72c4:	38000c1e 	bne	r7,zero,72f8 <__mcmp+0x40>
    72c8:	18c5883a 	add	r2,r3,r3
    72cc:	1085883a 	add	r2,r2,r2
    72d0:	10c00504 	addi	r3,r2,20
    72d4:	21000504 	addi	r4,r4,20
    72d8:	28cb883a 	add	r5,r5,r3
    72dc:	2085883a 	add	r2,r4,r2
    72e0:	10bfff04 	addi	r2,r2,-4
    72e4:	297fff04 	addi	r5,r5,-4
    72e8:	11800017 	ldw	r6,0(r2)
    72ec:	28c00017 	ldw	r3,0(r5)
    72f0:	30c0031e 	bne	r6,r3,7300 <__mcmp+0x48>
    72f4:	20bffa36 	bltu	r4,r2,72e0 <__mcmp+0x28>
    72f8:	3805883a 	mov	r2,r7
    72fc:	f800283a 	ret
    7300:	30c00336 	bltu	r6,r3,7310 <__mcmp+0x58>
    7304:	01c00044 	movi	r7,1
    7308:	3805883a 	mov	r2,r7
    730c:	f800283a 	ret
    7310:	01ffffc4 	movi	r7,-1
    7314:	003ff806 	br	72f8 <__mcmp+0x40>

00007318 <__ulp>:
    7318:	295ffc2c 	andhi	r5,r5,32752
    731c:	013f3034 	movhi	r4,64704
    7320:	290b883a 	add	r5,r5,r4
    7324:	0145c83a 	sub	r2,zero,r5
    7328:	1007d53a 	srai	r3,r2,20
    732c:	000d883a 	mov	r6,zero
    7330:	0140040e 	bge	zero,r5,7344 <__ulp+0x2c>
    7334:	280f883a 	mov	r7,r5
    7338:	3807883a 	mov	r3,r7
    733c:	3005883a 	mov	r2,r6
    7340:	f800283a 	ret
    7344:	008004c4 	movi	r2,19
    7348:	193ffb04 	addi	r4,r3,-20
    734c:	10c00c0e 	bge	r2,r3,7380 <__ulp+0x68>
    7350:	008007c4 	movi	r2,31
    7354:	1107c83a 	sub	r3,r2,r4
    7358:	00800784 	movi	r2,30
    735c:	01400044 	movi	r5,1
    7360:	11000216 	blt	r2,r4,736c <__ulp+0x54>
    7364:	00800044 	movi	r2,1
    7368:	10ca983a 	sll	r5,r2,r3
    736c:	000f883a 	mov	r7,zero
    7370:	280d883a 	mov	r6,r5
    7374:	3807883a 	mov	r3,r7
    7378:	3005883a 	mov	r2,r6
    737c:	f800283a 	ret
    7380:	00800234 	movhi	r2,8
    7384:	10cfd83a 	sra	r7,r2,r3
    7388:	000d883a 	mov	r6,zero
    738c:	3005883a 	mov	r2,r6
    7390:	3807883a 	mov	r3,r7
    7394:	f800283a 	ret

00007398 <__b2d>:
    7398:	20800417 	ldw	r2,16(r4)
    739c:	defff904 	addi	sp,sp,-28
    73a0:	dd000415 	stw	r20,16(sp)
    73a4:	1085883a 	add	r2,r2,r2
    73a8:	25000504 	addi	r20,r4,20
    73ac:	1085883a 	add	r2,r2,r2
    73b0:	dc000015 	stw	r16,0(sp)
    73b4:	a0a1883a 	add	r16,r20,r2
    73b8:	dd400515 	stw	r21,20(sp)
    73bc:	857fff17 	ldw	r21,-4(r16)
    73c0:	dc400115 	stw	r17,4(sp)
    73c4:	dfc00615 	stw	ra,24(sp)
    73c8:	a809883a 	mov	r4,r21
    73cc:	2823883a 	mov	r17,r5
    73d0:	dcc00315 	stw	r19,12(sp)
    73d4:	dc800215 	stw	r18,8(sp)
    73d8:	00071840 	call	7184 <__hi0bits>
    73dc:	100b883a 	mov	r5,r2
    73e0:	00800804 	movi	r2,32
    73e4:	1145c83a 	sub	r2,r2,r5
    73e8:	88800015 	stw	r2,0(r17)
    73ec:	00800284 	movi	r2,10
    73f0:	80ffff04 	addi	r3,r16,-4
    73f4:	11401416 	blt	r2,r5,7448 <__b2d+0xb0>
    73f8:	008002c4 	movi	r2,11
    73fc:	1149c83a 	sub	r4,r2,r5
    7400:	a0c02736 	bltu	r20,r3,74a0 <__b2d+0x108>
    7404:	000d883a 	mov	r6,zero
    7408:	28800544 	addi	r2,r5,21
    740c:	a906d83a 	srl	r3,r21,r4
    7410:	a884983a 	sll	r2,r21,r2
    7414:	1ccffc34 	orhi	r19,r3,16368
    7418:	11a4b03a 	or	r18,r2,r6
    741c:	9005883a 	mov	r2,r18
    7420:	9807883a 	mov	r3,r19
    7424:	dfc00617 	ldw	ra,24(sp)
    7428:	dd400517 	ldw	r21,20(sp)
    742c:	dd000417 	ldw	r20,16(sp)
    7430:	dcc00317 	ldw	r19,12(sp)
    7434:	dc800217 	ldw	r18,8(sp)
    7438:	dc400117 	ldw	r17,4(sp)
    743c:	dc000017 	ldw	r16,0(sp)
    7440:	dec00704 	addi	sp,sp,28
    7444:	f800283a 	ret
    7448:	a0c00e36 	bltu	r20,r3,7484 <__b2d+0xec>
    744c:	293ffd44 	addi	r4,r5,-11
    7450:	000d883a 	mov	r6,zero
    7454:	20000f26 	beq	r4,zero,7494 <__b2d+0xfc>
    7458:	00800804 	movi	r2,32
    745c:	110bc83a 	sub	r5,r2,r4
    7460:	a0c01236 	bltu	r20,r3,74ac <__b2d+0x114>
    7464:	000f883a 	mov	r7,zero
    7468:	a904983a 	sll	r2,r21,r4
    746c:	3146d83a 	srl	r3,r6,r5
    7470:	3108983a 	sll	r4,r6,r4
    7474:	108ffc34 	orhi	r2,r2,16368
    7478:	18a6b03a 	or	r19,r3,r2
    747c:	3924b03a 	or	r18,r7,r4
    7480:	003fe606 	br	741c <__b2d+0x84>
    7484:	293ffd44 	addi	r4,r5,-11
    7488:	81bffe17 	ldw	r6,-8(r16)
    748c:	80fffe04 	addi	r3,r16,-8
    7490:	203ff11e 	bne	r4,zero,7458 <__b2d+0xc0>
    7494:	accffc34 	orhi	r19,r21,16368
    7498:	3025883a 	mov	r18,r6
    749c:	003fdf06 	br	741c <__b2d+0x84>
    74a0:	18bfff17 	ldw	r2,-4(r3)
    74a4:	110cd83a 	srl	r6,r2,r4
    74a8:	003fd706 	br	7408 <__b2d+0x70>
    74ac:	18bfff17 	ldw	r2,-4(r3)
    74b0:	114ed83a 	srl	r7,r2,r5
    74b4:	003fec06 	br	7468 <__b2d+0xd0>

000074b8 <__ratio>:
    74b8:	defff904 	addi	sp,sp,-28
    74bc:	dc400215 	stw	r17,8(sp)
    74c0:	2823883a 	mov	r17,r5
    74c4:	d80b883a 	mov	r5,sp
    74c8:	dfc00615 	stw	ra,24(sp)
    74cc:	dd000515 	stw	r20,20(sp)
    74d0:	dcc00415 	stw	r19,16(sp)
    74d4:	dc800315 	stw	r18,12(sp)
    74d8:	2025883a 	mov	r18,r4
    74dc:	00073980 	call	7398 <__b2d>
    74e0:	8809883a 	mov	r4,r17
    74e4:	d9400104 	addi	r5,sp,4
    74e8:	1027883a 	mov	r19,r2
    74ec:	1829883a 	mov	r20,r3
    74f0:	00073980 	call	7398 <__b2d>
    74f4:	89000417 	ldw	r4,16(r17)
    74f8:	91c00417 	ldw	r7,16(r18)
    74fc:	d9800117 	ldw	r6,4(sp)
    7500:	180b883a 	mov	r5,r3
    7504:	390fc83a 	sub	r7,r7,r4
    7508:	1009883a 	mov	r4,r2
    750c:	d8800017 	ldw	r2,0(sp)
    7510:	380e917a 	slli	r7,r7,5
    7514:	2011883a 	mov	r8,r4
    7518:	1185c83a 	sub	r2,r2,r6
    751c:	11c5883a 	add	r2,r2,r7
    7520:	1006953a 	slli	r3,r2,20
    7524:	2813883a 	mov	r9,r5
    7528:	00800d0e 	bge	zero,r2,7560 <__ratio+0xa8>
    752c:	1d29883a 	add	r20,r3,r20
    7530:	a00b883a 	mov	r5,r20
    7534:	480f883a 	mov	r7,r9
    7538:	9809883a 	mov	r4,r19
    753c:	400d883a 	mov	r6,r8
    7540:	000a2a40 	call	a2a4 <__divdf3>
    7544:	dfc00617 	ldw	ra,24(sp)
    7548:	dd000517 	ldw	r20,20(sp)
    754c:	dcc00417 	ldw	r19,16(sp)
    7550:	dc800317 	ldw	r18,12(sp)
    7554:	dc400217 	ldw	r17,8(sp)
    7558:	dec00704 	addi	sp,sp,28
    755c:	f800283a 	ret
    7560:	28d3c83a 	sub	r9,r5,r3
    7564:	003ff206 	br	7530 <__ratio+0x78>

00007568 <_mprec_log10>:
    7568:	defffe04 	addi	sp,sp,-8
    756c:	008005c4 	movi	r2,23
    7570:	dc000015 	stw	r16,0(sp)
    7574:	dfc00115 	stw	ra,4(sp)
    7578:	2021883a 	mov	r16,r4
    757c:	11000c16 	blt	r2,r4,75b0 <_mprec_log10+0x48>
    7580:	200490fa 	slli	r2,r4,3
    7584:	00c00074 	movhi	r3,1
    7588:	18fcb204 	addi	r3,r3,-3384
    758c:	10c5883a 	add	r2,r2,r3
    7590:	12400117 	ldw	r9,4(r2)
    7594:	12000017 	ldw	r8,0(r2)
    7598:	4807883a 	mov	r3,r9
    759c:	4005883a 	mov	r2,r8
    75a0:	dfc00117 	ldw	ra,4(sp)
    75a4:	dc000017 	ldw	r16,0(sp)
    75a8:	dec00204 	addi	sp,sp,8
    75ac:	f800283a 	ret
    75b0:	0011883a 	mov	r8,zero
    75b4:	024ffc34 	movhi	r9,16368
    75b8:	0005883a 	mov	r2,zero
    75bc:	00d00934 	movhi	r3,16420
    75c0:	480b883a 	mov	r5,r9
    75c4:	4009883a 	mov	r4,r8
    75c8:	180f883a 	mov	r7,r3
    75cc:	100d883a 	mov	r6,r2
    75d0:	0009ee00 	call	9ee0 <__muldf3>
    75d4:	843fffc4 	addi	r16,r16,-1
    75d8:	1011883a 	mov	r8,r2
    75dc:	1813883a 	mov	r9,r3
    75e0:	803ff51e 	bne	r16,zero,75b8 <_mprec_log10+0x50>
    75e4:	4005883a 	mov	r2,r8
    75e8:	4807883a 	mov	r3,r9
    75ec:	dfc00117 	ldw	ra,4(sp)
    75f0:	dc000017 	ldw	r16,0(sp)
    75f4:	dec00204 	addi	sp,sp,8
    75f8:	f800283a 	ret

000075fc <__copybits>:
    75fc:	297fffc4 	addi	r5,r5,-1
    7600:	30800417 	ldw	r2,16(r6)
    7604:	280bd17a 	srai	r5,r5,5
    7608:	31800504 	addi	r6,r6,20
    760c:	1085883a 	add	r2,r2,r2
    7610:	294b883a 	add	r5,r5,r5
    7614:	294b883a 	add	r5,r5,r5
    7618:	1085883a 	add	r2,r2,r2
    761c:	290b883a 	add	r5,r5,r4
    7620:	3087883a 	add	r3,r6,r2
    7624:	29400104 	addi	r5,r5,4
    7628:	30c0052e 	bgeu	r6,r3,7640 <__copybits+0x44>
    762c:	30800017 	ldw	r2,0(r6)
    7630:	31800104 	addi	r6,r6,4
    7634:	20800015 	stw	r2,0(r4)
    7638:	21000104 	addi	r4,r4,4
    763c:	30fffb36 	bltu	r6,r3,762c <__copybits+0x30>
    7640:	2140032e 	bgeu	r4,r5,7650 <__copybits+0x54>
    7644:	20000015 	stw	zero,0(r4)
    7648:	21000104 	addi	r4,r4,4
    764c:	217ffd36 	bltu	r4,r5,7644 <__copybits+0x48>
    7650:	f800283a 	ret

00007654 <__any_on>:
    7654:	20800417 	ldw	r2,16(r4)
    7658:	2807d17a 	srai	r3,r5,5
    765c:	21000504 	addi	r4,r4,20
    7660:	10c00d0e 	bge	r2,r3,7698 <__any_on+0x44>
    7664:	1085883a 	add	r2,r2,r2
    7668:	1085883a 	add	r2,r2,r2
    766c:	208d883a 	add	r6,r4,r2
    7670:	2180182e 	bgeu	r4,r6,76d4 <__any_on+0x80>
    7674:	30bfff17 	ldw	r2,-4(r6)
    7678:	30ffff04 	addi	r3,r6,-4
    767c:	1000041e 	bne	r2,zero,7690 <__any_on+0x3c>
    7680:	20c0142e 	bgeu	r4,r3,76d4 <__any_on+0x80>
    7684:	18ffff04 	addi	r3,r3,-4
    7688:	18800017 	ldw	r2,0(r3)
    768c:	103ffc26 	beq	r2,zero,7680 <__any_on+0x2c>
    7690:	00800044 	movi	r2,1
    7694:	f800283a 	ret
    7698:	18800a0e 	bge	r3,r2,76c4 <__any_on+0x70>
    769c:	294007cc 	andi	r5,r5,31
    76a0:	28000826 	beq	r5,zero,76c4 <__any_on+0x70>
    76a4:	18c5883a 	add	r2,r3,r3
    76a8:	1085883a 	add	r2,r2,r2
    76ac:	208d883a 	add	r6,r4,r2
    76b0:	30c00017 	ldw	r3,0(r6)
    76b4:	1944d83a 	srl	r2,r3,r5
    76b8:	1144983a 	sll	r2,r2,r5
    76bc:	18bff41e 	bne	r3,r2,7690 <__any_on+0x3c>
    76c0:	003feb06 	br	7670 <__any_on+0x1c>
    76c4:	18c5883a 	add	r2,r3,r3
    76c8:	1085883a 	add	r2,r2,r2
    76cc:	208d883a 	add	r6,r4,r2
    76d0:	003fe706 	br	7670 <__any_on+0x1c>
    76d4:	0005883a 	mov	r2,zero
    76d8:	f800283a 	ret

000076dc <_Balloc>:
    76dc:	20c01317 	ldw	r3,76(r4)
    76e0:	defffb04 	addi	sp,sp,-20
    76e4:	dcc00315 	stw	r19,12(sp)
    76e8:	dc800215 	stw	r18,8(sp)
    76ec:	dfc00415 	stw	ra,16(sp)
    76f0:	2825883a 	mov	r18,r5
    76f4:	dc400115 	stw	r17,4(sp)
    76f8:	dc000015 	stw	r16,0(sp)
    76fc:	2027883a 	mov	r19,r4
    7700:	01800404 	movi	r6,16
    7704:	01400104 	movi	r5,4
    7708:	18001726 	beq	r3,zero,7768 <_Balloc+0x8c>
    770c:	01400044 	movi	r5,1
    7710:	9485883a 	add	r2,r18,r18
    7714:	2ca2983a 	sll	r17,r5,r18
    7718:	1085883a 	add	r2,r2,r2
    771c:	10c7883a 	add	r3,r2,r3
    7720:	1c000017 	ldw	r16,0(r3)
    7724:	8c4d883a 	add	r6,r17,r17
    7728:	318d883a 	add	r6,r6,r6
    772c:	9809883a 	mov	r4,r19
    7730:	31800504 	addi	r6,r6,20
    7734:	80001226 	beq	r16,zero,7780 <_Balloc+0xa4>
    7738:	80800017 	ldw	r2,0(r16)
    773c:	18800015 	stw	r2,0(r3)
    7740:	80000415 	stw	zero,16(r16)
    7744:	80000315 	stw	zero,12(r16)
    7748:	8005883a 	mov	r2,r16
    774c:	dfc00417 	ldw	ra,16(sp)
    7750:	dcc00317 	ldw	r19,12(sp)
    7754:	dc800217 	ldw	r18,8(sp)
    7758:	dc400117 	ldw	r17,4(sp)
    775c:	dc000017 	ldw	r16,0(sp)
    7760:	dec00504 	addi	sp,sp,20
    7764:	f800283a 	ret
    7768:	0008a340 	call	8a34 <_calloc_r>
    776c:	1007883a 	mov	r3,r2
    7770:	0021883a 	mov	r16,zero
    7774:	98801315 	stw	r2,76(r19)
    7778:	103fe41e 	bne	r2,zero,770c <_Balloc+0x30>
    777c:	003ff206 	br	7748 <_Balloc+0x6c>
    7780:	0008a340 	call	8a34 <_calloc_r>
    7784:	103ff026 	beq	r2,zero,7748 <_Balloc+0x6c>
    7788:	1021883a 	mov	r16,r2
    778c:	14800115 	stw	r18,4(r2)
    7790:	14400215 	stw	r17,8(r2)
    7794:	003fea06 	br	7740 <_Balloc+0x64>

00007798 <__d2b>:
    7798:	defff504 	addi	sp,sp,-44
    779c:	dcc00515 	stw	r19,20(sp)
    77a0:	04c00044 	movi	r19,1
    77a4:	dc000215 	stw	r16,8(sp)
    77a8:	2821883a 	mov	r16,r5
    77ac:	980b883a 	mov	r5,r19
    77b0:	ddc00915 	stw	r23,36(sp)
    77b4:	dd800815 	stw	r22,32(sp)
    77b8:	dd400715 	stw	r21,28(sp)
    77bc:	dd000615 	stw	r20,24(sp)
    77c0:	dc800415 	stw	r18,16(sp)
    77c4:	dc400315 	stw	r17,12(sp)
    77c8:	dfc00a15 	stw	ra,40(sp)
    77cc:	3023883a 	mov	r17,r6
    77d0:	382d883a 	mov	r22,r7
    77d4:	ddc00b17 	ldw	r23,44(sp)
    77d8:	00076dc0 	call	76dc <_Balloc>
    77dc:	1025883a 	mov	r18,r2
    77e0:	00a00034 	movhi	r2,32768
    77e4:	10bfffc4 	addi	r2,r2,-1
    77e8:	8888703a 	and	r4,r17,r2
    77ec:	202ad53a 	srli	r21,r4,20
    77f0:	00800434 	movhi	r2,16
    77f4:	10bfffc4 	addi	r2,r2,-1
    77f8:	8886703a 	and	r3,r17,r2
    77fc:	a829003a 	cmpeq	r20,r21,zero
    7800:	800b883a 	mov	r5,r16
    7804:	d8c00115 	stw	r3,4(sp)
    7808:	94000504 	addi	r16,r18,20
    780c:	a000021e 	bne	r20,zero,7818 <__d2b+0x80>
    7810:	18c00434 	orhi	r3,r3,16
    7814:	d8c00115 	stw	r3,4(sp)
    7818:	28002726 	beq	r5,zero,78b8 <__d2b+0x120>
    781c:	d809883a 	mov	r4,sp
    7820:	d9400015 	stw	r5,0(sp)
    7824:	00071f40 	call	71f4 <__lo0bits>
    7828:	100d883a 	mov	r6,r2
    782c:	10003526 	beq	r2,zero,7904 <__d2b+0x16c>
    7830:	d8c00117 	ldw	r3,4(sp)
    7834:	00800804 	movi	r2,32
    7838:	1185c83a 	sub	r2,r2,r6
    783c:	d9000017 	ldw	r4,0(sp)
    7840:	1886983a 	sll	r3,r3,r2
    7844:	1906b03a 	or	r3,r3,r4
    7848:	90c00515 	stw	r3,20(r18)
    784c:	d8c00117 	ldw	r3,4(sp)
    7850:	1986d83a 	srl	r3,r3,r6
    7854:	d8c00115 	stw	r3,4(sp)
    7858:	180b003a 	cmpeq	r5,r3,zero
    785c:	00800084 	movi	r2,2
    7860:	114bc83a 	sub	r5,r2,r5
    7864:	80c00115 	stw	r3,4(r16)
    7868:	91400415 	stw	r5,16(r18)
    786c:	a0001a1e 	bne	r20,zero,78d8 <__d2b+0x140>
    7870:	3545883a 	add	r2,r6,r21
    7874:	10bef344 	addi	r2,r2,-1075
    7878:	00c00d44 	movi	r3,53
    787c:	b0800015 	stw	r2,0(r22)
    7880:	1987c83a 	sub	r3,r3,r6
    7884:	b8c00015 	stw	r3,0(r23)
    7888:	9005883a 	mov	r2,r18
    788c:	dfc00a17 	ldw	ra,40(sp)
    7890:	ddc00917 	ldw	r23,36(sp)
    7894:	dd800817 	ldw	r22,32(sp)
    7898:	dd400717 	ldw	r21,28(sp)
    789c:	dd000617 	ldw	r20,24(sp)
    78a0:	dcc00517 	ldw	r19,20(sp)
    78a4:	dc800417 	ldw	r18,16(sp)
    78a8:	dc400317 	ldw	r17,12(sp)
    78ac:	dc000217 	ldw	r16,8(sp)
    78b0:	dec00b04 	addi	sp,sp,44
    78b4:	f800283a 	ret
    78b8:	d9000104 	addi	r4,sp,4
    78bc:	00071f40 	call	71f4 <__lo0bits>
    78c0:	11800804 	addi	r6,r2,32
    78c4:	d8800117 	ldw	r2,4(sp)
    78c8:	94c00415 	stw	r19,16(r18)
    78cc:	980b883a 	mov	r5,r19
    78d0:	90800515 	stw	r2,20(r18)
    78d4:	a03fe626 	beq	r20,zero,7870 <__d2b+0xd8>
    78d8:	2945883a 	add	r2,r5,r5
    78dc:	1085883a 	add	r2,r2,r2
    78e0:	1405883a 	add	r2,r2,r16
    78e4:	113fff17 	ldw	r4,-4(r2)
    78e8:	30fef384 	addi	r3,r6,-1074
    78ec:	2820917a 	slli	r16,r5,5
    78f0:	b0c00015 	stw	r3,0(r22)
    78f4:	00071840 	call	7184 <__hi0bits>
    78f8:	80a1c83a 	sub	r16,r16,r2
    78fc:	bc000015 	stw	r16,0(r23)
    7900:	003fe106 	br	7888 <__d2b+0xf0>
    7904:	d8800017 	ldw	r2,0(sp)
    7908:	90800515 	stw	r2,20(r18)
    790c:	d8c00117 	ldw	r3,4(sp)
    7910:	003fd106 	br	7858 <__d2b+0xc0>

00007914 <__mdiff>:
    7914:	defffb04 	addi	sp,sp,-20
    7918:	dc000015 	stw	r16,0(sp)
    791c:	2821883a 	mov	r16,r5
    7920:	dc800215 	stw	r18,8(sp)
    7924:	300b883a 	mov	r5,r6
    7928:	2025883a 	mov	r18,r4
    792c:	8009883a 	mov	r4,r16
    7930:	dc400115 	stw	r17,4(sp)
    7934:	dfc00415 	stw	ra,16(sp)
    7938:	dcc00315 	stw	r19,12(sp)
    793c:	3023883a 	mov	r17,r6
    7940:	00072b80 	call	72b8 <__mcmp>
    7944:	10004226 	beq	r2,zero,7a50 <__mdiff+0x13c>
    7948:	10005016 	blt	r2,zero,7a8c <__mdiff+0x178>
    794c:	0027883a 	mov	r19,zero
    7950:	81400117 	ldw	r5,4(r16)
    7954:	9009883a 	mov	r4,r18
    7958:	00076dc0 	call	76dc <_Balloc>
    795c:	1019883a 	mov	r12,r2
    7960:	82800417 	ldw	r10,16(r16)
    7964:	88800417 	ldw	r2,16(r17)
    7968:	81800504 	addi	r6,r16,20
    796c:	5287883a 	add	r3,r10,r10
    7970:	1085883a 	add	r2,r2,r2
    7974:	18c7883a 	add	r3,r3,r3
    7978:	1085883a 	add	r2,r2,r2
    797c:	8a000504 	addi	r8,r17,20
    7980:	64c00315 	stw	r19,12(r12)
    7984:	30db883a 	add	r13,r6,r3
    7988:	4097883a 	add	r11,r8,r2
    798c:	61c00504 	addi	r7,r12,20
    7990:	0013883a 	mov	r9,zero
    7994:	31000017 	ldw	r4,0(r6)
    7998:	41400017 	ldw	r5,0(r8)
    799c:	42000104 	addi	r8,r8,4
    79a0:	20bfffcc 	andi	r2,r4,65535
    79a4:	28ffffcc 	andi	r3,r5,65535
    79a8:	10c5c83a 	sub	r2,r2,r3
    79ac:	1245883a 	add	r2,r2,r9
    79b0:	2008d43a 	srli	r4,r4,16
    79b4:	280ad43a 	srli	r5,r5,16
    79b8:	1007d43a 	srai	r3,r2,16
    79bc:	3880000d 	sth	r2,0(r7)
    79c0:	2149c83a 	sub	r4,r4,r5
    79c4:	20c9883a 	add	r4,r4,r3
    79c8:	3900008d 	sth	r4,2(r7)
    79cc:	31800104 	addi	r6,r6,4
    79d0:	39c00104 	addi	r7,r7,4
    79d4:	2013d43a 	srai	r9,r4,16
    79d8:	42ffee36 	bltu	r8,r11,7994 <__mdiff+0x80>
    79dc:	33400c2e 	bgeu	r6,r13,7a10 <__mdiff+0xfc>
    79e0:	30800017 	ldw	r2,0(r6)
    79e4:	31800104 	addi	r6,r6,4
    79e8:	10ffffcc 	andi	r3,r2,65535
    79ec:	1a47883a 	add	r3,r3,r9
    79f0:	1004d43a 	srli	r2,r2,16
    79f4:	1809d43a 	srai	r4,r3,16
    79f8:	38c0000d 	sth	r3,0(r7)
    79fc:	1105883a 	add	r2,r2,r4
    7a00:	3880008d 	sth	r2,2(r7)
    7a04:	1013d43a 	srai	r9,r2,16
    7a08:	39c00104 	addi	r7,r7,4
    7a0c:	337ff436 	bltu	r6,r13,79e0 <__mdiff+0xcc>
    7a10:	38bfff17 	ldw	r2,-4(r7)
    7a14:	38ffff04 	addi	r3,r7,-4
    7a18:	1000041e 	bne	r2,zero,7a2c <__mdiff+0x118>
    7a1c:	18ffff04 	addi	r3,r3,-4
    7a20:	18800017 	ldw	r2,0(r3)
    7a24:	52bfffc4 	addi	r10,r10,-1
    7a28:	103ffc26 	beq	r2,zero,7a1c <__mdiff+0x108>
    7a2c:	6005883a 	mov	r2,r12
    7a30:	62800415 	stw	r10,16(r12)
    7a34:	dfc00417 	ldw	ra,16(sp)
    7a38:	dcc00317 	ldw	r19,12(sp)
    7a3c:	dc800217 	ldw	r18,8(sp)
    7a40:	dc400117 	ldw	r17,4(sp)
    7a44:	dc000017 	ldw	r16,0(sp)
    7a48:	dec00504 	addi	sp,sp,20
    7a4c:	f800283a 	ret
    7a50:	9009883a 	mov	r4,r18
    7a54:	000b883a 	mov	r5,zero
    7a58:	00076dc0 	call	76dc <_Balloc>
    7a5c:	1019883a 	mov	r12,r2
    7a60:	00800044 	movi	r2,1
    7a64:	60800415 	stw	r2,16(r12)
    7a68:	6005883a 	mov	r2,r12
    7a6c:	60000515 	stw	zero,20(r12)
    7a70:	dfc00417 	ldw	ra,16(sp)
    7a74:	dcc00317 	ldw	r19,12(sp)
    7a78:	dc800217 	ldw	r18,8(sp)
    7a7c:	dc400117 	ldw	r17,4(sp)
    7a80:	dc000017 	ldw	r16,0(sp)
    7a84:	dec00504 	addi	sp,sp,20
    7a88:	f800283a 	ret
    7a8c:	880d883a 	mov	r6,r17
    7a90:	04c00044 	movi	r19,1
    7a94:	8023883a 	mov	r17,r16
    7a98:	3021883a 	mov	r16,r6
    7a9c:	003fac06 	br	7950 <__mdiff+0x3c>

00007aa0 <__lshift>:
    7aa0:	defff904 	addi	sp,sp,-28
    7aa4:	28800417 	ldw	r2,16(r5)
    7aa8:	dc000015 	stw	r16,0(sp)
    7aac:	3021d17a 	srai	r16,r6,5
    7ab0:	28c00217 	ldw	r3,8(r5)
    7ab4:	10800044 	addi	r2,r2,1
    7ab8:	dc400115 	stw	r17,4(sp)
    7abc:	80a3883a 	add	r17,r16,r2
    7ac0:	dd400515 	stw	r21,20(sp)
    7ac4:	dd000415 	stw	r20,16(sp)
    7ac8:	dc800215 	stw	r18,8(sp)
    7acc:	dfc00615 	stw	ra,24(sp)
    7ad0:	2825883a 	mov	r18,r5
    7ad4:	dcc00315 	stw	r19,12(sp)
    7ad8:	3029883a 	mov	r20,r6
    7adc:	202b883a 	mov	r21,r4
    7ae0:	29400117 	ldw	r5,4(r5)
    7ae4:	1c40030e 	bge	r3,r17,7af4 <__lshift+0x54>
    7ae8:	18c7883a 	add	r3,r3,r3
    7aec:	29400044 	addi	r5,r5,1
    7af0:	1c7ffd16 	blt	r3,r17,7ae8 <__lshift+0x48>
    7af4:	a809883a 	mov	r4,r21
    7af8:	00076dc0 	call	76dc <_Balloc>
    7afc:	1027883a 	mov	r19,r2
    7b00:	11400504 	addi	r5,r2,20
    7b04:	0400090e 	bge	zero,r16,7b2c <__lshift+0x8c>
    7b08:	2805883a 	mov	r2,r5
    7b0c:	0007883a 	mov	r3,zero
    7b10:	18c00044 	addi	r3,r3,1
    7b14:	10000015 	stw	zero,0(r2)
    7b18:	10800104 	addi	r2,r2,4
    7b1c:	80fffc1e 	bne	r16,r3,7b10 <__lshift+0x70>
    7b20:	8405883a 	add	r2,r16,r16
    7b24:	1085883a 	add	r2,r2,r2
    7b28:	288b883a 	add	r5,r5,r2
    7b2c:	90800417 	ldw	r2,16(r18)
    7b30:	91000504 	addi	r4,r18,20
    7b34:	a18007cc 	andi	r6,r20,31
    7b38:	1085883a 	add	r2,r2,r2
    7b3c:	1085883a 	add	r2,r2,r2
    7b40:	208f883a 	add	r7,r4,r2
    7b44:	30001e26 	beq	r6,zero,7bc0 <__lshift+0x120>
    7b48:	00800804 	movi	r2,32
    7b4c:	1191c83a 	sub	r8,r2,r6
    7b50:	0007883a 	mov	r3,zero
    7b54:	20800017 	ldw	r2,0(r4)
    7b58:	1184983a 	sll	r2,r2,r6
    7b5c:	1884b03a 	or	r2,r3,r2
    7b60:	28800015 	stw	r2,0(r5)
    7b64:	20c00017 	ldw	r3,0(r4)
    7b68:	21000104 	addi	r4,r4,4
    7b6c:	29400104 	addi	r5,r5,4
    7b70:	1a06d83a 	srl	r3,r3,r8
    7b74:	21fff736 	bltu	r4,r7,7b54 <__lshift+0xb4>
    7b78:	28c00015 	stw	r3,0(r5)
    7b7c:	18000126 	beq	r3,zero,7b84 <__lshift+0xe4>
    7b80:	8c400044 	addi	r17,r17,1
    7b84:	88bfffc4 	addi	r2,r17,-1
    7b88:	98800415 	stw	r2,16(r19)
    7b8c:	a809883a 	mov	r4,r21
    7b90:	900b883a 	mov	r5,r18
    7b94:	000715c0 	call	715c <_Bfree>
    7b98:	9805883a 	mov	r2,r19
    7b9c:	dfc00617 	ldw	ra,24(sp)
    7ba0:	dd400517 	ldw	r21,20(sp)
    7ba4:	dd000417 	ldw	r20,16(sp)
    7ba8:	dcc00317 	ldw	r19,12(sp)
    7bac:	dc800217 	ldw	r18,8(sp)
    7bb0:	dc400117 	ldw	r17,4(sp)
    7bb4:	dc000017 	ldw	r16,0(sp)
    7bb8:	dec00704 	addi	sp,sp,28
    7bbc:	f800283a 	ret
    7bc0:	20800017 	ldw	r2,0(r4)
    7bc4:	21000104 	addi	r4,r4,4
    7bc8:	28800015 	stw	r2,0(r5)
    7bcc:	29400104 	addi	r5,r5,4
    7bd0:	21ffec2e 	bgeu	r4,r7,7b84 <__lshift+0xe4>
    7bd4:	20800017 	ldw	r2,0(r4)
    7bd8:	21000104 	addi	r4,r4,4
    7bdc:	28800015 	stw	r2,0(r5)
    7be0:	29400104 	addi	r5,r5,4
    7be4:	21fff636 	bltu	r4,r7,7bc0 <__lshift+0x120>
    7be8:	003fe606 	br	7b84 <__lshift+0xe4>

00007bec <__multiply>:
    7bec:	defff904 	addi	sp,sp,-28
    7bf0:	dcc00315 	stw	r19,12(sp)
    7bf4:	dc800215 	stw	r18,8(sp)
    7bf8:	2cc00417 	ldw	r19,16(r5)
    7bfc:	34800417 	ldw	r18,16(r6)
    7c00:	dd000415 	stw	r20,16(sp)
    7c04:	dc400115 	stw	r17,4(sp)
    7c08:	dfc00615 	stw	ra,24(sp)
    7c0c:	dd400515 	stw	r21,20(sp)
    7c10:	dc000015 	stw	r16,0(sp)
    7c14:	2823883a 	mov	r17,r5
    7c18:	3029883a 	mov	r20,r6
    7c1c:	9c80040e 	bge	r19,r18,7c30 <__multiply+0x44>
    7c20:	9027883a 	mov	r19,r18
    7c24:	2c800417 	ldw	r18,16(r5)
    7c28:	2829883a 	mov	r20,r5
    7c2c:	3023883a 	mov	r17,r6
    7c30:	88800217 	ldw	r2,8(r17)
    7c34:	9ca1883a 	add	r16,r19,r18
    7c38:	89400117 	ldw	r5,4(r17)
    7c3c:	1400010e 	bge	r2,r16,7c44 <__multiply+0x58>
    7c40:	29400044 	addi	r5,r5,1
    7c44:	00076dc0 	call	76dc <_Balloc>
    7c48:	102b883a 	mov	r21,r2
    7c4c:	8405883a 	add	r2,r16,r16
    7c50:	1085883a 	add	r2,r2,r2
    7c54:	a9000504 	addi	r4,r21,20
    7c58:	209d883a 	add	r14,r4,r2
    7c5c:	2380042e 	bgeu	r4,r14,7c70 <__multiply+0x84>
    7c60:	2005883a 	mov	r2,r4
    7c64:	10000015 	stw	zero,0(r2)
    7c68:	10800104 	addi	r2,r2,4
    7c6c:	13bffd36 	bltu	r2,r14,7c64 <__multiply+0x78>
    7c70:	9485883a 	add	r2,r18,r18
    7c74:	9cc7883a 	add	r3,r19,r19
    7c78:	a1800504 	addi	r6,r20,20
    7c7c:	1085883a 	add	r2,r2,r2
    7c80:	8b400504 	addi	r13,r17,20
    7c84:	18c7883a 	add	r3,r3,r3
    7c88:	309f883a 	add	r15,r6,r2
    7c8c:	68d7883a 	add	r11,r13,r3
    7c90:	33c03b2e 	bgeu	r6,r15,7d80 <__multiply+0x194>
    7c94:	2019883a 	mov	r12,r4
    7c98:	30800017 	ldw	r2,0(r6)
    7c9c:	127fffcc 	andi	r9,r2,65535
    7ca0:	48001826 	beq	r9,zero,7d04 <__multiply+0x118>
    7ca4:	6811883a 	mov	r8,r13
    7ca8:	600f883a 	mov	r7,r12
    7cac:	0015883a 	mov	r10,zero
    7cb0:	40c00017 	ldw	r3,0(r8)
    7cb4:	39400017 	ldw	r5,0(r7)
    7cb8:	42000104 	addi	r8,r8,4
    7cbc:	193fffcc 	andi	r4,r3,65535
    7cc0:	4909383a 	mul	r4,r9,r4
    7cc4:	1806d43a 	srli	r3,r3,16
    7cc8:	28bfffcc 	andi	r2,r5,65535
    7ccc:	5085883a 	add	r2,r10,r2
    7cd0:	2089883a 	add	r4,r4,r2
    7cd4:	48c7383a 	mul	r3,r9,r3
    7cd8:	280ad43a 	srli	r5,r5,16
    7cdc:	2004d43a 	srli	r2,r4,16
    7ce0:	3900000d 	sth	r4,0(r7)
    7ce4:	1947883a 	add	r3,r3,r5
    7ce8:	10c5883a 	add	r2,r2,r3
    7cec:	3880008d 	sth	r2,2(r7)
    7cf0:	1014d43a 	srli	r10,r2,16
    7cf4:	39c00104 	addi	r7,r7,4
    7cf8:	42ffed36 	bltu	r8,r11,7cb0 <__multiply+0xc4>
    7cfc:	3a800015 	stw	r10,0(r7)
    7d00:	30800017 	ldw	r2,0(r6)
    7d04:	1012d43a 	srli	r9,r2,16
    7d08:	48001926 	beq	r9,zero,7d70 <__multiply+0x184>
    7d0c:	60800017 	ldw	r2,0(r12)
    7d10:	6811883a 	mov	r8,r13
    7d14:	600f883a 	mov	r7,r12
    7d18:	0015883a 	mov	r10,zero
    7d1c:	100b883a 	mov	r5,r2
    7d20:	41000017 	ldw	r4,0(r8)
    7d24:	2806d43a 	srli	r3,r5,16
    7d28:	3880000d 	sth	r2,0(r7)
    7d2c:	20bfffcc 	andi	r2,r4,65535
    7d30:	4885383a 	mul	r2,r9,r2
    7d34:	50c7883a 	add	r3,r10,r3
    7d38:	2008d43a 	srli	r4,r4,16
    7d3c:	10c5883a 	add	r2,r2,r3
    7d40:	3880008d 	sth	r2,2(r7)
    7d44:	39c00104 	addi	r7,r7,4
    7d48:	39400017 	ldw	r5,0(r7)
    7d4c:	4909383a 	mul	r4,r9,r4
    7d50:	1004d43a 	srli	r2,r2,16
    7d54:	28ffffcc 	andi	r3,r5,65535
    7d58:	20c9883a 	add	r4,r4,r3
    7d5c:	1105883a 	add	r2,r2,r4
    7d60:	42000104 	addi	r8,r8,4
    7d64:	1014d43a 	srli	r10,r2,16
    7d68:	42ffed36 	bltu	r8,r11,7d20 <__multiply+0x134>
    7d6c:	38800015 	stw	r2,0(r7)
    7d70:	31800104 	addi	r6,r6,4
    7d74:	33c0022e 	bgeu	r6,r15,7d80 <__multiply+0x194>
    7d78:	63000104 	addi	r12,r12,4
    7d7c:	003fc606 	br	7c98 <__multiply+0xac>
    7d80:	0400090e 	bge	zero,r16,7da8 <__multiply+0x1bc>
    7d84:	70bfff17 	ldw	r2,-4(r14)
    7d88:	70ffff04 	addi	r3,r14,-4
    7d8c:	10000326 	beq	r2,zero,7d9c <__multiply+0x1b0>
    7d90:	00000506 	br	7da8 <__multiply+0x1bc>
    7d94:	18800017 	ldw	r2,0(r3)
    7d98:	1000031e 	bne	r2,zero,7da8 <__multiply+0x1bc>
    7d9c:	843fffc4 	addi	r16,r16,-1
    7da0:	18ffff04 	addi	r3,r3,-4
    7da4:	803ffb1e 	bne	r16,zero,7d94 <__multiply+0x1a8>
    7da8:	a805883a 	mov	r2,r21
    7dac:	ac000415 	stw	r16,16(r21)
    7db0:	dfc00617 	ldw	ra,24(sp)
    7db4:	dd400517 	ldw	r21,20(sp)
    7db8:	dd000417 	ldw	r20,16(sp)
    7dbc:	dcc00317 	ldw	r19,12(sp)
    7dc0:	dc800217 	ldw	r18,8(sp)
    7dc4:	dc400117 	ldw	r17,4(sp)
    7dc8:	dc000017 	ldw	r16,0(sp)
    7dcc:	dec00704 	addi	sp,sp,28
    7dd0:	f800283a 	ret

00007dd4 <__i2b>:
    7dd4:	defffd04 	addi	sp,sp,-12
    7dd8:	dc000015 	stw	r16,0(sp)
    7ddc:	04000044 	movi	r16,1
    7de0:	dc800115 	stw	r18,4(sp)
    7de4:	2825883a 	mov	r18,r5
    7de8:	800b883a 	mov	r5,r16
    7dec:	dfc00215 	stw	ra,8(sp)
    7df0:	00076dc0 	call	76dc <_Balloc>
    7df4:	14000415 	stw	r16,16(r2)
    7df8:	14800515 	stw	r18,20(r2)
    7dfc:	dfc00217 	ldw	ra,8(sp)
    7e00:	dc800117 	ldw	r18,4(sp)
    7e04:	dc000017 	ldw	r16,0(sp)
    7e08:	dec00304 	addi	sp,sp,12
    7e0c:	f800283a 	ret

00007e10 <__multadd>:
    7e10:	defffa04 	addi	sp,sp,-24
    7e14:	dc800215 	stw	r18,8(sp)
    7e18:	2c800417 	ldw	r18,16(r5)
    7e1c:	dd000415 	stw	r20,16(sp)
    7e20:	dcc00315 	stw	r19,12(sp)
    7e24:	dc000015 	stw	r16,0(sp)
    7e28:	dfc00515 	stw	ra,20(sp)
    7e2c:	3821883a 	mov	r16,r7
    7e30:	dc400115 	stw	r17,4(sp)
    7e34:	2827883a 	mov	r19,r5
    7e38:	2029883a 	mov	r20,r4
    7e3c:	2a000504 	addi	r8,r5,20
    7e40:	000f883a 	mov	r7,zero
    7e44:	40800017 	ldw	r2,0(r8)
    7e48:	39c00044 	addi	r7,r7,1
    7e4c:	10ffffcc 	andi	r3,r2,65535
    7e50:	1987383a 	mul	r3,r3,r6
    7e54:	1004d43a 	srli	r2,r2,16
    7e58:	1c07883a 	add	r3,r3,r16
    7e5c:	180ad43a 	srli	r5,r3,16
    7e60:	1185383a 	mul	r2,r2,r6
    7e64:	18ffffcc 	andi	r3,r3,65535
    7e68:	1145883a 	add	r2,r2,r5
    7e6c:	1008943a 	slli	r4,r2,16
    7e70:	1020d43a 	srli	r16,r2,16
    7e74:	20c9883a 	add	r4,r4,r3
    7e78:	41000015 	stw	r4,0(r8)
    7e7c:	42000104 	addi	r8,r8,4
    7e80:	3cbff016 	blt	r7,r18,7e44 <__multadd+0x34>
    7e84:	80000826 	beq	r16,zero,7ea8 <__multadd+0x98>
    7e88:	98800217 	ldw	r2,8(r19)
    7e8c:	90800f0e 	bge	r18,r2,7ecc <__multadd+0xbc>
    7e90:	9485883a 	add	r2,r18,r18
    7e94:	1085883a 	add	r2,r2,r2
    7e98:	14c5883a 	add	r2,r2,r19
    7e9c:	90c00044 	addi	r3,r18,1
    7ea0:	14000515 	stw	r16,20(r2)
    7ea4:	98c00415 	stw	r3,16(r19)
    7ea8:	9805883a 	mov	r2,r19
    7eac:	dfc00517 	ldw	ra,20(sp)
    7eb0:	dd000417 	ldw	r20,16(sp)
    7eb4:	dcc00317 	ldw	r19,12(sp)
    7eb8:	dc800217 	ldw	r18,8(sp)
    7ebc:	dc400117 	ldw	r17,4(sp)
    7ec0:	dc000017 	ldw	r16,0(sp)
    7ec4:	dec00604 	addi	sp,sp,24
    7ec8:	f800283a 	ret
    7ecc:	99400117 	ldw	r5,4(r19)
    7ed0:	a009883a 	mov	r4,r20
    7ed4:	29400044 	addi	r5,r5,1
    7ed8:	00076dc0 	call	76dc <_Balloc>
    7edc:	99800417 	ldw	r6,16(r19)
    7ee0:	99400304 	addi	r5,r19,12
    7ee4:	11000304 	addi	r4,r2,12
    7ee8:	318d883a 	add	r6,r6,r6
    7eec:	318d883a 	add	r6,r6,r6
    7ef0:	31800204 	addi	r6,r6,8
    7ef4:	1023883a 	mov	r17,r2
    7ef8:	0006f440 	call	6f44 <memcpy>
    7efc:	980b883a 	mov	r5,r19
    7f00:	a009883a 	mov	r4,r20
    7f04:	000715c0 	call	715c <_Bfree>
    7f08:	8827883a 	mov	r19,r17
    7f0c:	003fe006 	br	7e90 <__multadd+0x80>

00007f10 <__pow5mult>:
    7f10:	defffa04 	addi	sp,sp,-24
    7f14:	308000cc 	andi	r2,r6,3
    7f18:	dd000415 	stw	r20,16(sp)
    7f1c:	dcc00315 	stw	r19,12(sp)
    7f20:	dc000015 	stw	r16,0(sp)
    7f24:	dfc00515 	stw	ra,20(sp)
    7f28:	dc800215 	stw	r18,8(sp)
    7f2c:	dc400115 	stw	r17,4(sp)
    7f30:	3021883a 	mov	r16,r6
    7f34:	2027883a 	mov	r19,r4
    7f38:	2829883a 	mov	r20,r5
    7f3c:	10002b1e 	bne	r2,zero,7fec <__pow5mult+0xdc>
    7f40:	8025d0ba 	srai	r18,r16,2
    7f44:	90001b26 	beq	r18,zero,7fb4 <__pow5mult+0xa4>
    7f48:	9c001217 	ldw	r16,72(r19)
    7f4c:	8000081e 	bne	r16,zero,7f70 <__pow5mult+0x60>
    7f50:	00003006 	br	8014 <__pow5mult+0x104>
    7f54:	800b883a 	mov	r5,r16
    7f58:	800d883a 	mov	r6,r16
    7f5c:	9809883a 	mov	r4,r19
    7f60:	90001426 	beq	r18,zero,7fb4 <__pow5mult+0xa4>
    7f64:	80800017 	ldw	r2,0(r16)
    7f68:	10001b26 	beq	r2,zero,7fd8 <__pow5mult+0xc8>
    7f6c:	1021883a 	mov	r16,r2
    7f70:	9080004c 	andi	r2,r18,1
    7f74:	1005003a 	cmpeq	r2,r2,zero
    7f78:	9025d07a 	srai	r18,r18,1
    7f7c:	800d883a 	mov	r6,r16
    7f80:	9809883a 	mov	r4,r19
    7f84:	a00b883a 	mov	r5,r20
    7f88:	103ff21e 	bne	r2,zero,7f54 <__pow5mult+0x44>
    7f8c:	0007bec0 	call	7bec <__multiply>
    7f90:	a00b883a 	mov	r5,r20
    7f94:	9809883a 	mov	r4,r19
    7f98:	1023883a 	mov	r17,r2
    7f9c:	000715c0 	call	715c <_Bfree>
    7fa0:	8829883a 	mov	r20,r17
    7fa4:	800b883a 	mov	r5,r16
    7fa8:	800d883a 	mov	r6,r16
    7fac:	9809883a 	mov	r4,r19
    7fb0:	903fec1e 	bne	r18,zero,7f64 <__pow5mult+0x54>
    7fb4:	a005883a 	mov	r2,r20
    7fb8:	dfc00517 	ldw	ra,20(sp)
    7fbc:	dd000417 	ldw	r20,16(sp)
    7fc0:	dcc00317 	ldw	r19,12(sp)
    7fc4:	dc800217 	ldw	r18,8(sp)
    7fc8:	dc400117 	ldw	r17,4(sp)
    7fcc:	dc000017 	ldw	r16,0(sp)
    7fd0:	dec00604 	addi	sp,sp,24
    7fd4:	f800283a 	ret
    7fd8:	0007bec0 	call	7bec <__multiply>
    7fdc:	80800015 	stw	r2,0(r16)
    7fe0:	1021883a 	mov	r16,r2
    7fe4:	10000015 	stw	zero,0(r2)
    7fe8:	003fe106 	br	7f70 <__pow5mult+0x60>
    7fec:	1085883a 	add	r2,r2,r2
    7ff0:	00c00074 	movhi	r3,1
    7ff4:	18fcf804 	addi	r3,r3,-3104
    7ff8:	1085883a 	add	r2,r2,r2
    7ffc:	10c5883a 	add	r2,r2,r3
    8000:	11bfff17 	ldw	r6,-4(r2)
    8004:	000f883a 	mov	r7,zero
    8008:	0007e100 	call	7e10 <__multadd>
    800c:	1029883a 	mov	r20,r2
    8010:	003fcb06 	br	7f40 <__pow5mult+0x30>
    8014:	9809883a 	mov	r4,r19
    8018:	01409c44 	movi	r5,625
    801c:	0007dd40 	call	7dd4 <__i2b>
    8020:	98801215 	stw	r2,72(r19)
    8024:	1021883a 	mov	r16,r2
    8028:	10000015 	stw	zero,0(r2)
    802c:	003fd006 	br	7f70 <__pow5mult+0x60>

00008030 <__s2b>:
    8030:	defff904 	addi	sp,sp,-28
    8034:	dcc00315 	stw	r19,12(sp)
    8038:	dc800215 	stw	r18,8(sp)
    803c:	2827883a 	mov	r19,r5
    8040:	2025883a 	mov	r18,r4
    8044:	01400244 	movi	r5,9
    8048:	39000204 	addi	r4,r7,8
    804c:	dd000415 	stw	r20,16(sp)
    8050:	dc400115 	stw	r17,4(sp)
    8054:	dfc00615 	stw	ra,24(sp)
    8058:	dd400515 	stw	r21,20(sp)
    805c:	dc000015 	stw	r16,0(sp)
    8060:	3829883a 	mov	r20,r7
    8064:	3023883a 	mov	r17,r6
    8068:	0001a440 	call	1a44 <__divsi3>
    806c:	00c00044 	movi	r3,1
    8070:	1880350e 	bge	r3,r2,8148 <__s2b+0x118>
    8074:	000b883a 	mov	r5,zero
    8078:	18c7883a 	add	r3,r3,r3
    807c:	29400044 	addi	r5,r5,1
    8080:	18bffd16 	blt	r3,r2,8078 <__s2b+0x48>
    8084:	9009883a 	mov	r4,r18
    8088:	00076dc0 	call	76dc <_Balloc>
    808c:	1011883a 	mov	r8,r2
    8090:	d8800717 	ldw	r2,28(sp)
    8094:	00c00044 	movi	r3,1
    8098:	01800244 	movi	r6,9
    809c:	40800515 	stw	r2,20(r8)
    80a0:	40c00415 	stw	r3,16(r8)
    80a4:	3440260e 	bge	r6,r17,8140 <__s2b+0x110>
    80a8:	3021883a 	mov	r16,r6
    80ac:	99ab883a 	add	r21,r19,r6
    80b0:	9c05883a 	add	r2,r19,r16
    80b4:	11c00007 	ldb	r7,0(r2)
    80b8:	400b883a 	mov	r5,r8
    80bc:	9009883a 	mov	r4,r18
    80c0:	39fff404 	addi	r7,r7,-48
    80c4:	01800284 	movi	r6,10
    80c8:	0007e100 	call	7e10 <__multadd>
    80cc:	84000044 	addi	r16,r16,1
    80d0:	1011883a 	mov	r8,r2
    80d4:	8c3ff61e 	bne	r17,r16,80b0 <__s2b+0x80>
    80d8:	ac45883a 	add	r2,r21,r17
    80dc:	117ffe04 	addi	r5,r2,-8
    80e0:	880d883a 	mov	r6,r17
    80e4:	35000c0e 	bge	r6,r20,8118 <__s2b+0xe8>
    80e8:	a185c83a 	sub	r2,r20,r6
    80ec:	2821883a 	mov	r16,r5
    80f0:	28a3883a 	add	r17,r5,r2
    80f4:	81c00007 	ldb	r7,0(r16)
    80f8:	400b883a 	mov	r5,r8
    80fc:	9009883a 	mov	r4,r18
    8100:	39fff404 	addi	r7,r7,-48
    8104:	01800284 	movi	r6,10
    8108:	0007e100 	call	7e10 <__multadd>
    810c:	84000044 	addi	r16,r16,1
    8110:	1011883a 	mov	r8,r2
    8114:	847ff71e 	bne	r16,r17,80f4 <__s2b+0xc4>
    8118:	4005883a 	mov	r2,r8
    811c:	dfc00617 	ldw	ra,24(sp)
    8120:	dd400517 	ldw	r21,20(sp)
    8124:	dd000417 	ldw	r20,16(sp)
    8128:	dcc00317 	ldw	r19,12(sp)
    812c:	dc800217 	ldw	r18,8(sp)
    8130:	dc400117 	ldw	r17,4(sp)
    8134:	dc000017 	ldw	r16,0(sp)
    8138:	dec00704 	addi	sp,sp,28
    813c:	f800283a 	ret
    8140:	99400284 	addi	r5,r19,10
    8144:	003fe706 	br	80e4 <__s2b+0xb4>
    8148:	000b883a 	mov	r5,zero
    814c:	003fcd06 	br	8084 <__s2b+0x54>

00008150 <_realloc_r>:
    8150:	defff404 	addi	sp,sp,-48
    8154:	dd800815 	stw	r22,32(sp)
    8158:	dc800415 	stw	r18,16(sp)
    815c:	dc400315 	stw	r17,12(sp)
    8160:	dfc00b15 	stw	ra,44(sp)
    8164:	df000a15 	stw	fp,40(sp)
    8168:	ddc00915 	stw	r23,36(sp)
    816c:	dd400715 	stw	r21,28(sp)
    8170:	dd000615 	stw	r20,24(sp)
    8174:	dcc00515 	stw	r19,20(sp)
    8178:	dc000215 	stw	r16,8(sp)
    817c:	2825883a 	mov	r18,r5
    8180:	3023883a 	mov	r17,r6
    8184:	202d883a 	mov	r22,r4
    8188:	2800c926 	beq	r5,zero,84b0 <_realloc_r+0x360>
    818c:	000b7b80 	call	b7b8 <__malloc_lock>
    8190:	943ffe04 	addi	r16,r18,-8
    8194:	88c002c4 	addi	r3,r17,11
    8198:	00800584 	movi	r2,22
    819c:	82000117 	ldw	r8,4(r16)
    81a0:	10c01b2e 	bgeu	r2,r3,8210 <_realloc_r+0xc0>
    81a4:	00bffe04 	movi	r2,-8
    81a8:	188e703a 	and	r7,r3,r2
    81ac:	3839883a 	mov	fp,r7
    81b0:	38001a16 	blt	r7,zero,821c <_realloc_r+0xcc>
    81b4:	e4401936 	bltu	fp,r17,821c <_realloc_r+0xcc>
    81b8:	013fff04 	movi	r4,-4
    81bc:	4126703a 	and	r19,r8,r4
    81c0:	99c02616 	blt	r19,r7,825c <_realloc_r+0x10c>
    81c4:	802b883a 	mov	r21,r16
    81c8:	9829883a 	mov	r20,r19
    81cc:	84000204 	addi	r16,r16,8
    81d0:	a80f883a 	mov	r7,r21
    81d4:	a70dc83a 	sub	r6,r20,fp
    81d8:	008003c4 	movi	r2,15
    81dc:	1180c136 	bltu	r2,r6,84e4 <_realloc_r+0x394>
    81e0:	38800117 	ldw	r2,4(r7)
    81e4:	a549883a 	add	r4,r20,r21
    81e8:	1080004c 	andi	r2,r2,1
    81ec:	a084b03a 	or	r2,r20,r2
    81f0:	38800115 	stw	r2,4(r7)
    81f4:	20c00117 	ldw	r3,4(r4)
    81f8:	18c00054 	ori	r3,r3,1
    81fc:	20c00115 	stw	r3,4(r4)
    8200:	b009883a 	mov	r4,r22
    8204:	000b7d80 	call	b7d8 <__malloc_unlock>
    8208:	8023883a 	mov	r17,r16
    820c:	00000606 	br	8228 <_realloc_r+0xd8>
    8210:	01c00404 	movi	r7,16
    8214:	3839883a 	mov	fp,r7
    8218:	e47fe72e 	bgeu	fp,r17,81b8 <_realloc_r+0x68>
    821c:	00800304 	movi	r2,12
    8220:	0023883a 	mov	r17,zero
    8224:	b0800015 	stw	r2,0(r22)
    8228:	8805883a 	mov	r2,r17
    822c:	dfc00b17 	ldw	ra,44(sp)
    8230:	df000a17 	ldw	fp,40(sp)
    8234:	ddc00917 	ldw	r23,36(sp)
    8238:	dd800817 	ldw	r22,32(sp)
    823c:	dd400717 	ldw	r21,28(sp)
    8240:	dd000617 	ldw	r20,24(sp)
    8244:	dcc00517 	ldw	r19,20(sp)
    8248:	dc800417 	ldw	r18,16(sp)
    824c:	dc400317 	ldw	r17,12(sp)
    8250:	dc000217 	ldw	r16,8(sp)
    8254:	dec00c04 	addi	sp,sp,48
    8258:	f800283a 	ret
    825c:	00800074 	movhi	r2,1
    8260:	10be5c04 	addi	r2,r2,-1680
    8264:	12400217 	ldw	r9,8(r2)
    8268:	84cd883a 	add	r6,r16,r19
    826c:	802b883a 	mov	r21,r16
    8270:	3240b926 	beq	r6,r9,8558 <_realloc_r+0x408>
    8274:	31400117 	ldw	r5,4(r6)
    8278:	00bfff84 	movi	r2,-2
    827c:	2884703a 	and	r2,r5,r2
    8280:	1185883a 	add	r2,r2,r6
    8284:	10c00117 	ldw	r3,4(r2)
    8288:	18c0004c 	andi	r3,r3,1
    828c:	1807003a 	cmpeq	r3,r3,zero
    8290:	1800a326 	beq	r3,zero,8520 <_realloc_r+0x3d0>
    8294:	2908703a 	and	r4,r5,r4
    8298:	9929883a 	add	r20,r19,r4
    829c:	a1c0a30e 	bge	r20,r7,852c <_realloc_r+0x3dc>
    82a0:	4080004c 	andi	r2,r8,1
    82a4:	1000551e 	bne	r2,zero,83fc <_realloc_r+0x2ac>
    82a8:	80800017 	ldw	r2,0(r16)
    82ac:	80afc83a 	sub	r23,r16,r2
    82b0:	b8c00117 	ldw	r3,4(r23)
    82b4:	00bfff04 	movi	r2,-4
    82b8:	1884703a 	and	r2,r3,r2
    82bc:	30002e26 	beq	r6,zero,8378 <_realloc_r+0x228>
    82c0:	3240b926 	beq	r6,r9,85a8 <_realloc_r+0x458>
    82c4:	98a9883a 	add	r20,r19,r2
    82c8:	2509883a 	add	r4,r4,r20
    82cc:	d9000015 	stw	r4,0(sp)
    82d0:	21c02a16 	blt	r4,r7,837c <_realloc_r+0x22c>
    82d4:	30800317 	ldw	r2,12(r6)
    82d8:	30c00217 	ldw	r3,8(r6)
    82dc:	01400904 	movi	r5,36
    82e0:	99bfff04 	addi	r6,r19,-4
    82e4:	18800315 	stw	r2,12(r3)
    82e8:	10c00215 	stw	r3,8(r2)
    82ec:	b9000317 	ldw	r4,12(r23)
    82f0:	b8800217 	ldw	r2,8(r23)
    82f4:	b82b883a 	mov	r21,r23
    82f8:	bc000204 	addi	r16,r23,8
    82fc:	20800215 	stw	r2,8(r4)
    8300:	11000315 	stw	r4,12(r2)
    8304:	2980e436 	bltu	r5,r6,8698 <_realloc_r+0x548>
    8308:	008004c4 	movi	r2,19
    830c:	9009883a 	mov	r4,r18
    8310:	8011883a 	mov	r8,r16
    8314:	11800f2e 	bgeu	r2,r6,8354 <_realloc_r+0x204>
    8318:	90800017 	ldw	r2,0(r18)
    831c:	ba000404 	addi	r8,r23,16
    8320:	91000204 	addi	r4,r18,8
    8324:	b8800215 	stw	r2,8(r23)
    8328:	90c00117 	ldw	r3,4(r18)
    832c:	008006c4 	movi	r2,27
    8330:	b8c00315 	stw	r3,12(r23)
    8334:	1180072e 	bgeu	r2,r6,8354 <_realloc_r+0x204>
    8338:	90c00217 	ldw	r3,8(r18)
    833c:	ba000604 	addi	r8,r23,24
    8340:	91000404 	addi	r4,r18,16
    8344:	b8c00415 	stw	r3,16(r23)
    8348:	90800317 	ldw	r2,12(r18)
    834c:	b8800515 	stw	r2,20(r23)
    8350:	3140e726 	beq	r6,r5,86f0 <_realloc_r+0x5a0>
    8354:	20800017 	ldw	r2,0(r4)
    8358:	dd000017 	ldw	r20,0(sp)
    835c:	b80f883a 	mov	r7,r23
    8360:	40800015 	stw	r2,0(r8)
    8364:	20c00117 	ldw	r3,4(r4)
    8368:	40c00115 	stw	r3,4(r8)
    836c:	20800217 	ldw	r2,8(r4)
    8370:	40800215 	stw	r2,8(r8)
    8374:	003f9706 	br	81d4 <_realloc_r+0x84>
    8378:	98a9883a 	add	r20,r19,r2
    837c:	a1c01f16 	blt	r20,r7,83fc <_realloc_r+0x2ac>
    8380:	b8c00317 	ldw	r3,12(r23)
    8384:	b8800217 	ldw	r2,8(r23)
    8388:	99bfff04 	addi	r6,r19,-4
    838c:	01400904 	movi	r5,36
    8390:	b82b883a 	mov	r21,r23
    8394:	18800215 	stw	r2,8(r3)
    8398:	10c00315 	stw	r3,12(r2)
    839c:	bc000204 	addi	r16,r23,8
    83a0:	2980c336 	bltu	r5,r6,86b0 <_realloc_r+0x560>
    83a4:	008004c4 	movi	r2,19
    83a8:	9009883a 	mov	r4,r18
    83ac:	8011883a 	mov	r8,r16
    83b0:	11800f2e 	bgeu	r2,r6,83f0 <_realloc_r+0x2a0>
    83b4:	90800017 	ldw	r2,0(r18)
    83b8:	ba000404 	addi	r8,r23,16
    83bc:	91000204 	addi	r4,r18,8
    83c0:	b8800215 	stw	r2,8(r23)
    83c4:	90c00117 	ldw	r3,4(r18)
    83c8:	008006c4 	movi	r2,27
    83cc:	b8c00315 	stw	r3,12(r23)
    83d0:	1180072e 	bgeu	r2,r6,83f0 <_realloc_r+0x2a0>
    83d4:	90c00217 	ldw	r3,8(r18)
    83d8:	ba000604 	addi	r8,r23,24
    83dc:	91000404 	addi	r4,r18,16
    83e0:	b8c00415 	stw	r3,16(r23)
    83e4:	90800317 	ldw	r2,12(r18)
    83e8:	b8800515 	stw	r2,20(r23)
    83ec:	3140c726 	beq	r6,r5,870c <_realloc_r+0x5bc>
    83f0:	20800017 	ldw	r2,0(r4)
    83f4:	b80f883a 	mov	r7,r23
    83f8:	003fd906 	br	8360 <_realloc_r+0x210>
    83fc:	880b883a 	mov	r5,r17
    8400:	b009883a 	mov	r4,r22
    8404:	0001b3c0 	call	1b3c <_malloc_r>
    8408:	1023883a 	mov	r17,r2
    840c:	10002526 	beq	r2,zero,84a4 <_realloc_r+0x354>
    8410:	80800117 	ldw	r2,4(r16)
    8414:	00ffff84 	movi	r3,-2
    8418:	893ffe04 	addi	r4,r17,-8
    841c:	10c4703a 	and	r2,r2,r3
    8420:	8085883a 	add	r2,r16,r2
    8424:	20809526 	beq	r4,r2,867c <_realloc_r+0x52c>
    8428:	99bfff04 	addi	r6,r19,-4
    842c:	01c00904 	movi	r7,36
    8430:	39804536 	bltu	r7,r6,8548 <_realloc_r+0x3f8>
    8434:	008004c4 	movi	r2,19
    8438:	9009883a 	mov	r4,r18
    843c:	880b883a 	mov	r5,r17
    8440:	11800f2e 	bgeu	r2,r6,8480 <_realloc_r+0x330>
    8444:	90800017 	ldw	r2,0(r18)
    8448:	89400204 	addi	r5,r17,8
    844c:	91000204 	addi	r4,r18,8
    8450:	88800015 	stw	r2,0(r17)
    8454:	90c00117 	ldw	r3,4(r18)
    8458:	008006c4 	movi	r2,27
    845c:	88c00115 	stw	r3,4(r17)
    8460:	1180072e 	bgeu	r2,r6,8480 <_realloc_r+0x330>
    8464:	90c00217 	ldw	r3,8(r18)
    8468:	89400404 	addi	r5,r17,16
    846c:	91000404 	addi	r4,r18,16
    8470:	88c00215 	stw	r3,8(r17)
    8474:	90800317 	ldw	r2,12(r18)
    8478:	88800315 	stw	r2,12(r17)
    847c:	31c09126 	beq	r6,r7,86c4 <_realloc_r+0x574>
    8480:	20800017 	ldw	r2,0(r4)
    8484:	28800015 	stw	r2,0(r5)
    8488:	20c00117 	ldw	r3,4(r4)
    848c:	28c00115 	stw	r3,4(r5)
    8490:	20800217 	ldw	r2,8(r4)
    8494:	28800215 	stw	r2,8(r5)
    8498:	900b883a 	mov	r5,r18
    849c:	b009883a 	mov	r4,r22
    84a0:	00062d80 	call	62d8 <_free_r>
    84a4:	b009883a 	mov	r4,r22
    84a8:	000b7d80 	call	b7d8 <__malloc_unlock>
    84ac:	003f5e06 	br	8228 <_realloc_r+0xd8>
    84b0:	300b883a 	mov	r5,r6
    84b4:	dfc00b17 	ldw	ra,44(sp)
    84b8:	df000a17 	ldw	fp,40(sp)
    84bc:	ddc00917 	ldw	r23,36(sp)
    84c0:	dd800817 	ldw	r22,32(sp)
    84c4:	dd400717 	ldw	r21,28(sp)
    84c8:	dd000617 	ldw	r20,24(sp)
    84cc:	dcc00517 	ldw	r19,20(sp)
    84d0:	dc800417 	ldw	r18,16(sp)
    84d4:	dc400317 	ldw	r17,12(sp)
    84d8:	dc000217 	ldw	r16,8(sp)
    84dc:	dec00c04 	addi	sp,sp,48
    84e0:	0001b3c1 	jmpi	1b3c <_malloc_r>
    84e4:	38800117 	ldw	r2,4(r7)
    84e8:	e54b883a 	add	r5,fp,r21
    84ec:	31000054 	ori	r4,r6,1
    84f0:	1080004c 	andi	r2,r2,1
    84f4:	1704b03a 	or	r2,r2,fp
    84f8:	38800115 	stw	r2,4(r7)
    84fc:	29000115 	stw	r4,4(r5)
    8500:	2987883a 	add	r3,r5,r6
    8504:	18800117 	ldw	r2,4(r3)
    8508:	29400204 	addi	r5,r5,8
    850c:	b009883a 	mov	r4,r22
    8510:	10800054 	ori	r2,r2,1
    8514:	18800115 	stw	r2,4(r3)
    8518:	00062d80 	call	62d8 <_free_r>
    851c:	003f3806 	br	8200 <_realloc_r+0xb0>
    8520:	000d883a 	mov	r6,zero
    8524:	0009883a 	mov	r4,zero
    8528:	003f5d06 	br	82a0 <_realloc_r+0x150>
    852c:	30c00217 	ldw	r3,8(r6)
    8530:	30800317 	ldw	r2,12(r6)
    8534:	800f883a 	mov	r7,r16
    8538:	84000204 	addi	r16,r16,8
    853c:	10c00215 	stw	r3,8(r2)
    8540:	18800315 	stw	r2,12(r3)
    8544:	003f2306 	br	81d4 <_realloc_r+0x84>
    8548:	8809883a 	mov	r4,r17
    854c:	900b883a 	mov	r5,r18
    8550:	0006fe40 	call	6fe4 <memmove>
    8554:	003fd006 	br	8498 <_realloc_r+0x348>
    8558:	30800117 	ldw	r2,4(r6)
    855c:	e0c00404 	addi	r3,fp,16
    8560:	1108703a 	and	r4,r2,r4
    8564:	9905883a 	add	r2,r19,r4
    8568:	10ff4d16 	blt	r2,r3,82a0 <_realloc_r+0x150>
    856c:	1705c83a 	sub	r2,r2,fp
    8570:	870b883a 	add	r5,r16,fp
    8574:	10800054 	ori	r2,r2,1
    8578:	28800115 	stw	r2,4(r5)
    857c:	80c00117 	ldw	r3,4(r16)
    8580:	00800074 	movhi	r2,1
    8584:	10be5c04 	addi	r2,r2,-1680
    8588:	b009883a 	mov	r4,r22
    858c:	18c0004c 	andi	r3,r3,1
    8590:	e0c6b03a 	or	r3,fp,r3
    8594:	11400215 	stw	r5,8(r2)
    8598:	80c00115 	stw	r3,4(r16)
    859c:	000b7d80 	call	b7d8 <__malloc_unlock>
    85a0:	84400204 	addi	r17,r16,8
    85a4:	003f2006 	br	8228 <_realloc_r+0xd8>
    85a8:	98a9883a 	add	r20,r19,r2
    85ac:	2509883a 	add	r4,r4,r20
    85b0:	e0800404 	addi	r2,fp,16
    85b4:	d9000115 	stw	r4,4(sp)
    85b8:	20bf7016 	blt	r4,r2,837c <_realloc_r+0x22c>
    85bc:	b8c00317 	ldw	r3,12(r23)
    85c0:	b8800217 	ldw	r2,8(r23)
    85c4:	99bfff04 	addi	r6,r19,-4
    85c8:	01400904 	movi	r5,36
    85cc:	18800215 	stw	r2,8(r3)
    85d0:	10c00315 	stw	r3,12(r2)
    85d4:	bc400204 	addi	r17,r23,8
    85d8:	29804136 	bltu	r5,r6,86e0 <_realloc_r+0x590>
    85dc:	008004c4 	movi	r2,19
    85e0:	9009883a 	mov	r4,r18
    85e4:	880f883a 	mov	r7,r17
    85e8:	11800f2e 	bgeu	r2,r6,8628 <_realloc_r+0x4d8>
    85ec:	90800017 	ldw	r2,0(r18)
    85f0:	b9c00404 	addi	r7,r23,16
    85f4:	91000204 	addi	r4,r18,8
    85f8:	b8800215 	stw	r2,8(r23)
    85fc:	90c00117 	ldw	r3,4(r18)
    8600:	008006c4 	movi	r2,27
    8604:	b8c00315 	stw	r3,12(r23)
    8608:	1180072e 	bgeu	r2,r6,8628 <_realloc_r+0x4d8>
    860c:	90c00217 	ldw	r3,8(r18)
    8610:	b9c00604 	addi	r7,r23,24
    8614:	91000404 	addi	r4,r18,16
    8618:	b8c00415 	stw	r3,16(r23)
    861c:	90800317 	ldw	r2,12(r18)
    8620:	b8800515 	stw	r2,20(r23)
    8624:	31404026 	beq	r6,r5,8728 <_realloc_r+0x5d8>
    8628:	20800017 	ldw	r2,0(r4)
    862c:	38800015 	stw	r2,0(r7)
    8630:	20c00117 	ldw	r3,4(r4)
    8634:	38c00115 	stw	r3,4(r7)
    8638:	20800217 	ldw	r2,8(r4)
    863c:	38800215 	stw	r2,8(r7)
    8640:	d8c00117 	ldw	r3,4(sp)
    8644:	bf0b883a 	add	r5,r23,fp
    8648:	b009883a 	mov	r4,r22
    864c:	1f05c83a 	sub	r2,r3,fp
    8650:	10800054 	ori	r2,r2,1
    8654:	28800115 	stw	r2,4(r5)
    8658:	b8c00117 	ldw	r3,4(r23)
    865c:	00800074 	movhi	r2,1
    8660:	10be5c04 	addi	r2,r2,-1680
    8664:	11400215 	stw	r5,8(r2)
    8668:	18c0004c 	andi	r3,r3,1
    866c:	e0c6b03a 	or	r3,fp,r3
    8670:	b8c00115 	stw	r3,4(r23)
    8674:	000b7d80 	call	b7d8 <__malloc_unlock>
    8678:	003eeb06 	br	8228 <_realloc_r+0xd8>
    867c:	20800117 	ldw	r2,4(r4)
    8680:	00ffff04 	movi	r3,-4
    8684:	800f883a 	mov	r7,r16
    8688:	10c4703a 	and	r2,r2,r3
    868c:	98a9883a 	add	r20,r19,r2
    8690:	84000204 	addi	r16,r16,8
    8694:	003ecf06 	br	81d4 <_realloc_r+0x84>
    8698:	900b883a 	mov	r5,r18
    869c:	8009883a 	mov	r4,r16
    86a0:	0006fe40 	call	6fe4 <memmove>
    86a4:	dd000017 	ldw	r20,0(sp)
    86a8:	b80f883a 	mov	r7,r23
    86ac:	003ec906 	br	81d4 <_realloc_r+0x84>
    86b0:	900b883a 	mov	r5,r18
    86b4:	8009883a 	mov	r4,r16
    86b8:	0006fe40 	call	6fe4 <memmove>
    86bc:	b80f883a 	mov	r7,r23
    86c0:	003ec406 	br	81d4 <_realloc_r+0x84>
    86c4:	90c00417 	ldw	r3,16(r18)
    86c8:	89400604 	addi	r5,r17,24
    86cc:	91000604 	addi	r4,r18,24
    86d0:	88c00415 	stw	r3,16(r17)
    86d4:	90800517 	ldw	r2,20(r18)
    86d8:	88800515 	stw	r2,20(r17)
    86dc:	003f6806 	br	8480 <_realloc_r+0x330>
    86e0:	900b883a 	mov	r5,r18
    86e4:	8809883a 	mov	r4,r17
    86e8:	0006fe40 	call	6fe4 <memmove>
    86ec:	003fd406 	br	8640 <_realloc_r+0x4f0>
    86f0:	90c00417 	ldw	r3,16(r18)
    86f4:	91000604 	addi	r4,r18,24
    86f8:	ba000804 	addi	r8,r23,32
    86fc:	b8c00615 	stw	r3,24(r23)
    8700:	90800517 	ldw	r2,20(r18)
    8704:	b8800715 	stw	r2,28(r23)
    8708:	003f1206 	br	8354 <_realloc_r+0x204>
    870c:	90c00417 	ldw	r3,16(r18)
    8710:	91000604 	addi	r4,r18,24
    8714:	ba000804 	addi	r8,r23,32
    8718:	b8c00615 	stw	r3,24(r23)
    871c:	90800517 	ldw	r2,20(r18)
    8720:	b8800715 	stw	r2,28(r23)
    8724:	003f3206 	br	83f0 <_realloc_r+0x2a0>
    8728:	90c00417 	ldw	r3,16(r18)
    872c:	91000604 	addi	r4,r18,24
    8730:	b9c00804 	addi	r7,r23,32
    8734:	b8c00615 	stw	r3,24(r23)
    8738:	90800517 	ldw	r2,20(r18)
    873c:	b8800715 	stw	r2,28(r23)
    8740:	003fb906 	br	8628 <_realloc_r+0x4d8>

00008744 <__isinfd>:
    8744:	200d883a 	mov	r6,r4
    8748:	0109c83a 	sub	r4,zero,r4
    874c:	2188b03a 	or	r4,r4,r6
    8750:	2008d7fa 	srli	r4,r4,31
    8754:	00a00034 	movhi	r2,32768
    8758:	10bfffc4 	addi	r2,r2,-1
    875c:	1144703a 	and	r2,r2,r5
    8760:	2088b03a 	or	r4,r4,r2
    8764:	009ffc34 	movhi	r2,32752
    8768:	1105c83a 	sub	r2,r2,r4
    876c:	0087c83a 	sub	r3,zero,r2
    8770:	10c4b03a 	or	r2,r2,r3
    8774:	1004d7fa 	srli	r2,r2,31
    8778:	00c00044 	movi	r3,1
    877c:	1885c83a 	sub	r2,r3,r2
    8780:	f800283a 	ret

00008784 <__isnand>:
    8784:	200d883a 	mov	r6,r4
    8788:	0109c83a 	sub	r4,zero,r4
    878c:	2188b03a 	or	r4,r4,r6
    8790:	2008d7fa 	srli	r4,r4,31
    8794:	00a00034 	movhi	r2,32768
    8798:	10bfffc4 	addi	r2,r2,-1
    879c:	1144703a 	and	r2,r2,r5
    87a0:	2088b03a 	or	r4,r4,r2
    87a4:	009ffc34 	movhi	r2,32752
    87a8:	1105c83a 	sub	r2,r2,r4
    87ac:	1004d7fa 	srli	r2,r2,31
    87b0:	f800283a 	ret

000087b4 <__sclose>:
    87b4:	2940038f 	ldh	r5,14(r5)
    87b8:	0008ae81 	jmpi	8ae8 <_close_r>

000087bc <__sseek>:
    87bc:	defffe04 	addi	sp,sp,-8
    87c0:	dc000015 	stw	r16,0(sp)
    87c4:	2821883a 	mov	r16,r5
    87c8:	2940038f 	ldh	r5,14(r5)
    87cc:	dfc00115 	stw	ra,4(sp)
    87d0:	0008d600 	call	8d60 <_lseek_r>
    87d4:	1007883a 	mov	r3,r2
    87d8:	00bfffc4 	movi	r2,-1
    87dc:	18800926 	beq	r3,r2,8804 <__sseek+0x48>
    87e0:	8080030b 	ldhu	r2,12(r16)
    87e4:	80c01415 	stw	r3,80(r16)
    87e8:	10840014 	ori	r2,r2,4096
    87ec:	8080030d 	sth	r2,12(r16)
    87f0:	1805883a 	mov	r2,r3
    87f4:	dfc00117 	ldw	ra,4(sp)
    87f8:	dc000017 	ldw	r16,0(sp)
    87fc:	dec00204 	addi	sp,sp,8
    8800:	f800283a 	ret
    8804:	8080030b 	ldhu	r2,12(r16)
    8808:	10bbffcc 	andi	r2,r2,61439
    880c:	8080030d 	sth	r2,12(r16)
    8810:	1805883a 	mov	r2,r3
    8814:	dfc00117 	ldw	ra,4(sp)
    8818:	dc000017 	ldw	r16,0(sp)
    881c:	dec00204 	addi	sp,sp,8
    8820:	f800283a 	ret

00008824 <__swrite>:
    8824:	2880030b 	ldhu	r2,12(r5)
    8828:	defffb04 	addi	sp,sp,-20
    882c:	dcc00315 	stw	r19,12(sp)
    8830:	1080400c 	andi	r2,r2,256
    8834:	dc800215 	stw	r18,8(sp)
    8838:	dc400115 	stw	r17,4(sp)
    883c:	dc000015 	stw	r16,0(sp)
    8840:	3027883a 	mov	r19,r6
    8844:	3825883a 	mov	r18,r7
    8848:	dfc00415 	stw	ra,16(sp)
    884c:	2821883a 	mov	r16,r5
    8850:	000d883a 	mov	r6,zero
    8854:	01c00084 	movi	r7,2
    8858:	2023883a 	mov	r17,r4
    885c:	10000226 	beq	r2,zero,8868 <__swrite+0x44>
    8860:	2940038f 	ldh	r5,14(r5)
    8864:	0008d600 	call	8d60 <_lseek_r>
    8868:	8080030b 	ldhu	r2,12(r16)
    886c:	8140038f 	ldh	r5,14(r16)
    8870:	8809883a 	mov	r4,r17
    8874:	10bbffcc 	andi	r2,r2,61439
    8878:	980d883a 	mov	r6,r19
    887c:	900f883a 	mov	r7,r18
    8880:	8080030d 	sth	r2,12(r16)
    8884:	dfc00417 	ldw	ra,16(sp)
    8888:	dcc00317 	ldw	r19,12(sp)
    888c:	dc800217 	ldw	r18,8(sp)
    8890:	dc400117 	ldw	r17,4(sp)
    8894:	dc000017 	ldw	r16,0(sp)
    8898:	dec00504 	addi	sp,sp,20
    889c:	00089bc1 	jmpi	89bc <_write_r>

000088a0 <__sread>:
    88a0:	defffe04 	addi	sp,sp,-8
    88a4:	dc000015 	stw	r16,0(sp)
    88a8:	2821883a 	mov	r16,r5
    88ac:	2940038f 	ldh	r5,14(r5)
    88b0:	dfc00115 	stw	ra,4(sp)
    88b4:	0008dd80 	call	8dd8 <_read_r>
    88b8:	1007883a 	mov	r3,r2
    88bc:	10000816 	blt	r2,zero,88e0 <__sread+0x40>
    88c0:	80801417 	ldw	r2,80(r16)
    88c4:	10c5883a 	add	r2,r2,r3
    88c8:	80801415 	stw	r2,80(r16)
    88cc:	1805883a 	mov	r2,r3
    88d0:	dfc00117 	ldw	ra,4(sp)
    88d4:	dc000017 	ldw	r16,0(sp)
    88d8:	dec00204 	addi	sp,sp,8
    88dc:	f800283a 	ret
    88e0:	8080030b 	ldhu	r2,12(r16)
    88e4:	10bbffcc 	andi	r2,r2,61439
    88e8:	8080030d 	sth	r2,12(r16)
    88ec:	1805883a 	mov	r2,r3
    88f0:	dfc00117 	ldw	ra,4(sp)
    88f4:	dc000017 	ldw	r16,0(sp)
    88f8:	dec00204 	addi	sp,sp,8
    88fc:	f800283a 	ret

00008900 <strcmp>:
    8900:	2144b03a 	or	r2,r4,r5
    8904:	108000cc 	andi	r2,r2,3
    8908:	10001d1e 	bne	r2,zero,8980 <strcmp+0x80>
    890c:	200f883a 	mov	r7,r4
    8910:	28800017 	ldw	r2,0(r5)
    8914:	21000017 	ldw	r4,0(r4)
    8918:	280d883a 	mov	r6,r5
    891c:	2080161e 	bne	r4,r2,8978 <strcmp+0x78>
    8920:	023fbff4 	movhi	r8,65279
    8924:	423fbfc4 	addi	r8,r8,-257
    8928:	2207883a 	add	r3,r4,r8
    892c:	01602074 	movhi	r5,32897
    8930:	29602004 	addi	r5,r5,-32640
    8934:	1946703a 	and	r3,r3,r5
    8938:	0104303a 	nor	r2,zero,r4
    893c:	10c4703a 	and	r2,r2,r3
    8940:	10001c1e 	bne	r2,zero,89b4 <strcmp+0xb4>
    8944:	4013883a 	mov	r9,r8
    8948:	2811883a 	mov	r8,r5
    894c:	00000106 	br	8954 <strcmp+0x54>
    8950:	1800181e 	bne	r3,zero,89b4 <strcmp+0xb4>
    8954:	39c00104 	addi	r7,r7,4
    8958:	39000017 	ldw	r4,0(r7)
    895c:	31800104 	addi	r6,r6,4
    8960:	31400017 	ldw	r5,0(r6)
    8964:	2245883a 	add	r2,r4,r9
    8968:	1204703a 	and	r2,r2,r8
    896c:	0106303a 	nor	r3,zero,r4
    8970:	1886703a 	and	r3,r3,r2
    8974:	217ff626 	beq	r4,r5,8950 <strcmp+0x50>
    8978:	3809883a 	mov	r4,r7
    897c:	300b883a 	mov	r5,r6
    8980:	20c00007 	ldb	r3,0(r4)
    8984:	1800051e 	bne	r3,zero,899c <strcmp+0x9c>
    8988:	00000606 	br	89a4 <strcmp+0xa4>
    898c:	21000044 	addi	r4,r4,1
    8990:	20c00007 	ldb	r3,0(r4)
    8994:	29400044 	addi	r5,r5,1
    8998:	18000226 	beq	r3,zero,89a4 <strcmp+0xa4>
    899c:	28800007 	ldb	r2,0(r5)
    89a0:	18bffa26 	beq	r3,r2,898c <strcmp+0x8c>
    89a4:	20c00003 	ldbu	r3,0(r4)
    89a8:	28800003 	ldbu	r2,0(r5)
    89ac:	1885c83a 	sub	r2,r3,r2
    89b0:	f800283a 	ret
    89b4:	0005883a 	mov	r2,zero
    89b8:	f800283a 	ret

000089bc <_write_r>:
    89bc:	defffd04 	addi	sp,sp,-12
    89c0:	dc000015 	stw	r16,0(sp)
    89c4:	04000074 	movhi	r16,1
    89c8:	840c8c04 	addi	r16,r16,12848
    89cc:	dc400115 	stw	r17,4(sp)
    89d0:	80000015 	stw	zero,0(r16)
    89d4:	2023883a 	mov	r17,r4
    89d8:	2809883a 	mov	r4,r5
    89dc:	300b883a 	mov	r5,r6
    89e0:	380d883a 	mov	r6,r7
    89e4:	dfc00215 	stw	ra,8(sp)
    89e8:	000bc680 	call	bc68 <write>
    89ec:	1007883a 	mov	r3,r2
    89f0:	00bfffc4 	movi	r2,-1
    89f4:	18800626 	beq	r3,r2,8a10 <_write_r+0x54>
    89f8:	1805883a 	mov	r2,r3
    89fc:	dfc00217 	ldw	ra,8(sp)
    8a00:	dc400117 	ldw	r17,4(sp)
    8a04:	dc000017 	ldw	r16,0(sp)
    8a08:	dec00304 	addi	sp,sp,12
    8a0c:	f800283a 	ret
    8a10:	80800017 	ldw	r2,0(r16)
    8a14:	103ff826 	beq	r2,zero,89f8 <_write_r+0x3c>
    8a18:	88800015 	stw	r2,0(r17)
    8a1c:	1805883a 	mov	r2,r3
    8a20:	dfc00217 	ldw	ra,8(sp)
    8a24:	dc400117 	ldw	r17,4(sp)
    8a28:	dc000017 	ldw	r16,0(sp)
    8a2c:	dec00304 	addi	sp,sp,12
    8a30:	f800283a 	ret

00008a34 <_calloc_r>:
    8a34:	298b383a 	mul	r5,r5,r6
    8a38:	defffe04 	addi	sp,sp,-8
    8a3c:	dc000015 	stw	r16,0(sp)
    8a40:	dfc00115 	stw	ra,4(sp)
    8a44:	0001b3c0 	call	1b3c <_malloc_r>
    8a48:	1021883a 	mov	r16,r2
    8a4c:	01c00904 	movi	r7,36
    8a50:	10000d26 	beq	r2,zero,8a88 <_calloc_r+0x54>
    8a54:	10ffff17 	ldw	r3,-4(r2)
    8a58:	1009883a 	mov	r4,r2
    8a5c:	00bfff04 	movi	r2,-4
    8a60:	1886703a 	and	r3,r3,r2
    8a64:	1887883a 	add	r3,r3,r2
    8a68:	180d883a 	mov	r6,r3
    8a6c:	000b883a 	mov	r5,zero
    8a70:	38c01736 	bltu	r7,r3,8ad0 <_calloc_r+0x9c>
    8a74:	008004c4 	movi	r2,19
    8a78:	10c00836 	bltu	r2,r3,8a9c <_calloc_r+0x68>
    8a7c:	20000215 	stw	zero,8(r4)
    8a80:	20000015 	stw	zero,0(r4)
    8a84:	20000115 	stw	zero,4(r4)
    8a88:	8005883a 	mov	r2,r16
    8a8c:	dfc00117 	ldw	ra,4(sp)
    8a90:	dc000017 	ldw	r16,0(sp)
    8a94:	dec00204 	addi	sp,sp,8
    8a98:	f800283a 	ret
    8a9c:	008006c4 	movi	r2,27
    8aa0:	80000015 	stw	zero,0(r16)
    8aa4:	80000115 	stw	zero,4(r16)
    8aa8:	81000204 	addi	r4,r16,8
    8aac:	10fff32e 	bgeu	r2,r3,8a7c <_calloc_r+0x48>
    8ab0:	80000215 	stw	zero,8(r16)
    8ab4:	80000315 	stw	zero,12(r16)
    8ab8:	81000404 	addi	r4,r16,16
    8abc:	19ffef1e 	bne	r3,r7,8a7c <_calloc_r+0x48>
    8ac0:	81000604 	addi	r4,r16,24
    8ac4:	80000415 	stw	zero,16(r16)
    8ac8:	80000515 	stw	zero,20(r16)
    8acc:	003feb06 	br	8a7c <_calloc_r+0x48>
    8ad0:	00070c40 	call	70c4 <memset>
    8ad4:	8005883a 	mov	r2,r16
    8ad8:	dfc00117 	ldw	ra,4(sp)
    8adc:	dc000017 	ldw	r16,0(sp)
    8ae0:	dec00204 	addi	sp,sp,8
    8ae4:	f800283a 	ret

00008ae8 <_close_r>:
    8ae8:	defffd04 	addi	sp,sp,-12
    8aec:	dc000015 	stw	r16,0(sp)
    8af0:	04000074 	movhi	r16,1
    8af4:	840c8c04 	addi	r16,r16,12848
    8af8:	dc400115 	stw	r17,4(sp)
    8afc:	80000015 	stw	zero,0(r16)
    8b00:	2023883a 	mov	r17,r4
    8b04:	2809883a 	mov	r4,r5
    8b08:	dfc00215 	stw	ra,8(sp)
    8b0c:	000b1340 	call	b134 <close>
    8b10:	1007883a 	mov	r3,r2
    8b14:	00bfffc4 	movi	r2,-1
    8b18:	18800626 	beq	r3,r2,8b34 <_close_r+0x4c>
    8b1c:	1805883a 	mov	r2,r3
    8b20:	dfc00217 	ldw	ra,8(sp)
    8b24:	dc400117 	ldw	r17,4(sp)
    8b28:	dc000017 	ldw	r16,0(sp)
    8b2c:	dec00304 	addi	sp,sp,12
    8b30:	f800283a 	ret
    8b34:	80800017 	ldw	r2,0(r16)
    8b38:	103ff826 	beq	r2,zero,8b1c <_close_r+0x34>
    8b3c:	88800015 	stw	r2,0(r17)
    8b40:	1805883a 	mov	r2,r3
    8b44:	dfc00217 	ldw	ra,8(sp)
    8b48:	dc400117 	ldw	r17,4(sp)
    8b4c:	dc000017 	ldw	r16,0(sp)
    8b50:	dec00304 	addi	sp,sp,12
    8b54:	f800283a 	ret

00008b58 <_fclose_r>:
    8b58:	defffc04 	addi	sp,sp,-16
    8b5c:	dc400115 	stw	r17,4(sp)
    8b60:	dc000015 	stw	r16,0(sp)
    8b64:	dfc00315 	stw	ra,12(sp)
    8b68:	dc800215 	stw	r18,8(sp)
    8b6c:	2821883a 	mov	r16,r5
    8b70:	2023883a 	mov	r17,r4
    8b74:	28002926 	beq	r5,zero,8c1c <_fclose_r+0xc4>
    8b78:	0005f440 	call	5f44 <__sfp_lock_acquire>
    8b7c:	88000226 	beq	r17,zero,8b88 <_fclose_r+0x30>
    8b80:	88800e17 	ldw	r2,56(r17)
    8b84:	10002d26 	beq	r2,zero,8c3c <_fclose_r+0xe4>
    8b88:	8080030f 	ldh	r2,12(r16)
    8b8c:	10002226 	beq	r2,zero,8c18 <_fclose_r+0xc0>
    8b90:	8809883a 	mov	r4,r17
    8b94:	800b883a 	mov	r5,r16
    8b98:	0005cbc0 	call	5cbc <_fflush_r>
    8b9c:	1025883a 	mov	r18,r2
    8ba0:	80800b17 	ldw	r2,44(r16)
    8ba4:	10000426 	beq	r2,zero,8bb8 <_fclose_r+0x60>
    8ba8:	81400717 	ldw	r5,28(r16)
    8bac:	8809883a 	mov	r4,r17
    8bb0:	103ee83a 	callr	r2
    8bb4:	10002a16 	blt	r2,zero,8c60 <_fclose_r+0x108>
    8bb8:	8080030b 	ldhu	r2,12(r16)
    8bbc:	1080200c 	andi	r2,r2,128
    8bc0:	1000231e 	bne	r2,zero,8c50 <_fclose_r+0xf8>
    8bc4:	81400c17 	ldw	r5,48(r16)
    8bc8:	28000526 	beq	r5,zero,8be0 <_fclose_r+0x88>
    8bcc:	80801004 	addi	r2,r16,64
    8bd0:	28800226 	beq	r5,r2,8bdc <_fclose_r+0x84>
    8bd4:	8809883a 	mov	r4,r17
    8bd8:	00062d80 	call	62d8 <_free_r>
    8bdc:	80000c15 	stw	zero,48(r16)
    8be0:	81401117 	ldw	r5,68(r16)
    8be4:	28000326 	beq	r5,zero,8bf4 <_fclose_r+0x9c>
    8be8:	8809883a 	mov	r4,r17
    8bec:	00062d80 	call	62d8 <_free_r>
    8bf0:	80001115 	stw	zero,68(r16)
    8bf4:	8000030d 	sth	zero,12(r16)
    8bf8:	0005f480 	call	5f48 <__sfp_lock_release>
    8bfc:	9005883a 	mov	r2,r18
    8c00:	dfc00317 	ldw	ra,12(sp)
    8c04:	dc800217 	ldw	r18,8(sp)
    8c08:	dc400117 	ldw	r17,4(sp)
    8c0c:	dc000017 	ldw	r16,0(sp)
    8c10:	dec00404 	addi	sp,sp,16
    8c14:	f800283a 	ret
    8c18:	0005f480 	call	5f48 <__sfp_lock_release>
    8c1c:	0025883a 	mov	r18,zero
    8c20:	9005883a 	mov	r2,r18
    8c24:	dfc00317 	ldw	ra,12(sp)
    8c28:	dc800217 	ldw	r18,8(sp)
    8c2c:	dc400117 	ldw	r17,4(sp)
    8c30:	dc000017 	ldw	r16,0(sp)
    8c34:	dec00404 	addi	sp,sp,16
    8c38:	f800283a 	ret
    8c3c:	8809883a 	mov	r4,r17
    8c40:	0005f540 	call	5f54 <__sinit>
    8c44:	8080030f 	ldh	r2,12(r16)
    8c48:	103fd11e 	bne	r2,zero,8b90 <_fclose_r+0x38>
    8c4c:	003ff206 	br	8c18 <_fclose_r+0xc0>
    8c50:	81400417 	ldw	r5,16(r16)
    8c54:	8809883a 	mov	r4,r17
    8c58:	00062d80 	call	62d8 <_free_r>
    8c5c:	003fd906 	br	8bc4 <_fclose_r+0x6c>
    8c60:	04bfffc4 	movi	r18,-1
    8c64:	003fd406 	br	8bb8 <_fclose_r+0x60>

00008c68 <fclose>:
    8c68:	00800074 	movhi	r2,1
    8c6c:	10852d04 	addi	r2,r2,5300
    8c70:	200b883a 	mov	r5,r4
    8c74:	11000017 	ldw	r4,0(r2)
    8c78:	0008b581 	jmpi	8b58 <_fclose_r>

00008c7c <_fstat_r>:
    8c7c:	defffd04 	addi	sp,sp,-12
    8c80:	dc000015 	stw	r16,0(sp)
    8c84:	04000074 	movhi	r16,1
    8c88:	840c8c04 	addi	r16,r16,12848
    8c8c:	dc400115 	stw	r17,4(sp)
    8c90:	80000015 	stw	zero,0(r16)
    8c94:	2023883a 	mov	r17,r4
    8c98:	2809883a 	mov	r4,r5
    8c9c:	300b883a 	mov	r5,r6
    8ca0:	dfc00215 	stw	ra,8(sp)
    8ca4:	000b2bc0 	call	b2bc <fstat>
    8ca8:	1007883a 	mov	r3,r2
    8cac:	00bfffc4 	movi	r2,-1
    8cb0:	18800626 	beq	r3,r2,8ccc <_fstat_r+0x50>
    8cb4:	1805883a 	mov	r2,r3
    8cb8:	dfc00217 	ldw	ra,8(sp)
    8cbc:	dc400117 	ldw	r17,4(sp)
    8cc0:	dc000017 	ldw	r16,0(sp)
    8cc4:	dec00304 	addi	sp,sp,12
    8cc8:	f800283a 	ret
    8ccc:	80800017 	ldw	r2,0(r16)
    8cd0:	103ff826 	beq	r2,zero,8cb4 <_fstat_r+0x38>
    8cd4:	88800015 	stw	r2,0(r17)
    8cd8:	1805883a 	mov	r2,r3
    8cdc:	dfc00217 	ldw	ra,8(sp)
    8ce0:	dc400117 	ldw	r17,4(sp)
    8ce4:	dc000017 	ldw	r16,0(sp)
    8ce8:	dec00304 	addi	sp,sp,12
    8cec:	f800283a 	ret

00008cf0 <_isatty_r>:
    8cf0:	defffd04 	addi	sp,sp,-12
    8cf4:	dc000015 	stw	r16,0(sp)
    8cf8:	04000074 	movhi	r16,1
    8cfc:	840c8c04 	addi	r16,r16,12848
    8d00:	dc400115 	stw	r17,4(sp)
    8d04:	80000015 	stw	zero,0(r16)
    8d08:	2023883a 	mov	r17,r4
    8d0c:	2809883a 	mov	r4,r5
    8d10:	dfc00215 	stw	ra,8(sp)
    8d14:	000b3f00 	call	b3f0 <isatty>
    8d18:	1007883a 	mov	r3,r2
    8d1c:	00bfffc4 	movi	r2,-1
    8d20:	18800626 	beq	r3,r2,8d3c <_isatty_r+0x4c>
    8d24:	1805883a 	mov	r2,r3
    8d28:	dfc00217 	ldw	ra,8(sp)
    8d2c:	dc400117 	ldw	r17,4(sp)
    8d30:	dc000017 	ldw	r16,0(sp)
    8d34:	dec00304 	addi	sp,sp,12
    8d38:	f800283a 	ret
    8d3c:	80800017 	ldw	r2,0(r16)
    8d40:	103ff826 	beq	r2,zero,8d24 <_isatty_r+0x34>
    8d44:	88800015 	stw	r2,0(r17)
    8d48:	1805883a 	mov	r2,r3
    8d4c:	dfc00217 	ldw	ra,8(sp)
    8d50:	dc400117 	ldw	r17,4(sp)
    8d54:	dc000017 	ldw	r16,0(sp)
    8d58:	dec00304 	addi	sp,sp,12
    8d5c:	f800283a 	ret

00008d60 <_lseek_r>:
    8d60:	defffd04 	addi	sp,sp,-12
    8d64:	dc000015 	stw	r16,0(sp)
    8d68:	04000074 	movhi	r16,1
    8d6c:	840c8c04 	addi	r16,r16,12848
    8d70:	dc400115 	stw	r17,4(sp)
    8d74:	80000015 	stw	zero,0(r16)
    8d78:	2023883a 	mov	r17,r4
    8d7c:	2809883a 	mov	r4,r5
    8d80:	300b883a 	mov	r5,r6
    8d84:	380d883a 	mov	r6,r7
    8d88:	dfc00215 	stw	ra,8(sp)
    8d8c:	000b5fc0 	call	b5fc <lseek>
    8d90:	1007883a 	mov	r3,r2
    8d94:	00bfffc4 	movi	r2,-1
    8d98:	18800626 	beq	r3,r2,8db4 <_lseek_r+0x54>
    8d9c:	1805883a 	mov	r2,r3
    8da0:	dfc00217 	ldw	ra,8(sp)
    8da4:	dc400117 	ldw	r17,4(sp)
    8da8:	dc000017 	ldw	r16,0(sp)
    8dac:	dec00304 	addi	sp,sp,12
    8db0:	f800283a 	ret
    8db4:	80800017 	ldw	r2,0(r16)
    8db8:	103ff826 	beq	r2,zero,8d9c <_lseek_r+0x3c>
    8dbc:	88800015 	stw	r2,0(r17)
    8dc0:	1805883a 	mov	r2,r3
    8dc4:	dfc00217 	ldw	ra,8(sp)
    8dc8:	dc400117 	ldw	r17,4(sp)
    8dcc:	dc000017 	ldw	r16,0(sp)
    8dd0:	dec00304 	addi	sp,sp,12
    8dd4:	f800283a 	ret

00008dd8 <_read_r>:
    8dd8:	defffd04 	addi	sp,sp,-12
    8ddc:	dc000015 	stw	r16,0(sp)
    8de0:	04000074 	movhi	r16,1
    8de4:	840c8c04 	addi	r16,r16,12848
    8de8:	dc400115 	stw	r17,4(sp)
    8dec:	80000015 	stw	zero,0(r16)
    8df0:	2023883a 	mov	r17,r4
    8df4:	2809883a 	mov	r4,r5
    8df8:	300b883a 	mov	r5,r6
    8dfc:	380d883a 	mov	r6,r7
    8e00:	dfc00215 	stw	ra,8(sp)
    8e04:	000b7f80 	call	b7f8 <read>
    8e08:	1007883a 	mov	r3,r2
    8e0c:	00bfffc4 	movi	r2,-1
    8e10:	18800626 	beq	r3,r2,8e2c <_read_r+0x54>
    8e14:	1805883a 	mov	r2,r3
    8e18:	dfc00217 	ldw	ra,8(sp)
    8e1c:	dc400117 	ldw	r17,4(sp)
    8e20:	dc000017 	ldw	r16,0(sp)
    8e24:	dec00304 	addi	sp,sp,12
    8e28:	f800283a 	ret
    8e2c:	80800017 	ldw	r2,0(r16)
    8e30:	103ff826 	beq	r2,zero,8e14 <_read_r+0x3c>
    8e34:	88800015 	stw	r2,0(r17)
    8e38:	1805883a 	mov	r2,r3
    8e3c:	dfc00217 	ldw	ra,8(sp)
    8e40:	dc400117 	ldw	r17,4(sp)
    8e44:	dc000017 	ldw	r16,0(sp)
    8e48:	dec00304 	addi	sp,sp,12
    8e4c:	f800283a 	ret

00008e50 <__udivdi3>:
    8e50:	defff004 	addi	sp,sp,-64
    8e54:	2005883a 	mov	r2,r4
    8e58:	3011883a 	mov	r8,r6
    8e5c:	df000e15 	stw	fp,56(sp)
    8e60:	dd000a15 	stw	r20,40(sp)
    8e64:	dc000615 	stw	r16,24(sp)
    8e68:	dfc00f15 	stw	ra,60(sp)
    8e6c:	ddc00d15 	stw	r23,52(sp)
    8e70:	dd800c15 	stw	r22,48(sp)
    8e74:	dd400b15 	stw	r21,44(sp)
    8e78:	dcc00915 	stw	r19,36(sp)
    8e7c:	dc800815 	stw	r18,32(sp)
    8e80:	dc400715 	stw	r17,28(sp)
    8e84:	4021883a 	mov	r16,r8
    8e88:	1039883a 	mov	fp,r2
    8e8c:	2829883a 	mov	r20,r5
    8e90:	38003b1e 	bne	r7,zero,8f80 <__udivdi3+0x130>
    8e94:	2a005c36 	bltu	r5,r8,9008 <__udivdi3+0x1b8>
    8e98:	4000a626 	beq	r8,zero,9134 <__udivdi3+0x2e4>
    8e9c:	00bfffd4 	movui	r2,65535
    8ea0:	14009e36 	bltu	r2,r16,911c <__udivdi3+0x2cc>
    8ea4:	00803fc4 	movi	r2,255
    8ea8:	14013d36 	bltu	r2,r16,93a0 <__udivdi3+0x550>
    8eac:	000b883a 	mov	r5,zero
    8eb0:	0005883a 	mov	r2,zero
    8eb4:	8084d83a 	srl	r2,r16,r2
    8eb8:	01000074 	movhi	r4,1
    8ebc:	213d0004 	addi	r4,r4,-3072
    8ec0:	01800804 	movi	r6,32
    8ec4:	1105883a 	add	r2,r2,r4
    8ec8:	10c00003 	ldbu	r3,0(r2)
    8ecc:	28c7883a 	add	r3,r5,r3
    8ed0:	30edc83a 	sub	r22,r6,r3
    8ed4:	b000ee1e 	bne	r22,zero,9290 <__udivdi3+0x440>
    8ed8:	802ad43a 	srli	r21,r16,16
    8edc:	00800044 	movi	r2,1
    8ee0:	a423c83a 	sub	r17,r20,r16
    8ee4:	85ffffcc 	andi	r23,r16,65535
    8ee8:	d8800315 	stw	r2,12(sp)
    8eec:	8809883a 	mov	r4,r17
    8ef0:	a80b883a 	mov	r5,r21
    8ef4:	0001b040 	call	1b04 <__udivsi3>
    8ef8:	8809883a 	mov	r4,r17
    8efc:	a80b883a 	mov	r5,r21
    8f00:	102d883a 	mov	r22,r2
    8f04:	0001b0c0 	call	1b0c <__umodsi3>
    8f08:	1004943a 	slli	r2,r2,16
    8f0c:	e006d43a 	srli	r3,fp,16
    8f10:	bda3383a 	mul	r17,r23,r22
    8f14:	10c4b03a 	or	r2,r2,r3
    8f18:	1440042e 	bgeu	r2,r17,8f2c <__udivdi3+0xdc>
    8f1c:	1405883a 	add	r2,r2,r16
    8f20:	b5bfffc4 	addi	r22,r22,-1
    8f24:	14000136 	bltu	r2,r16,8f2c <__udivdi3+0xdc>
    8f28:	14413d36 	bltu	r2,r17,9420 <__udivdi3+0x5d0>
    8f2c:	1463c83a 	sub	r17,r2,r17
    8f30:	8809883a 	mov	r4,r17
    8f34:	a80b883a 	mov	r5,r21
    8f38:	0001b040 	call	1b04 <__udivsi3>
    8f3c:	8809883a 	mov	r4,r17
    8f40:	a80b883a 	mov	r5,r21
    8f44:	1029883a 	mov	r20,r2
    8f48:	0001b0c0 	call	1b0c <__umodsi3>
    8f4c:	1004943a 	slli	r2,r2,16
    8f50:	bd09383a 	mul	r4,r23,r20
    8f54:	e0ffffcc 	andi	r3,fp,65535
    8f58:	10c4b03a 	or	r2,r2,r3
    8f5c:	1100042e 	bgeu	r2,r4,8f70 <__udivdi3+0x120>
    8f60:	8085883a 	add	r2,r16,r2
    8f64:	a53fffc4 	addi	r20,r20,-1
    8f68:	14000136 	bltu	r2,r16,8f70 <__udivdi3+0x120>
    8f6c:	11012036 	bltu	r2,r4,93f0 <__udivdi3+0x5a0>
    8f70:	b004943a 	slli	r2,r22,16
    8f74:	d9000317 	ldw	r4,12(sp)
    8f78:	a084b03a 	or	r2,r20,r2
    8f7c:	00001506 	br	8fd4 <__udivdi3+0x184>
    8f80:	380d883a 	mov	r6,r7
    8f84:	29c06236 	bltu	r5,r7,9110 <__udivdi3+0x2c0>
    8f88:	00bfffd4 	movui	r2,65535
    8f8c:	11c05a36 	bltu	r2,r7,90f8 <__udivdi3+0x2a8>
    8f90:	00803fc4 	movi	r2,255
    8f94:	11c0fc36 	bltu	r2,r7,9388 <__udivdi3+0x538>
    8f98:	000b883a 	mov	r5,zero
    8f9c:	0005883a 	mov	r2,zero
    8fa0:	3084d83a 	srl	r2,r6,r2
    8fa4:	01000074 	movhi	r4,1
    8fa8:	213d0004 	addi	r4,r4,-3072
    8fac:	01c00804 	movi	r7,32
    8fb0:	1105883a 	add	r2,r2,r4
    8fb4:	10c00003 	ldbu	r3,0(r2)
    8fb8:	28c7883a 	add	r3,r5,r3
    8fbc:	38efc83a 	sub	r23,r7,r3
    8fc0:	b800691e 	bne	r23,zero,9168 <__udivdi3+0x318>
    8fc4:	35000136 	bltu	r6,r20,8fcc <__udivdi3+0x17c>
    8fc8:	e4005136 	bltu	fp,r16,9110 <__udivdi3+0x2c0>
    8fcc:	00800044 	movi	r2,1
    8fd0:	0009883a 	mov	r4,zero
    8fd4:	2007883a 	mov	r3,r4
    8fd8:	dfc00f17 	ldw	ra,60(sp)
    8fdc:	df000e17 	ldw	fp,56(sp)
    8fe0:	ddc00d17 	ldw	r23,52(sp)
    8fe4:	dd800c17 	ldw	r22,48(sp)
    8fe8:	dd400b17 	ldw	r21,44(sp)
    8fec:	dd000a17 	ldw	r20,40(sp)
    8ff0:	dcc00917 	ldw	r19,36(sp)
    8ff4:	dc800817 	ldw	r18,32(sp)
    8ff8:	dc400717 	ldw	r17,28(sp)
    8ffc:	dc000617 	ldw	r16,24(sp)
    9000:	dec01004 	addi	sp,sp,64
    9004:	f800283a 	ret
    9008:	00bfffd4 	movui	r2,65535
    900c:	12005036 	bltu	r2,r8,9150 <__udivdi3+0x300>
    9010:	00803fc4 	movi	r2,255
    9014:	1200e836 	bltu	r2,r8,93b8 <__udivdi3+0x568>
    9018:	000b883a 	mov	r5,zero
    901c:	0005883a 	mov	r2,zero
    9020:	8084d83a 	srl	r2,r16,r2
    9024:	01000074 	movhi	r4,1
    9028:	213d0004 	addi	r4,r4,-3072
    902c:	01800804 	movi	r6,32
    9030:	1105883a 	add	r2,r2,r4
    9034:	10c00003 	ldbu	r3,0(r2)
    9038:	28c7883a 	add	r3,r5,r3
    903c:	30cbc83a 	sub	r5,r6,r3
    9040:	28000626 	beq	r5,zero,905c <__udivdi3+0x20c>
    9044:	3145c83a 	sub	r2,r6,r5
    9048:	e084d83a 	srl	r2,fp,r2
    904c:	a146983a 	sll	r3,r20,r5
    9050:	e178983a 	sll	fp,fp,r5
    9054:	8160983a 	sll	r16,r16,r5
    9058:	18a8b03a 	or	r20,r3,r2
    905c:	802ad43a 	srli	r21,r16,16
    9060:	a009883a 	mov	r4,r20
    9064:	85ffffcc 	andi	r23,r16,65535
    9068:	a80b883a 	mov	r5,r21
    906c:	0001b040 	call	1b04 <__udivsi3>
    9070:	a009883a 	mov	r4,r20
    9074:	a80b883a 	mov	r5,r21
    9078:	102d883a 	mov	r22,r2
    907c:	0001b0c0 	call	1b0c <__umodsi3>
    9080:	1004943a 	slli	r2,r2,16
    9084:	e006d43a 	srli	r3,fp,16
    9088:	bda3383a 	mul	r17,r23,r22
    908c:	10c4b03a 	or	r2,r2,r3
    9090:	1440042e 	bgeu	r2,r17,90a4 <__udivdi3+0x254>
    9094:	1405883a 	add	r2,r2,r16
    9098:	b5bfffc4 	addi	r22,r22,-1
    909c:	14000136 	bltu	r2,r16,90a4 <__udivdi3+0x254>
    90a0:	1440d536 	bltu	r2,r17,93f8 <__udivdi3+0x5a8>
    90a4:	1463c83a 	sub	r17,r2,r17
    90a8:	8809883a 	mov	r4,r17
    90ac:	a80b883a 	mov	r5,r21
    90b0:	0001b040 	call	1b04 <__udivsi3>
    90b4:	8809883a 	mov	r4,r17
    90b8:	a80b883a 	mov	r5,r21
    90bc:	1029883a 	mov	r20,r2
    90c0:	0001b0c0 	call	1b0c <__umodsi3>
    90c4:	1004943a 	slli	r2,r2,16
    90c8:	bd09383a 	mul	r4,r23,r20
    90cc:	e0ffffcc 	andi	r3,fp,65535
    90d0:	10c4b03a 	or	r2,r2,r3
    90d4:	1100042e 	bgeu	r2,r4,90e8 <__udivdi3+0x298>
    90d8:	8085883a 	add	r2,r16,r2
    90dc:	a53fffc4 	addi	r20,r20,-1
    90e0:	14000136 	bltu	r2,r16,90e8 <__udivdi3+0x298>
    90e4:	1100c736 	bltu	r2,r4,9404 <__udivdi3+0x5b4>
    90e8:	b004943a 	slli	r2,r22,16
    90ec:	0009883a 	mov	r4,zero
    90f0:	a084b03a 	or	r2,r20,r2
    90f4:	003fb706 	br	8fd4 <__udivdi3+0x184>
    90f8:	00804034 	movhi	r2,256
    90fc:	10bfffc4 	addi	r2,r2,-1
    9100:	11c0a436 	bltu	r2,r7,9394 <__udivdi3+0x544>
    9104:	01400404 	movi	r5,16
    9108:	2805883a 	mov	r2,r5
    910c:	003fa406 	br	8fa0 <__udivdi3+0x150>
    9110:	0005883a 	mov	r2,zero
    9114:	0009883a 	mov	r4,zero
    9118:	003fae06 	br	8fd4 <__udivdi3+0x184>
    911c:	00804034 	movhi	r2,256
    9120:	10bfffc4 	addi	r2,r2,-1
    9124:	1400a136 	bltu	r2,r16,93ac <__udivdi3+0x55c>
    9128:	01400404 	movi	r5,16
    912c:	2805883a 	mov	r2,r5
    9130:	003f6006 	br	8eb4 <__udivdi3+0x64>
    9134:	01000044 	movi	r4,1
    9138:	000b883a 	mov	r5,zero
    913c:	0001b040 	call	1b04 <__udivsi3>
    9140:	1021883a 	mov	r16,r2
    9144:	00bfffd4 	movui	r2,65535
    9148:	143ff436 	bltu	r2,r16,911c <__udivdi3+0x2cc>
    914c:	003f5506 	br	8ea4 <__udivdi3+0x54>
    9150:	00804034 	movhi	r2,256
    9154:	10bfffc4 	addi	r2,r2,-1
    9158:	12009a36 	bltu	r2,r8,93c4 <__udivdi3+0x574>
    915c:	01400404 	movi	r5,16
    9160:	2805883a 	mov	r2,r5
    9164:	003fae06 	br	9020 <__udivdi3+0x1d0>
    9168:	3dc5c83a 	sub	r2,r7,r23
    916c:	35c8983a 	sll	r4,r6,r23
    9170:	8086d83a 	srl	r3,r16,r2
    9174:	a0a2d83a 	srl	r17,r20,r2
    9178:	e084d83a 	srl	r2,fp,r2
    917c:	20eab03a 	or	r21,r4,r3
    9180:	a82cd43a 	srli	r22,r21,16
    9184:	a5c6983a 	sll	r3,r20,r23
    9188:	8809883a 	mov	r4,r17
    918c:	b00b883a 	mov	r5,r22
    9190:	1886b03a 	or	r3,r3,r2
    9194:	d8c00215 	stw	r3,8(sp)
    9198:	0001b040 	call	1b04 <__udivsi3>
    919c:	8809883a 	mov	r4,r17
    91a0:	b00b883a 	mov	r5,r22
    91a4:	1029883a 	mov	r20,r2
    91a8:	0001b0c0 	call	1b0c <__umodsi3>
    91ac:	a8ffffcc 	andi	r3,r21,65535
    91b0:	d8c00515 	stw	r3,20(sp)
    91b4:	d9000217 	ldw	r4,8(sp)
    91b8:	d9400517 	ldw	r5,20(sp)
    91bc:	1004943a 	slli	r2,r2,16
    91c0:	2006d43a 	srli	r3,r4,16
    91c4:	85e0983a 	sll	r16,r16,r23
    91c8:	2d23383a 	mul	r17,r5,r20
    91cc:	10c4b03a 	or	r2,r2,r3
    91d0:	dc000015 	stw	r16,0(sp)
    91d4:	1440032e 	bgeu	r2,r17,91e4 <__udivdi3+0x394>
    91d8:	1545883a 	add	r2,r2,r21
    91dc:	a53fffc4 	addi	r20,r20,-1
    91e0:	15407f2e 	bgeu	r2,r21,93e0 <__udivdi3+0x590>
    91e4:	1463c83a 	sub	r17,r2,r17
    91e8:	8809883a 	mov	r4,r17
    91ec:	b00b883a 	mov	r5,r22
    91f0:	0001b040 	call	1b04 <__udivsi3>
    91f4:	8809883a 	mov	r4,r17
    91f8:	b00b883a 	mov	r5,r22
    91fc:	1021883a 	mov	r16,r2
    9200:	0001b0c0 	call	1b0c <__umodsi3>
    9204:	d8c00517 	ldw	r3,20(sp)
    9208:	d9000217 	ldw	r4,8(sp)
    920c:	1004943a 	slli	r2,r2,16
    9210:	1c0f383a 	mul	r7,r3,r16
    9214:	20ffffcc 	andi	r3,r4,65535
    9218:	10e2b03a 	or	r17,r2,r3
    921c:	89c0032e 	bgeu	r17,r7,922c <__udivdi3+0x3dc>
    9220:	8d63883a 	add	r17,r17,r21
    9224:	843fffc4 	addi	r16,r16,-1
    9228:	8d40692e 	bgeu	r17,r21,93d0 <__udivdi3+0x580>
    922c:	a008943a 	slli	r4,r20,16
    9230:	d9400017 	ldw	r5,0(sp)
    9234:	89e3c83a 	sub	r17,r17,r7
    9238:	8110b03a 	or	r8,r16,r4
    923c:	280cd43a 	srli	r6,r5,16
    9240:	28ffffcc 	andi	r3,r5,65535
    9244:	40bfffcc 	andi	r2,r8,65535
    9248:	400ad43a 	srli	r5,r8,16
    924c:	10d3383a 	mul	r9,r2,r3
    9250:	1185383a 	mul	r2,r2,r6
    9254:	28c7383a 	mul	r3,r5,r3
    9258:	4808d43a 	srli	r4,r9,16
    925c:	298b383a 	mul	r5,r5,r6
    9260:	10c5883a 	add	r2,r2,r3
    9264:	2089883a 	add	r4,r4,r2
    9268:	20c0022e 	bgeu	r4,r3,9274 <__udivdi3+0x424>
    926c:	00800074 	movhi	r2,1
    9270:	288b883a 	add	r5,r5,r2
    9274:	2004d43a 	srli	r2,r4,16
    9278:	288b883a 	add	r5,r5,r2
    927c:	89403f36 	bltu	r17,r5,937c <__udivdi3+0x52c>
    9280:	89403926 	beq	r17,r5,9368 <__udivdi3+0x518>
    9284:	4005883a 	mov	r2,r8
    9288:	0009883a 	mov	r4,zero
    928c:	003f5106 	br	8fd4 <__udivdi3+0x184>
    9290:	85a0983a 	sll	r16,r16,r22
    9294:	3585c83a 	sub	r2,r6,r22
    9298:	a0a2d83a 	srl	r17,r20,r2
    929c:	802ad43a 	srli	r21,r16,16
    92a0:	e084d83a 	srl	r2,fp,r2
    92a4:	a586983a 	sll	r3,r20,r22
    92a8:	8809883a 	mov	r4,r17
    92ac:	a80b883a 	mov	r5,r21
    92b0:	1886b03a 	or	r3,r3,r2
    92b4:	d8c00115 	stw	r3,4(sp)
    92b8:	0001b040 	call	1b04 <__udivsi3>
    92bc:	8809883a 	mov	r4,r17
    92c0:	a80b883a 	mov	r5,r21
    92c4:	d8800415 	stw	r2,16(sp)
    92c8:	0001b0c0 	call	1b0c <__umodsi3>
    92cc:	d9000117 	ldw	r4,4(sp)
    92d0:	d9400417 	ldw	r5,16(sp)
    92d4:	1004943a 	slli	r2,r2,16
    92d8:	85ffffcc 	andi	r23,r16,65535
    92dc:	2006d43a 	srli	r3,r4,16
    92e0:	b963383a 	mul	r17,r23,r5
    92e4:	10c4b03a 	or	r2,r2,r3
    92e8:	1440042e 	bgeu	r2,r17,92fc <__udivdi3+0x4ac>
    92ec:	297fffc4 	addi	r5,r5,-1
    92f0:	1405883a 	add	r2,r2,r16
    92f4:	d9400415 	stw	r5,16(sp)
    92f8:	1400442e 	bgeu	r2,r16,940c <__udivdi3+0x5bc>
    92fc:	1463c83a 	sub	r17,r2,r17
    9300:	8809883a 	mov	r4,r17
    9304:	a80b883a 	mov	r5,r21
    9308:	0001b040 	call	1b04 <__udivsi3>
    930c:	8809883a 	mov	r4,r17
    9310:	a80b883a 	mov	r5,r21
    9314:	1029883a 	mov	r20,r2
    9318:	0001b0c0 	call	1b0c <__umodsi3>
    931c:	d9400117 	ldw	r5,4(sp)
    9320:	1004943a 	slli	r2,r2,16
    9324:	bd09383a 	mul	r4,r23,r20
    9328:	28ffffcc 	andi	r3,r5,65535
    932c:	10c6b03a 	or	r3,r2,r3
    9330:	1900062e 	bgeu	r3,r4,934c <__udivdi3+0x4fc>
    9334:	1c07883a 	add	r3,r3,r16
    9338:	a53fffc4 	addi	r20,r20,-1
    933c:	1c000336 	bltu	r3,r16,934c <__udivdi3+0x4fc>
    9340:	1900022e 	bgeu	r3,r4,934c <__udivdi3+0x4fc>
    9344:	a53fffc4 	addi	r20,r20,-1
    9348:	1c07883a 	add	r3,r3,r16
    934c:	d9400417 	ldw	r5,16(sp)
    9350:	e5b8983a 	sll	fp,fp,r22
    9354:	1923c83a 	sub	r17,r3,r4
    9358:	2804943a 	slli	r2,r5,16
    935c:	a0a8b03a 	or	r20,r20,r2
    9360:	dd000315 	stw	r20,12(sp)
    9364:	003ee106 	br	8eec <__udivdi3+0x9c>
    9368:	2004943a 	slli	r2,r4,16
    936c:	e5c8983a 	sll	r4,fp,r23
    9370:	48ffffcc 	andi	r3,r9,65535
    9374:	10c5883a 	add	r2,r2,r3
    9378:	20bfc22e 	bgeu	r4,r2,9284 <__udivdi3+0x434>
    937c:	40bfffc4 	addi	r2,r8,-1
    9380:	0009883a 	mov	r4,zero
    9384:	003f1306 	br	8fd4 <__udivdi3+0x184>
    9388:	01400204 	movi	r5,8
    938c:	2805883a 	mov	r2,r5
    9390:	003f0306 	br	8fa0 <__udivdi3+0x150>
    9394:	01400604 	movi	r5,24
    9398:	2805883a 	mov	r2,r5
    939c:	003f0006 	br	8fa0 <__udivdi3+0x150>
    93a0:	01400204 	movi	r5,8
    93a4:	2805883a 	mov	r2,r5
    93a8:	003ec206 	br	8eb4 <__udivdi3+0x64>
    93ac:	01400604 	movi	r5,24
    93b0:	2805883a 	mov	r2,r5
    93b4:	003ebf06 	br	8eb4 <__udivdi3+0x64>
    93b8:	01400204 	movi	r5,8
    93bc:	2805883a 	mov	r2,r5
    93c0:	003f1706 	br	9020 <__udivdi3+0x1d0>
    93c4:	01400604 	movi	r5,24
    93c8:	2805883a 	mov	r2,r5
    93cc:	003f1406 	br	9020 <__udivdi3+0x1d0>
    93d0:	89ff962e 	bgeu	r17,r7,922c <__udivdi3+0x3dc>
    93d4:	8d63883a 	add	r17,r17,r21
    93d8:	843fffc4 	addi	r16,r16,-1
    93dc:	003f9306 	br	922c <__udivdi3+0x3dc>
    93e0:	147f802e 	bgeu	r2,r17,91e4 <__udivdi3+0x394>
    93e4:	a53fffc4 	addi	r20,r20,-1
    93e8:	1545883a 	add	r2,r2,r21
    93ec:	003f7d06 	br	91e4 <__udivdi3+0x394>
    93f0:	a53fffc4 	addi	r20,r20,-1
    93f4:	003ede06 	br	8f70 <__udivdi3+0x120>
    93f8:	b5bfffc4 	addi	r22,r22,-1
    93fc:	1405883a 	add	r2,r2,r16
    9400:	003f2806 	br	90a4 <__udivdi3+0x254>
    9404:	a53fffc4 	addi	r20,r20,-1
    9408:	003f3706 	br	90e8 <__udivdi3+0x298>
    940c:	147fbb2e 	bgeu	r2,r17,92fc <__udivdi3+0x4ac>
    9410:	297fffc4 	addi	r5,r5,-1
    9414:	1405883a 	add	r2,r2,r16
    9418:	d9400415 	stw	r5,16(sp)
    941c:	003fb706 	br	92fc <__udivdi3+0x4ac>
    9420:	b5bfffc4 	addi	r22,r22,-1
    9424:	1405883a 	add	r2,r2,r16
    9428:	003ec006 	br	8f2c <__udivdi3+0xdc>

0000942c <__umoddi3>:
    942c:	defff104 	addi	sp,sp,-60
    9430:	dd800b15 	stw	r22,44(sp)
    9434:	dd000915 	stw	r20,36(sp)
    9438:	dc000515 	stw	r16,20(sp)
    943c:	dfc00e15 	stw	ra,56(sp)
    9440:	df000d15 	stw	fp,52(sp)
    9444:	ddc00c15 	stw	r23,48(sp)
    9448:	dd400a15 	stw	r21,40(sp)
    944c:	dcc00815 	stw	r19,32(sp)
    9450:	dc800715 	stw	r18,28(sp)
    9454:	dc400615 	stw	r17,24(sp)
    9458:	3021883a 	mov	r16,r6
    945c:	202d883a 	mov	r22,r4
    9460:	2829883a 	mov	r20,r5
    9464:	38002b1e 	bne	r7,zero,9514 <__umoddi3+0xe8>
    9468:	29805036 	bltu	r5,r6,95ac <__umoddi3+0x180>
    946c:	30008a26 	beq	r6,zero,9698 <__umoddi3+0x26c>
    9470:	00bfffd4 	movui	r2,65535
    9474:	14008236 	bltu	r2,r16,9680 <__umoddi3+0x254>
    9478:	00803fc4 	movi	r2,255
    947c:	14013636 	bltu	r2,r16,9958 <__umoddi3+0x52c>
    9480:	000b883a 	mov	r5,zero
    9484:	0005883a 	mov	r2,zero
    9488:	8084d83a 	srl	r2,r16,r2
    948c:	01000074 	movhi	r4,1
    9490:	213d0004 	addi	r4,r4,-3072
    9494:	01800804 	movi	r6,32
    9498:	1105883a 	add	r2,r2,r4
    949c:	10c00003 	ldbu	r3,0(r2)
    94a0:	28c7883a 	add	r3,r5,r3
    94a4:	30efc83a 	sub	r23,r6,r3
    94a8:	b800941e 	bne	r23,zero,96fc <__umoddi3+0x2d0>
    94ac:	802ad43a 	srli	r21,r16,16
    94b0:	a423c83a 	sub	r17,r20,r16
    94b4:	0039883a 	mov	fp,zero
    94b8:	853fffcc 	andi	r20,r16,65535
    94bc:	8809883a 	mov	r4,r17
    94c0:	a80b883a 	mov	r5,r21
    94c4:	0001b040 	call	1b04 <__udivsi3>
    94c8:	8809883a 	mov	r4,r17
    94cc:	a80b883a 	mov	r5,r21
    94d0:	a0a3383a 	mul	r17,r20,r2
    94d4:	0001b0c0 	call	1b0c <__umodsi3>
    94d8:	1004943a 	slli	r2,r2,16
    94dc:	b006d43a 	srli	r3,r22,16
    94e0:	10c4b03a 	or	r2,r2,r3
    94e4:	1440032e 	bgeu	r2,r17,94f4 <__umoddi3+0xc8>
    94e8:	1405883a 	add	r2,r2,r16
    94ec:	14000136 	bltu	r2,r16,94f4 <__umoddi3+0xc8>
    94f0:	14413536 	bltu	r2,r17,99c8 <__umoddi3+0x59c>
    94f4:	1463c83a 	sub	r17,r2,r17
    94f8:	8809883a 	mov	r4,r17
    94fc:	a80b883a 	mov	r5,r21
    9500:	0001b040 	call	1b04 <__udivsi3>
    9504:	8809883a 	mov	r4,r17
    9508:	a0a3383a 	mul	r17,r20,r2
    950c:	a80b883a 	mov	r5,r21
    9510:	00004d06 	br	9648 <__umoddi3+0x21c>
    9514:	380d883a 	mov	r6,r7
    9518:	29c0102e 	bgeu	r5,r7,955c <__umoddi3+0x130>
    951c:	2011883a 	mov	r8,r4
    9520:	2813883a 	mov	r9,r5
    9524:	4005883a 	mov	r2,r8
    9528:	4807883a 	mov	r3,r9
    952c:	dfc00e17 	ldw	ra,56(sp)
    9530:	df000d17 	ldw	fp,52(sp)
    9534:	ddc00c17 	ldw	r23,48(sp)
    9538:	dd800b17 	ldw	r22,44(sp)
    953c:	dd400a17 	ldw	r21,40(sp)
    9540:	dd000917 	ldw	r20,36(sp)
    9544:	dcc00817 	ldw	r19,32(sp)
    9548:	dc800717 	ldw	r18,28(sp)
    954c:	dc400617 	ldw	r17,24(sp)
    9550:	dc000517 	ldw	r16,20(sp)
    9554:	dec00f04 	addi	sp,sp,60
    9558:	f800283a 	ret
    955c:	00bfffd4 	movui	r2,65535
    9560:	11c05a36 	bltu	r2,r7,96cc <__umoddi3+0x2a0>
    9564:	00803fc4 	movi	r2,255
    9568:	11c0fe36 	bltu	r2,r7,9964 <__umoddi3+0x538>
    956c:	000b883a 	mov	r5,zero
    9570:	0005883a 	mov	r2,zero
    9574:	3084d83a 	srl	r2,r6,r2
    9578:	01000074 	movhi	r4,1
    957c:	213d0004 	addi	r4,r4,-3072
    9580:	01c00804 	movi	r7,32
    9584:	1105883a 	add	r2,r2,r4
    9588:	10c00003 	ldbu	r3,0(r2)
    958c:	28c7883a 	add	r3,r5,r3
    9590:	38ebc83a 	sub	r21,r7,r3
    9594:	a800851e 	bne	r21,zero,97ac <__umoddi3+0x380>
    9598:	35005236 	bltu	r6,r20,96e4 <__umoddi3+0x2b8>
    959c:	b400512e 	bgeu	r22,r16,96e4 <__umoddi3+0x2b8>
    95a0:	b011883a 	mov	r8,r22
    95a4:	a013883a 	mov	r9,r20
    95a8:	003fde06 	br	9524 <__umoddi3+0xf8>
    95ac:	00bfffd4 	movui	r2,65535
    95b0:	11804036 	bltu	r2,r6,96b4 <__umoddi3+0x288>
    95b4:	00803fc4 	movi	r2,255
    95b8:	1180ed36 	bltu	r2,r6,9970 <__umoddi3+0x544>
    95bc:	000b883a 	mov	r5,zero
    95c0:	0005883a 	mov	r2,zero
    95c4:	8084d83a 	srl	r2,r16,r2
    95c8:	01000074 	movhi	r4,1
    95cc:	213d0004 	addi	r4,r4,-3072
    95d0:	01800804 	movi	r6,32
    95d4:	1105883a 	add	r2,r2,r4
    95d8:	10c00003 	ldbu	r3,0(r2)
    95dc:	28c7883a 	add	r3,r5,r3
    95e0:	30c7c83a 	sub	r3,r6,r3
    95e4:	1800bf1e 	bne	r3,zero,98e4 <__umoddi3+0x4b8>
    95e8:	0039883a 	mov	fp,zero
    95ec:	802ad43a 	srli	r21,r16,16
    95f0:	a009883a 	mov	r4,r20
    95f4:	85ffffcc 	andi	r23,r16,65535
    95f8:	a80b883a 	mov	r5,r21
    95fc:	0001b040 	call	1b04 <__udivsi3>
    9600:	a009883a 	mov	r4,r20
    9604:	a80b883a 	mov	r5,r21
    9608:	b8a3383a 	mul	r17,r23,r2
    960c:	0001b0c0 	call	1b0c <__umodsi3>
    9610:	1004943a 	slli	r2,r2,16
    9614:	b006d43a 	srli	r3,r22,16
    9618:	10c4b03a 	or	r2,r2,r3
    961c:	1440032e 	bgeu	r2,r17,962c <__umoddi3+0x200>
    9620:	1405883a 	add	r2,r2,r16
    9624:	14000136 	bltu	r2,r16,962c <__umoddi3+0x200>
    9628:	1440e536 	bltu	r2,r17,99c0 <__umoddi3+0x594>
    962c:	1463c83a 	sub	r17,r2,r17
    9630:	8809883a 	mov	r4,r17
    9634:	a80b883a 	mov	r5,r21
    9638:	0001b040 	call	1b04 <__udivsi3>
    963c:	8809883a 	mov	r4,r17
    9640:	b8a3383a 	mul	r17,r23,r2
    9644:	a80b883a 	mov	r5,r21
    9648:	0001b0c0 	call	1b0c <__umodsi3>
    964c:	1004943a 	slli	r2,r2,16
    9650:	b0ffffcc 	andi	r3,r22,65535
    9654:	10c4b03a 	or	r2,r2,r3
    9658:	1440042e 	bgeu	r2,r17,966c <__umoddi3+0x240>
    965c:	1405883a 	add	r2,r2,r16
    9660:	14000236 	bltu	r2,r16,966c <__umoddi3+0x240>
    9664:	1440012e 	bgeu	r2,r17,966c <__umoddi3+0x240>
    9668:	1405883a 	add	r2,r2,r16
    966c:	1445c83a 	sub	r2,r2,r17
    9670:	1724d83a 	srl	r18,r2,fp
    9674:	0013883a 	mov	r9,zero
    9678:	9011883a 	mov	r8,r18
    967c:	003fa906 	br	9524 <__umoddi3+0xf8>
    9680:	00804034 	movhi	r2,256
    9684:	10bfffc4 	addi	r2,r2,-1
    9688:	1400b036 	bltu	r2,r16,994c <__umoddi3+0x520>
    968c:	01400404 	movi	r5,16
    9690:	2805883a 	mov	r2,r5
    9694:	003f7c06 	br	9488 <__umoddi3+0x5c>
    9698:	01000044 	movi	r4,1
    969c:	000b883a 	mov	r5,zero
    96a0:	0001b040 	call	1b04 <__udivsi3>
    96a4:	1021883a 	mov	r16,r2
    96a8:	00bfffd4 	movui	r2,65535
    96ac:	143ff436 	bltu	r2,r16,9680 <__umoddi3+0x254>
    96b0:	003f7106 	br	9478 <__umoddi3+0x4c>
    96b4:	00804034 	movhi	r2,256
    96b8:	10bfffc4 	addi	r2,r2,-1
    96bc:	1180af36 	bltu	r2,r6,997c <__umoddi3+0x550>
    96c0:	01400404 	movi	r5,16
    96c4:	2805883a 	mov	r2,r5
    96c8:	003fbe06 	br	95c4 <__umoddi3+0x198>
    96cc:	00804034 	movhi	r2,256
    96d0:	10bfffc4 	addi	r2,r2,-1
    96d4:	11c0ac36 	bltu	r2,r7,9988 <__umoddi3+0x55c>
    96d8:	01400404 	movi	r5,16
    96dc:	2805883a 	mov	r2,r5
    96e0:	003fa406 	br	9574 <__umoddi3+0x148>
    96e4:	b409c83a 	sub	r4,r22,r16
    96e8:	b105803a 	cmpltu	r2,r22,r4
    96ec:	a187c83a 	sub	r3,r20,r6
    96f0:	18a9c83a 	sub	r20,r3,r2
    96f4:	202d883a 	mov	r22,r4
    96f8:	003fa906 	br	95a0 <__umoddi3+0x174>
    96fc:	85e0983a 	sll	r16,r16,r23
    9700:	35c5c83a 	sub	r2,r6,r23
    9704:	a0a2d83a 	srl	r17,r20,r2
    9708:	802ad43a 	srli	r21,r16,16
    970c:	b084d83a 	srl	r2,r22,r2
    9710:	a5c6983a 	sll	r3,r20,r23
    9714:	8809883a 	mov	r4,r17
    9718:	a80b883a 	mov	r5,r21
    971c:	1886b03a 	or	r3,r3,r2
    9720:	d8c00115 	stw	r3,4(sp)
    9724:	853fffcc 	andi	r20,r16,65535
    9728:	0001b040 	call	1b04 <__udivsi3>
    972c:	8809883a 	mov	r4,r17
    9730:	a80b883a 	mov	r5,r21
    9734:	a0a3383a 	mul	r17,r20,r2
    9738:	0001b0c0 	call	1b0c <__umodsi3>
    973c:	d9000117 	ldw	r4,4(sp)
    9740:	1004943a 	slli	r2,r2,16
    9744:	b839883a 	mov	fp,r23
    9748:	2006d43a 	srli	r3,r4,16
    974c:	10c4b03a 	or	r2,r2,r3
    9750:	1440022e 	bgeu	r2,r17,975c <__umoddi3+0x330>
    9754:	1405883a 	add	r2,r2,r16
    9758:	1400962e 	bgeu	r2,r16,99b4 <__umoddi3+0x588>
    975c:	1463c83a 	sub	r17,r2,r17
    9760:	8809883a 	mov	r4,r17
    9764:	a80b883a 	mov	r5,r21
    9768:	0001b040 	call	1b04 <__udivsi3>
    976c:	8809883a 	mov	r4,r17
    9770:	a80b883a 	mov	r5,r21
    9774:	a0a3383a 	mul	r17,r20,r2
    9778:	0001b0c0 	call	1b0c <__umodsi3>
    977c:	d9400117 	ldw	r5,4(sp)
    9780:	1004943a 	slli	r2,r2,16
    9784:	28ffffcc 	andi	r3,r5,65535
    9788:	10c4b03a 	or	r2,r2,r3
    978c:	1440042e 	bgeu	r2,r17,97a0 <__umoddi3+0x374>
    9790:	1405883a 	add	r2,r2,r16
    9794:	14000236 	bltu	r2,r16,97a0 <__umoddi3+0x374>
    9798:	1440012e 	bgeu	r2,r17,97a0 <__umoddi3+0x374>
    979c:	1405883a 	add	r2,r2,r16
    97a0:	b5ec983a 	sll	r22,r22,r23
    97a4:	1463c83a 	sub	r17,r2,r17
    97a8:	003f4406 	br	94bc <__umoddi3+0x90>
    97ac:	3d4fc83a 	sub	r7,r7,r21
    97b0:	3546983a 	sll	r3,r6,r21
    97b4:	81c4d83a 	srl	r2,r16,r7
    97b8:	a1e2d83a 	srl	r17,r20,r7
    97bc:	a54c983a 	sll	r6,r20,r21
    97c0:	18aeb03a 	or	r23,r3,r2
    97c4:	b828d43a 	srli	r20,r23,16
    97c8:	b1c4d83a 	srl	r2,r22,r7
    97cc:	8809883a 	mov	r4,r17
    97d0:	a00b883a 	mov	r5,r20
    97d4:	308cb03a 	or	r6,r6,r2
    97d8:	d9c00315 	stw	r7,12(sp)
    97dc:	d9800215 	stw	r6,8(sp)
    97e0:	0001b040 	call	1b04 <__udivsi3>
    97e4:	8809883a 	mov	r4,r17
    97e8:	a00b883a 	mov	r5,r20
    97ec:	1039883a 	mov	fp,r2
    97f0:	0001b0c0 	call	1b0c <__umodsi3>
    97f4:	b8ffffcc 	andi	r3,r23,65535
    97f8:	d8c00415 	stw	r3,16(sp)
    97fc:	d9000217 	ldw	r4,8(sp)
    9800:	d9400417 	ldw	r5,16(sp)
    9804:	1004943a 	slli	r2,r2,16
    9808:	2006d43a 	srli	r3,r4,16
    980c:	8560983a 	sll	r16,r16,r21
    9810:	2f23383a 	mul	r17,r5,fp
    9814:	10c4b03a 	or	r2,r2,r3
    9818:	dc000015 	stw	r16,0(sp)
    981c:	b56c983a 	sll	r22,r22,r21
    9820:	1440032e 	bgeu	r2,r17,9830 <__umoddi3+0x404>
    9824:	15c5883a 	add	r2,r2,r23
    9828:	e73fffc4 	addi	fp,fp,-1
    982c:	15c05d2e 	bgeu	r2,r23,99a4 <__umoddi3+0x578>
    9830:	1463c83a 	sub	r17,r2,r17
    9834:	8809883a 	mov	r4,r17
    9838:	a00b883a 	mov	r5,r20
    983c:	0001b040 	call	1b04 <__udivsi3>
    9840:	8809883a 	mov	r4,r17
    9844:	a00b883a 	mov	r5,r20
    9848:	1021883a 	mov	r16,r2
    984c:	0001b0c0 	call	1b0c <__umodsi3>
    9850:	d8c00417 	ldw	r3,16(sp)
    9854:	d9000217 	ldw	r4,8(sp)
    9858:	1004943a 	slli	r2,r2,16
    985c:	1c23383a 	mul	r17,r3,r16
    9860:	20ffffcc 	andi	r3,r4,65535
    9864:	10ceb03a 	or	r7,r2,r3
    9868:	3c40032e 	bgeu	r7,r17,9878 <__umoddi3+0x44c>
    986c:	3dcf883a 	add	r7,r7,r23
    9870:	843fffc4 	addi	r16,r16,-1
    9874:	3dc0472e 	bgeu	r7,r23,9994 <__umoddi3+0x568>
    9878:	e004943a 	slli	r2,fp,16
    987c:	d9400017 	ldw	r5,0(sp)
    9880:	3c4fc83a 	sub	r7,r7,r17
    9884:	8084b03a 	or	r2,r16,r2
    9888:	28ffffcc 	andi	r3,r5,65535
    988c:	280cd43a 	srli	r6,r5,16
    9890:	100ad43a 	srli	r5,r2,16
    9894:	10bfffcc 	andi	r2,r2,65535
    9898:	10d1383a 	mul	r8,r2,r3
    989c:	28c7383a 	mul	r3,r5,r3
    98a0:	1185383a 	mul	r2,r2,r6
    98a4:	4008d43a 	srli	r4,r8,16
    98a8:	298b383a 	mul	r5,r5,r6
    98ac:	10c5883a 	add	r2,r2,r3
    98b0:	2089883a 	add	r4,r4,r2
    98b4:	20c0022e 	bgeu	r4,r3,98c0 <__umoddi3+0x494>
    98b8:	00800074 	movhi	r2,1
    98bc:	288b883a 	add	r5,r5,r2
    98c0:	2004d43a 	srli	r2,r4,16
    98c4:	2008943a 	slli	r4,r4,16
    98c8:	40ffffcc 	andi	r3,r8,65535
    98cc:	288b883a 	add	r5,r5,r2
    98d0:	20c9883a 	add	r4,r4,r3
    98d4:	39400b36 	bltu	r7,r5,9904 <__umoddi3+0x4d8>
    98d8:	39403d26 	beq	r7,r5,99d0 <__umoddi3+0x5a4>
    98dc:	394bc83a 	sub	r5,r7,r5
    98e0:	00000f06 	br	9920 <__umoddi3+0x4f4>
    98e4:	30c5c83a 	sub	r2,r6,r3
    98e8:	1839883a 	mov	fp,r3
    98ec:	b084d83a 	srl	r2,r22,r2
    98f0:	a0c6983a 	sll	r3,r20,r3
    98f4:	8720983a 	sll	r16,r16,fp
    98f8:	b72c983a 	sll	r22,r22,fp
    98fc:	18a8b03a 	or	r20,r3,r2
    9900:	003f3a06 	br	95ec <__umoddi3+0x1c0>
    9904:	d8c00017 	ldw	r3,0(sp)
    9908:	20c5c83a 	sub	r2,r4,r3
    990c:	2089803a 	cmpltu	r4,r4,r2
    9910:	2dc7c83a 	sub	r3,r5,r23
    9914:	1907c83a 	sub	r3,r3,r4
    9918:	38cbc83a 	sub	r5,r7,r3
    991c:	1009883a 	mov	r4,r2
    9920:	b105c83a 	sub	r2,r22,r4
    9924:	b087803a 	cmpltu	r3,r22,r2
    9928:	28c7c83a 	sub	r3,r5,r3
    992c:	d9400317 	ldw	r5,12(sp)
    9930:	1544d83a 	srl	r2,r2,r21
    9934:	1948983a 	sll	r4,r3,r5
    9938:	1d46d83a 	srl	r3,r3,r21
    993c:	20a4b03a 	or	r18,r4,r2
    9940:	9011883a 	mov	r8,r18
    9944:	1813883a 	mov	r9,r3
    9948:	003ef606 	br	9524 <__umoddi3+0xf8>
    994c:	01400604 	movi	r5,24
    9950:	2805883a 	mov	r2,r5
    9954:	003ecc06 	br	9488 <__umoddi3+0x5c>
    9958:	01400204 	movi	r5,8
    995c:	2805883a 	mov	r2,r5
    9960:	003ec906 	br	9488 <__umoddi3+0x5c>
    9964:	01400204 	movi	r5,8
    9968:	2805883a 	mov	r2,r5
    996c:	003f0106 	br	9574 <__umoddi3+0x148>
    9970:	01400204 	movi	r5,8
    9974:	2805883a 	mov	r2,r5
    9978:	003f1206 	br	95c4 <__umoddi3+0x198>
    997c:	01400604 	movi	r5,24
    9980:	2805883a 	mov	r2,r5
    9984:	003f0f06 	br	95c4 <__umoddi3+0x198>
    9988:	01400604 	movi	r5,24
    998c:	2805883a 	mov	r2,r5
    9990:	003ef806 	br	9574 <__umoddi3+0x148>
    9994:	3c7fb82e 	bgeu	r7,r17,9878 <__umoddi3+0x44c>
    9998:	843fffc4 	addi	r16,r16,-1
    999c:	3dcf883a 	add	r7,r7,r23
    99a0:	003fb506 	br	9878 <__umoddi3+0x44c>
    99a4:	147fa22e 	bgeu	r2,r17,9830 <__umoddi3+0x404>
    99a8:	e73fffc4 	addi	fp,fp,-1
    99ac:	15c5883a 	add	r2,r2,r23
    99b0:	003f9f06 	br	9830 <__umoddi3+0x404>
    99b4:	147f692e 	bgeu	r2,r17,975c <__umoddi3+0x330>
    99b8:	1405883a 	add	r2,r2,r16
    99bc:	003f6706 	br	975c <__umoddi3+0x330>
    99c0:	1405883a 	add	r2,r2,r16
    99c4:	003f1906 	br	962c <__umoddi3+0x200>
    99c8:	1405883a 	add	r2,r2,r16
    99cc:	003ec906 	br	94f4 <__umoddi3+0xc8>
    99d0:	b13fcc36 	bltu	r22,r4,9904 <__umoddi3+0x4d8>
    99d4:	000b883a 	mov	r5,zero
    99d8:	003fd106 	br	9920 <__umoddi3+0x4f4>

000099dc <_fpadd_parts>:
    99dc:	defff804 	addi	sp,sp,-32
    99e0:	dcc00315 	stw	r19,12(sp)
    99e4:	2027883a 	mov	r19,r4
    99e8:	21000017 	ldw	r4,0(r4)
    99ec:	00c00044 	movi	r3,1
    99f0:	dd400515 	stw	r21,20(sp)
    99f4:	dd000415 	stw	r20,16(sp)
    99f8:	ddc00715 	stw	r23,28(sp)
    99fc:	dd800615 	stw	r22,24(sp)
    9a00:	dc800215 	stw	r18,8(sp)
    9a04:	dc400115 	stw	r17,4(sp)
    9a08:	dc000015 	stw	r16,0(sp)
    9a0c:	282b883a 	mov	r21,r5
    9a10:	3029883a 	mov	r20,r6
    9a14:	1900632e 	bgeu	r3,r4,9ba4 <_fpadd_parts+0x1c8>
    9a18:	28800017 	ldw	r2,0(r5)
    9a1c:	1880812e 	bgeu	r3,r2,9c24 <_fpadd_parts+0x248>
    9a20:	00c00104 	movi	r3,4
    9a24:	20c0dc26 	beq	r4,r3,9d98 <_fpadd_parts+0x3bc>
    9a28:	10c07e26 	beq	r2,r3,9c24 <_fpadd_parts+0x248>
    9a2c:	00c00084 	movi	r3,2
    9a30:	10c06726 	beq	r2,r3,9bd0 <_fpadd_parts+0x1f4>
    9a34:	20c07b26 	beq	r4,r3,9c24 <_fpadd_parts+0x248>
    9a38:	9dc00217 	ldw	r23,8(r19)
    9a3c:	28c00217 	ldw	r3,8(r5)
    9a40:	9c400317 	ldw	r17,12(r19)
    9a44:	2bc00317 	ldw	r15,12(r5)
    9a48:	b8cdc83a 	sub	r6,r23,r3
    9a4c:	9c800417 	ldw	r18,16(r19)
    9a50:	2c000417 	ldw	r16,16(r5)
    9a54:	3009883a 	mov	r4,r6
    9a58:	30009716 	blt	r6,zero,9cb8 <_fpadd_parts+0x2dc>
    9a5c:	00800fc4 	movi	r2,63
    9a60:	11806b16 	blt	r2,r6,9c10 <_fpadd_parts+0x234>
    9a64:	0100a40e 	bge	zero,r4,9cf8 <_fpadd_parts+0x31c>
    9a68:	35bff804 	addi	r22,r6,-32
    9a6c:	b000bc16 	blt	r22,zero,9d60 <_fpadd_parts+0x384>
    9a70:	8596d83a 	srl	r11,r16,r22
    9a74:	0019883a 	mov	r12,zero
    9a78:	0013883a 	mov	r9,zero
    9a7c:	01000044 	movi	r4,1
    9a80:	0015883a 	mov	r10,zero
    9a84:	b000be16 	blt	r22,zero,9d80 <_fpadd_parts+0x3a4>
    9a88:	2590983a 	sll	r8,r4,r22
    9a8c:	000f883a 	mov	r7,zero
    9a90:	00bfffc4 	movi	r2,-1
    9a94:	3889883a 	add	r4,r7,r2
    9a98:	408b883a 	add	r5,r8,r2
    9a9c:	21cd803a 	cmpltu	r6,r4,r7
    9aa0:	314b883a 	add	r5,r6,r5
    9aa4:	7904703a 	and	r2,r15,r4
    9aa8:	8146703a 	and	r3,r16,r5
    9aac:	10c4b03a 	or	r2,r2,r3
    9ab0:	10000226 	beq	r2,zero,9abc <_fpadd_parts+0xe0>
    9ab4:	02400044 	movi	r9,1
    9ab8:	0015883a 	mov	r10,zero
    9abc:	5a5eb03a 	or	r15,r11,r9
    9ac0:	62a0b03a 	or	r16,r12,r10
    9ac4:	99400117 	ldw	r5,4(r19)
    9ac8:	a8800117 	ldw	r2,4(r21)
    9acc:	28806e26 	beq	r5,r2,9c88 <_fpadd_parts+0x2ac>
    9ad0:	28006626 	beq	r5,zero,9c6c <_fpadd_parts+0x290>
    9ad4:	7c45c83a 	sub	r2,r15,r17
    9ad8:	7889803a 	cmpltu	r4,r15,r2
    9adc:	8487c83a 	sub	r3,r16,r18
    9ae0:	1909c83a 	sub	r4,r3,r4
    9ae4:	100d883a 	mov	r6,r2
    9ae8:	200f883a 	mov	r7,r4
    9aec:	38007716 	blt	r7,zero,9ccc <_fpadd_parts+0x2f0>
    9af0:	a5c00215 	stw	r23,8(r20)
    9af4:	a1c00415 	stw	r7,16(r20)
    9af8:	a0000115 	stw	zero,4(r20)
    9afc:	a1800315 	stw	r6,12(r20)
    9b00:	a2000317 	ldw	r8,12(r20)
    9b04:	a2400417 	ldw	r9,16(r20)
    9b08:	00bfffc4 	movi	r2,-1
    9b0c:	408b883a 	add	r5,r8,r2
    9b10:	2a09803a 	cmpltu	r4,r5,r8
    9b14:	488d883a 	add	r6,r9,r2
    9b18:	01c40034 	movhi	r7,4096
    9b1c:	39ffffc4 	addi	r7,r7,-1
    9b20:	218d883a 	add	r6,r4,r6
    9b24:	39801736 	bltu	r7,r6,9b84 <_fpadd_parts+0x1a8>
    9b28:	31c06526 	beq	r6,r7,9cc0 <_fpadd_parts+0x2e4>
    9b2c:	a3000217 	ldw	r12,8(r20)
    9b30:	4209883a 	add	r4,r8,r8
    9b34:	00bfffc4 	movi	r2,-1
    9b38:	220f803a 	cmpltu	r7,r4,r8
    9b3c:	4a4b883a 	add	r5,r9,r9
    9b40:	394f883a 	add	r7,r7,r5
    9b44:	2095883a 	add	r10,r4,r2
    9b48:	3897883a 	add	r11,r7,r2
    9b4c:	510d803a 	cmpltu	r6,r10,r4
    9b50:	6099883a 	add	r12,r12,r2
    9b54:	32d7883a 	add	r11,r6,r11
    9b58:	00840034 	movhi	r2,4096
    9b5c:	10bfffc4 	addi	r2,r2,-1
    9b60:	2011883a 	mov	r8,r4
    9b64:	3813883a 	mov	r9,r7
    9b68:	a1000315 	stw	r4,12(r20)
    9b6c:	a1c00415 	stw	r7,16(r20)
    9b70:	a3000215 	stw	r12,8(r20)
    9b74:	12c00336 	bltu	r2,r11,9b84 <_fpadd_parts+0x1a8>
    9b78:	58bfed1e 	bne	r11,r2,9b30 <_fpadd_parts+0x154>
    9b7c:	00bfff84 	movi	r2,-2
    9b80:	12bfeb2e 	bgeu	r2,r10,9b30 <_fpadd_parts+0x154>
    9b84:	a2800417 	ldw	r10,16(r20)
    9b88:	008000c4 	movi	r2,3
    9b8c:	00c80034 	movhi	r3,8192
    9b90:	18ffffc4 	addi	r3,r3,-1
    9b94:	a2400317 	ldw	r9,12(r20)
    9b98:	a0800015 	stw	r2,0(r20)
    9b9c:	1a802336 	bltu	r3,r10,9c2c <_fpadd_parts+0x250>
    9ba0:	a027883a 	mov	r19,r20
    9ba4:	9805883a 	mov	r2,r19
    9ba8:	ddc00717 	ldw	r23,28(sp)
    9bac:	dd800617 	ldw	r22,24(sp)
    9bb0:	dd400517 	ldw	r21,20(sp)
    9bb4:	dd000417 	ldw	r20,16(sp)
    9bb8:	dcc00317 	ldw	r19,12(sp)
    9bbc:	dc800217 	ldw	r18,8(sp)
    9bc0:	dc400117 	ldw	r17,4(sp)
    9bc4:	dc000017 	ldw	r16,0(sp)
    9bc8:	dec00804 	addi	sp,sp,32
    9bcc:	f800283a 	ret
    9bd0:	20fff41e 	bne	r4,r3,9ba4 <_fpadd_parts+0x1c8>
    9bd4:	31000015 	stw	r4,0(r6)
    9bd8:	98800117 	ldw	r2,4(r19)
    9bdc:	30800115 	stw	r2,4(r6)
    9be0:	98c00217 	ldw	r3,8(r19)
    9be4:	30c00215 	stw	r3,8(r6)
    9be8:	98800317 	ldw	r2,12(r19)
    9bec:	30800315 	stw	r2,12(r6)
    9bf0:	98c00417 	ldw	r3,16(r19)
    9bf4:	30c00415 	stw	r3,16(r6)
    9bf8:	98800117 	ldw	r2,4(r19)
    9bfc:	28c00117 	ldw	r3,4(r5)
    9c00:	3027883a 	mov	r19,r6
    9c04:	10c4703a 	and	r2,r2,r3
    9c08:	30800115 	stw	r2,4(r6)
    9c0c:	003fe506 	br	9ba4 <_fpadd_parts+0x1c8>
    9c10:	1dc02616 	blt	r3,r23,9cac <_fpadd_parts+0x2d0>
    9c14:	0023883a 	mov	r17,zero
    9c18:	182f883a 	mov	r23,r3
    9c1c:	0025883a 	mov	r18,zero
    9c20:	003fa806 	br	9ac4 <_fpadd_parts+0xe8>
    9c24:	a827883a 	mov	r19,r21
    9c28:	003fde06 	br	9ba4 <_fpadd_parts+0x1c8>
    9c2c:	01800044 	movi	r6,1
    9c30:	500497fa 	slli	r2,r10,31
    9c34:	4808d07a 	srli	r4,r9,1
    9c38:	518ad83a 	srl	r5,r10,r6
    9c3c:	a2000217 	ldw	r8,8(r20)
    9c40:	1108b03a 	or	r4,r2,r4
    9c44:	0007883a 	mov	r3,zero
    9c48:	4984703a 	and	r2,r9,r6
    9c4c:	208cb03a 	or	r6,r4,r2
    9c50:	28ceb03a 	or	r7,r5,r3
    9c54:	42000044 	addi	r8,r8,1
    9c58:	a027883a 	mov	r19,r20
    9c5c:	a1c00415 	stw	r7,16(r20)
    9c60:	a2000215 	stw	r8,8(r20)
    9c64:	a1800315 	stw	r6,12(r20)
    9c68:	003fce06 	br	9ba4 <_fpadd_parts+0x1c8>
    9c6c:	8bc5c83a 	sub	r2,r17,r15
    9c70:	8889803a 	cmpltu	r4,r17,r2
    9c74:	9407c83a 	sub	r3,r18,r16
    9c78:	1909c83a 	sub	r4,r3,r4
    9c7c:	100d883a 	mov	r6,r2
    9c80:	200f883a 	mov	r7,r4
    9c84:	003f9906 	br	9aec <_fpadd_parts+0x110>
    9c88:	7c45883a 	add	r2,r15,r17
    9c8c:	13c9803a 	cmpltu	r4,r2,r15
    9c90:	8487883a 	add	r3,r16,r18
    9c94:	20c9883a 	add	r4,r4,r3
    9c98:	a1400115 	stw	r5,4(r20)
    9c9c:	a5c00215 	stw	r23,8(r20)
    9ca0:	a0800315 	stw	r2,12(r20)
    9ca4:	a1000415 	stw	r4,16(r20)
    9ca8:	003fb606 	br	9b84 <_fpadd_parts+0x1a8>
    9cac:	001f883a 	mov	r15,zero
    9cb0:	0021883a 	mov	r16,zero
    9cb4:	003f8306 	br	9ac4 <_fpadd_parts+0xe8>
    9cb8:	018dc83a 	sub	r6,zero,r6
    9cbc:	003f6706 	br	9a5c <_fpadd_parts+0x80>
    9cc0:	00bfff84 	movi	r2,-2
    9cc4:	117faf36 	bltu	r2,r5,9b84 <_fpadd_parts+0x1a8>
    9cc8:	003f9806 	br	9b2c <_fpadd_parts+0x150>
    9ccc:	0005883a 	mov	r2,zero
    9cd0:	1189c83a 	sub	r4,r2,r6
    9cd4:	1105803a 	cmpltu	r2,r2,r4
    9cd8:	01cbc83a 	sub	r5,zero,r7
    9cdc:	2885c83a 	sub	r2,r5,r2
    9ce0:	01800044 	movi	r6,1
    9ce4:	a1800115 	stw	r6,4(r20)
    9ce8:	a5c00215 	stw	r23,8(r20)
    9cec:	a1000315 	stw	r4,12(r20)
    9cf0:	a0800415 	stw	r2,16(r20)
    9cf4:	003f8206 	br	9b00 <_fpadd_parts+0x124>
    9cf8:	203f7226 	beq	r4,zero,9ac4 <_fpadd_parts+0xe8>
    9cfc:	35bff804 	addi	r22,r6,-32
    9d00:	b9af883a 	add	r23,r23,r6
    9d04:	b0003116 	blt	r22,zero,9dcc <_fpadd_parts+0x3f0>
    9d08:	959ad83a 	srl	r13,r18,r22
    9d0c:	001d883a 	mov	r14,zero
    9d10:	000f883a 	mov	r7,zero
    9d14:	01000044 	movi	r4,1
    9d18:	0011883a 	mov	r8,zero
    9d1c:	b0002516 	blt	r22,zero,9db4 <_fpadd_parts+0x3d8>
    9d20:	2594983a 	sll	r10,r4,r22
    9d24:	0013883a 	mov	r9,zero
    9d28:	00bfffc4 	movi	r2,-1
    9d2c:	4889883a 	add	r4,r9,r2
    9d30:	508b883a 	add	r5,r10,r2
    9d34:	224d803a 	cmpltu	r6,r4,r9
    9d38:	314b883a 	add	r5,r6,r5
    9d3c:	8904703a 	and	r2,r17,r4
    9d40:	9146703a 	and	r3,r18,r5
    9d44:	10c4b03a 	or	r2,r2,r3
    9d48:	10000226 	beq	r2,zero,9d54 <_fpadd_parts+0x378>
    9d4c:	01c00044 	movi	r7,1
    9d50:	0011883a 	mov	r8,zero
    9d54:	69e2b03a 	or	r17,r13,r7
    9d58:	7224b03a 	or	r18,r14,r8
    9d5c:	003f5906 	br	9ac4 <_fpadd_parts+0xe8>
    9d60:	8407883a 	add	r3,r16,r16
    9d64:	008007c4 	movi	r2,31
    9d68:	1185c83a 	sub	r2,r2,r6
    9d6c:	1886983a 	sll	r3,r3,r2
    9d70:	7996d83a 	srl	r11,r15,r6
    9d74:	8198d83a 	srl	r12,r16,r6
    9d78:	1ad6b03a 	or	r11,r3,r11
    9d7c:	003f3e06 	br	9a78 <_fpadd_parts+0x9c>
    9d80:	2006d07a 	srli	r3,r4,1
    9d84:	008007c4 	movi	r2,31
    9d88:	1185c83a 	sub	r2,r2,r6
    9d8c:	1890d83a 	srl	r8,r3,r2
    9d90:	218e983a 	sll	r7,r4,r6
    9d94:	003f3e06 	br	9a90 <_fpadd_parts+0xb4>
    9d98:	113f821e 	bne	r2,r4,9ba4 <_fpadd_parts+0x1c8>
    9d9c:	28c00117 	ldw	r3,4(r5)
    9da0:	98800117 	ldw	r2,4(r19)
    9da4:	10ff7f26 	beq	r2,r3,9ba4 <_fpadd_parts+0x1c8>
    9da8:	04c00074 	movhi	r19,1
    9dac:	9cfcfb04 	addi	r19,r19,-3092
    9db0:	003f7c06 	br	9ba4 <_fpadd_parts+0x1c8>
    9db4:	2006d07a 	srli	r3,r4,1
    9db8:	008007c4 	movi	r2,31
    9dbc:	1185c83a 	sub	r2,r2,r6
    9dc0:	1894d83a 	srl	r10,r3,r2
    9dc4:	2192983a 	sll	r9,r4,r6
    9dc8:	003fd706 	br	9d28 <_fpadd_parts+0x34c>
    9dcc:	9487883a 	add	r3,r18,r18
    9dd0:	008007c4 	movi	r2,31
    9dd4:	1185c83a 	sub	r2,r2,r6
    9dd8:	1886983a 	sll	r3,r3,r2
    9ddc:	899ad83a 	srl	r13,r17,r6
    9de0:	919cd83a 	srl	r14,r18,r6
    9de4:	1b5ab03a 	or	r13,r3,r13
    9de8:	003fc906 	br	9d10 <_fpadd_parts+0x334>

00009dec <__subdf3>:
    9dec:	deffea04 	addi	sp,sp,-88
    9df0:	dcc01415 	stw	r19,80(sp)
    9df4:	dcc00404 	addi	r19,sp,16
    9df8:	2011883a 	mov	r8,r4
    9dfc:	2813883a 	mov	r9,r5
    9e00:	dc401315 	stw	r17,76(sp)
    9e04:	d809883a 	mov	r4,sp
    9e08:	980b883a 	mov	r5,r19
    9e0c:	dc400904 	addi	r17,sp,36
    9e10:	dfc01515 	stw	ra,84(sp)
    9e14:	da400115 	stw	r9,4(sp)
    9e18:	d9c00315 	stw	r7,12(sp)
    9e1c:	da000015 	stw	r8,0(sp)
    9e20:	d9800215 	stw	r6,8(sp)
    9e24:	000af340 	call	af34 <__unpack_d>
    9e28:	d9000204 	addi	r4,sp,8
    9e2c:	880b883a 	mov	r5,r17
    9e30:	000af340 	call	af34 <__unpack_d>
    9e34:	d8800a17 	ldw	r2,40(sp)
    9e38:	880b883a 	mov	r5,r17
    9e3c:	9809883a 	mov	r4,r19
    9e40:	d9800e04 	addi	r6,sp,56
    9e44:	1080005c 	xori	r2,r2,1
    9e48:	d8800a15 	stw	r2,40(sp)
    9e4c:	00099dc0 	call	99dc <_fpadd_parts>
    9e50:	1009883a 	mov	r4,r2
    9e54:	000ac200 	call	ac20 <__pack_d>
    9e58:	dfc01517 	ldw	ra,84(sp)
    9e5c:	dcc01417 	ldw	r19,80(sp)
    9e60:	dc401317 	ldw	r17,76(sp)
    9e64:	dec01604 	addi	sp,sp,88
    9e68:	f800283a 	ret

00009e6c <__adddf3>:
    9e6c:	deffea04 	addi	sp,sp,-88
    9e70:	dcc01415 	stw	r19,80(sp)
    9e74:	dcc00404 	addi	r19,sp,16
    9e78:	2011883a 	mov	r8,r4
    9e7c:	2813883a 	mov	r9,r5
    9e80:	dc401315 	stw	r17,76(sp)
    9e84:	d809883a 	mov	r4,sp
    9e88:	980b883a 	mov	r5,r19
    9e8c:	dc400904 	addi	r17,sp,36
    9e90:	dfc01515 	stw	ra,84(sp)
    9e94:	da400115 	stw	r9,4(sp)
    9e98:	d9c00315 	stw	r7,12(sp)
    9e9c:	da000015 	stw	r8,0(sp)
    9ea0:	d9800215 	stw	r6,8(sp)
    9ea4:	000af340 	call	af34 <__unpack_d>
    9ea8:	d9000204 	addi	r4,sp,8
    9eac:	880b883a 	mov	r5,r17
    9eb0:	000af340 	call	af34 <__unpack_d>
    9eb4:	d9800e04 	addi	r6,sp,56
    9eb8:	9809883a 	mov	r4,r19
    9ebc:	880b883a 	mov	r5,r17
    9ec0:	00099dc0 	call	99dc <_fpadd_parts>
    9ec4:	1009883a 	mov	r4,r2
    9ec8:	000ac200 	call	ac20 <__pack_d>
    9ecc:	dfc01517 	ldw	ra,84(sp)
    9ed0:	dcc01417 	ldw	r19,80(sp)
    9ed4:	dc401317 	ldw	r17,76(sp)
    9ed8:	dec01604 	addi	sp,sp,88
    9edc:	f800283a 	ret

00009ee0 <__muldf3>:
    9ee0:	deffe004 	addi	sp,sp,-128
    9ee4:	dc401815 	stw	r17,96(sp)
    9ee8:	dc400404 	addi	r17,sp,16
    9eec:	2011883a 	mov	r8,r4
    9ef0:	2813883a 	mov	r9,r5
    9ef4:	dc001715 	stw	r16,92(sp)
    9ef8:	d809883a 	mov	r4,sp
    9efc:	880b883a 	mov	r5,r17
    9f00:	dc000904 	addi	r16,sp,36
    9f04:	dfc01f15 	stw	ra,124(sp)
    9f08:	da400115 	stw	r9,4(sp)
    9f0c:	d9c00315 	stw	r7,12(sp)
    9f10:	da000015 	stw	r8,0(sp)
    9f14:	d9800215 	stw	r6,8(sp)
    9f18:	ddc01e15 	stw	r23,120(sp)
    9f1c:	dd801d15 	stw	r22,116(sp)
    9f20:	dd401c15 	stw	r21,112(sp)
    9f24:	dd001b15 	stw	r20,108(sp)
    9f28:	dcc01a15 	stw	r19,104(sp)
    9f2c:	dc801915 	stw	r18,100(sp)
    9f30:	000af340 	call	af34 <__unpack_d>
    9f34:	d9000204 	addi	r4,sp,8
    9f38:	800b883a 	mov	r5,r16
    9f3c:	000af340 	call	af34 <__unpack_d>
    9f40:	d9000417 	ldw	r4,16(sp)
    9f44:	00800044 	movi	r2,1
    9f48:	1100102e 	bgeu	r2,r4,9f8c <__muldf3+0xac>
    9f4c:	d8c00917 	ldw	r3,36(sp)
    9f50:	10c0062e 	bgeu	r2,r3,9f6c <__muldf3+0x8c>
    9f54:	00800104 	movi	r2,4
    9f58:	20800a26 	beq	r4,r2,9f84 <__muldf3+0xa4>
    9f5c:	1880cc26 	beq	r3,r2,a290 <__muldf3+0x3b0>
    9f60:	00800084 	movi	r2,2
    9f64:	20800926 	beq	r4,r2,9f8c <__muldf3+0xac>
    9f68:	1880191e 	bne	r3,r2,9fd0 <__muldf3+0xf0>
    9f6c:	d8c00a17 	ldw	r3,40(sp)
    9f70:	d8800517 	ldw	r2,20(sp)
    9f74:	8009883a 	mov	r4,r16
    9f78:	10c4c03a 	cmpne	r2,r2,r3
    9f7c:	d8800a15 	stw	r2,40(sp)
    9f80:	00000706 	br	9fa0 <__muldf3+0xc0>
    9f84:	00800084 	movi	r2,2
    9f88:	1880c326 	beq	r3,r2,a298 <__muldf3+0x3b8>
    9f8c:	d8800517 	ldw	r2,20(sp)
    9f90:	d8c00a17 	ldw	r3,40(sp)
    9f94:	8809883a 	mov	r4,r17
    9f98:	10c4c03a 	cmpne	r2,r2,r3
    9f9c:	d8800515 	stw	r2,20(sp)
    9fa0:	000ac200 	call	ac20 <__pack_d>
    9fa4:	dfc01f17 	ldw	ra,124(sp)
    9fa8:	ddc01e17 	ldw	r23,120(sp)
    9fac:	dd801d17 	ldw	r22,116(sp)
    9fb0:	dd401c17 	ldw	r21,112(sp)
    9fb4:	dd001b17 	ldw	r20,108(sp)
    9fb8:	dcc01a17 	ldw	r19,104(sp)
    9fbc:	dc801917 	ldw	r18,100(sp)
    9fc0:	dc401817 	ldw	r17,96(sp)
    9fc4:	dc001717 	ldw	r16,92(sp)
    9fc8:	dec02004 	addi	sp,sp,128
    9fcc:	f800283a 	ret
    9fd0:	dd800717 	ldw	r22,28(sp)
    9fd4:	dc800c17 	ldw	r18,48(sp)
    9fd8:	002b883a 	mov	r21,zero
    9fdc:	0023883a 	mov	r17,zero
    9fe0:	a80b883a 	mov	r5,r21
    9fe4:	b00d883a 	mov	r6,r22
    9fe8:	880f883a 	mov	r7,r17
    9fec:	ddc00817 	ldw	r23,32(sp)
    9ff0:	dcc00d17 	ldw	r19,52(sp)
    9ff4:	9009883a 	mov	r4,r18
    9ff8:	000ab080 	call	ab08 <__muldi3>
    9ffc:	001b883a 	mov	r13,zero
    a000:	680f883a 	mov	r7,r13
    a004:	b009883a 	mov	r4,r22
    a008:	000b883a 	mov	r5,zero
    a00c:	980d883a 	mov	r6,r19
    a010:	b82d883a 	mov	r22,r23
    a014:	002f883a 	mov	r23,zero
    a018:	db401615 	stw	r13,88(sp)
    a01c:	d8801315 	stw	r2,76(sp)
    a020:	d8c01415 	stw	r3,80(sp)
    a024:	dcc01515 	stw	r19,84(sp)
    a028:	000ab080 	call	ab08 <__muldi3>
    a02c:	b00d883a 	mov	r6,r22
    a030:	000b883a 	mov	r5,zero
    a034:	9009883a 	mov	r4,r18
    a038:	b80f883a 	mov	r7,r23
    a03c:	1021883a 	mov	r16,r2
    a040:	1823883a 	mov	r17,r3
    a044:	000ab080 	call	ab08 <__muldi3>
    a048:	8085883a 	add	r2,r16,r2
    a04c:	140d803a 	cmpltu	r6,r2,r16
    a050:	88c7883a 	add	r3,r17,r3
    a054:	30cd883a 	add	r6,r6,r3
    a058:	1029883a 	mov	r20,r2
    a05c:	302b883a 	mov	r21,r6
    a060:	da801317 	ldw	r10,76(sp)
    a064:	dac01417 	ldw	r11,80(sp)
    a068:	db001517 	ldw	r12,84(sp)
    a06c:	db401617 	ldw	r13,88(sp)
    a070:	3440612e 	bgeu	r6,r17,a1f8 <__muldf3+0x318>
    a074:	0009883a 	mov	r4,zero
    a078:	5105883a 	add	r2,r10,r4
    a07c:	128d803a 	cmpltu	r6,r2,r10
    a080:	5d07883a 	add	r3,r11,r20
    a084:	30cd883a 	add	r6,r6,r3
    a088:	0021883a 	mov	r16,zero
    a08c:	04400044 	movi	r17,1
    a090:	1025883a 	mov	r18,r2
    a094:	3027883a 	mov	r19,r6
    a098:	32c06236 	bltu	r6,r11,a224 <__muldf3+0x344>
    a09c:	59807a26 	beq	r11,r6,a288 <__muldf3+0x3a8>
    a0a0:	680b883a 	mov	r5,r13
    a0a4:	b80f883a 	mov	r7,r23
    a0a8:	6009883a 	mov	r4,r12
    a0ac:	b00d883a 	mov	r6,r22
    a0b0:	000ab080 	call	ab08 <__muldi3>
    a0b4:	1009883a 	mov	r4,r2
    a0b8:	000f883a 	mov	r7,zero
    a0bc:	1545883a 	add	r2,r2,r21
    a0c0:	1111803a 	cmpltu	r8,r2,r4
    a0c4:	19c7883a 	add	r3,r3,r7
    a0c8:	40c7883a 	add	r3,r8,r3
    a0cc:	88cb883a 	add	r5,r17,r3
    a0d0:	d8c00617 	ldw	r3,24(sp)
    a0d4:	8089883a 	add	r4,r16,r2
    a0d8:	d8800b17 	ldw	r2,44(sp)
    a0dc:	18c00104 	addi	r3,r3,4
    a0e0:	240d803a 	cmpltu	r6,r4,r16
    a0e4:	10c7883a 	add	r3,r2,r3
    a0e8:	2013883a 	mov	r9,r4
    a0ec:	d8800a17 	ldw	r2,40(sp)
    a0f0:	d9000517 	ldw	r4,20(sp)
    a0f4:	314d883a 	add	r6,r6,r5
    a0f8:	3015883a 	mov	r10,r6
    a0fc:	2088c03a 	cmpne	r4,r4,r2
    a100:	00880034 	movhi	r2,8192
    a104:	10bfffc4 	addi	r2,r2,-1
    a108:	d9000f15 	stw	r4,60(sp)
    a10c:	d8c01015 	stw	r3,64(sp)
    a110:	1180162e 	bgeu	r2,r6,a16c <__muldf3+0x28c>
    a114:	1811883a 	mov	r8,r3
    a118:	101f883a 	mov	r15,r2
    a11c:	980497fa 	slli	r2,r19,31
    a120:	9016d07a 	srli	r11,r18,1
    a124:	500697fa 	slli	r3,r10,31
    a128:	480cd07a 	srli	r6,r9,1
    a12c:	500ed07a 	srli	r7,r10,1
    a130:	12d6b03a 	or	r11,r2,r11
    a134:	00800044 	movi	r2,1
    a138:	198cb03a 	or	r6,r3,r6
    a13c:	4888703a 	and	r4,r9,r2
    a140:	9818d07a 	srli	r12,r19,1
    a144:	001b883a 	mov	r13,zero
    a148:	03a00034 	movhi	r14,32768
    a14c:	3013883a 	mov	r9,r6
    a150:	3815883a 	mov	r10,r7
    a154:	4091883a 	add	r8,r8,r2
    a158:	20000226 	beq	r4,zero,a164 <__muldf3+0x284>
    a15c:	5b64b03a 	or	r18,r11,r13
    a160:	63a6b03a 	or	r19,r12,r14
    a164:	7abfed36 	bltu	r15,r10,a11c <__muldf3+0x23c>
    a168:	da001015 	stw	r8,64(sp)
    a16c:	00840034 	movhi	r2,4096
    a170:	10bfffc4 	addi	r2,r2,-1
    a174:	12801436 	bltu	r2,r10,a1c8 <__muldf3+0x2e8>
    a178:	da001017 	ldw	r8,64(sp)
    a17c:	101f883a 	mov	r15,r2
    a180:	4a45883a 	add	r2,r9,r9
    a184:	124d803a 	cmpltu	r6,r2,r9
    a188:	5287883a 	add	r3,r10,r10
    a18c:	9497883a 	add	r11,r18,r18
    a190:	5c8f803a 	cmpltu	r7,r11,r18
    a194:	9cd9883a 	add	r12,r19,r19
    a198:	01000044 	movi	r4,1
    a19c:	30cd883a 	add	r6,r6,r3
    a1a0:	3b0f883a 	add	r7,r7,r12
    a1a4:	423fffc4 	addi	r8,r8,-1
    a1a8:	1013883a 	mov	r9,r2
    a1ac:	3015883a 	mov	r10,r6
    a1b0:	111ab03a 	or	r13,r2,r4
    a1b4:	98003016 	blt	r19,zero,a278 <__muldf3+0x398>
    a1b8:	5825883a 	mov	r18,r11
    a1bc:	3827883a 	mov	r19,r7
    a1c0:	7abfef2e 	bgeu	r15,r10,a180 <__muldf3+0x2a0>
    a1c4:	da001015 	stw	r8,64(sp)
    a1c8:	00803fc4 	movi	r2,255
    a1cc:	488e703a 	and	r7,r9,r2
    a1d0:	00802004 	movi	r2,128
    a1d4:	0007883a 	mov	r3,zero
    a1d8:	0011883a 	mov	r8,zero
    a1dc:	38801826 	beq	r7,r2,a240 <__muldf3+0x360>
    a1e0:	008000c4 	movi	r2,3
    a1e4:	d9000e04 	addi	r4,sp,56
    a1e8:	da801215 	stw	r10,72(sp)
    a1ec:	d8800e15 	stw	r2,56(sp)
    a1f0:	da401115 	stw	r9,68(sp)
    a1f4:	003f6a06 	br	9fa0 <__muldf3+0xc0>
    a1f8:	89802126 	beq	r17,r6,a280 <__muldf3+0x3a0>
    a1fc:	0009883a 	mov	r4,zero
    a200:	5105883a 	add	r2,r10,r4
    a204:	128d803a 	cmpltu	r6,r2,r10
    a208:	5d07883a 	add	r3,r11,r20
    a20c:	30cd883a 	add	r6,r6,r3
    a210:	0021883a 	mov	r16,zero
    a214:	0023883a 	mov	r17,zero
    a218:	1025883a 	mov	r18,r2
    a21c:	3027883a 	mov	r19,r6
    a220:	32ff9e2e 	bgeu	r6,r11,a09c <__muldf3+0x1bc>
    a224:	00800044 	movi	r2,1
    a228:	8089883a 	add	r4,r16,r2
    a22c:	240d803a 	cmpltu	r6,r4,r16
    a230:	344d883a 	add	r6,r6,r17
    a234:	2021883a 	mov	r16,r4
    a238:	3023883a 	mov	r17,r6
    a23c:	003f9806 	br	a0a0 <__muldf3+0x1c0>
    a240:	403fe71e 	bne	r8,zero,a1e0 <__muldf3+0x300>
    a244:	01004004 	movi	r4,256
    a248:	4904703a 	and	r2,r9,r4
    a24c:	10c4b03a 	or	r2,r2,r3
    a250:	103fe31e 	bne	r2,zero,a1e0 <__muldf3+0x300>
    a254:	94c4b03a 	or	r2,r18,r19
    a258:	103fe126 	beq	r2,zero,a1e0 <__muldf3+0x300>
    a25c:	49c5883a 	add	r2,r9,r7
    a260:	1251803a 	cmpltu	r8,r2,r9
    a264:	4291883a 	add	r8,r8,r10
    a268:	013fc004 	movi	r4,-256
    a26c:	1112703a 	and	r9,r2,r4
    a270:	4015883a 	mov	r10,r8
    a274:	003fda06 	br	a1e0 <__muldf3+0x300>
    a278:	6813883a 	mov	r9,r13
    a27c:	003fce06 	br	a1b8 <__muldf3+0x2d8>
    a280:	143f7c36 	bltu	r2,r16,a074 <__muldf3+0x194>
    a284:	003fdd06 	br	a1fc <__muldf3+0x31c>
    a288:	12bf852e 	bgeu	r2,r10,a0a0 <__muldf3+0x1c0>
    a28c:	003fe506 	br	a224 <__muldf3+0x344>
    a290:	00800084 	movi	r2,2
    a294:	20bf351e 	bne	r4,r2,9f6c <__muldf3+0x8c>
    a298:	01000074 	movhi	r4,1
    a29c:	213cfb04 	addi	r4,r4,-3092
    a2a0:	003f3f06 	br	9fa0 <__muldf3+0xc0>

0000a2a4 <__divdf3>:
    a2a4:	deffed04 	addi	sp,sp,-76
    a2a8:	dcc01115 	stw	r19,68(sp)
    a2ac:	dcc00404 	addi	r19,sp,16
    a2b0:	2011883a 	mov	r8,r4
    a2b4:	2813883a 	mov	r9,r5
    a2b8:	dc000e15 	stw	r16,56(sp)
    a2bc:	d809883a 	mov	r4,sp
    a2c0:	980b883a 	mov	r5,r19
    a2c4:	dc000904 	addi	r16,sp,36
    a2c8:	dfc01215 	stw	ra,72(sp)
    a2cc:	da400115 	stw	r9,4(sp)
    a2d0:	d9c00315 	stw	r7,12(sp)
    a2d4:	da000015 	stw	r8,0(sp)
    a2d8:	d9800215 	stw	r6,8(sp)
    a2dc:	dc801015 	stw	r18,64(sp)
    a2e0:	dc400f15 	stw	r17,60(sp)
    a2e4:	000af340 	call	af34 <__unpack_d>
    a2e8:	d9000204 	addi	r4,sp,8
    a2ec:	800b883a 	mov	r5,r16
    a2f0:	000af340 	call	af34 <__unpack_d>
    a2f4:	d9000417 	ldw	r4,16(sp)
    a2f8:	00800044 	movi	r2,1
    a2fc:	11000b2e 	bgeu	r2,r4,a32c <__divdf3+0x88>
    a300:	d9400917 	ldw	r5,36(sp)
    a304:	1140762e 	bgeu	r2,r5,a4e0 <__divdf3+0x23c>
    a308:	d8800517 	ldw	r2,20(sp)
    a30c:	d8c00a17 	ldw	r3,40(sp)
    a310:	01800104 	movi	r6,4
    a314:	10c4f03a 	xor	r2,r2,r3
    a318:	d8800515 	stw	r2,20(sp)
    a31c:	21800226 	beq	r4,r6,a328 <__divdf3+0x84>
    a320:	00800084 	movi	r2,2
    a324:	2080141e 	bne	r4,r2,a378 <__divdf3+0xd4>
    a328:	29000926 	beq	r5,r4,a350 <__divdf3+0xac>
    a32c:	9809883a 	mov	r4,r19
    a330:	000ac200 	call	ac20 <__pack_d>
    a334:	dfc01217 	ldw	ra,72(sp)
    a338:	dcc01117 	ldw	r19,68(sp)
    a33c:	dc801017 	ldw	r18,64(sp)
    a340:	dc400f17 	ldw	r17,60(sp)
    a344:	dc000e17 	ldw	r16,56(sp)
    a348:	dec01304 	addi	sp,sp,76
    a34c:	f800283a 	ret
    a350:	01000074 	movhi	r4,1
    a354:	213cfb04 	addi	r4,r4,-3092
    a358:	000ac200 	call	ac20 <__pack_d>
    a35c:	dfc01217 	ldw	ra,72(sp)
    a360:	dcc01117 	ldw	r19,68(sp)
    a364:	dc801017 	ldw	r18,64(sp)
    a368:	dc400f17 	ldw	r17,60(sp)
    a36c:	dc000e17 	ldw	r16,56(sp)
    a370:	dec01304 	addi	sp,sp,76
    a374:	f800283a 	ret
    a378:	29805b26 	beq	r5,r6,a4e8 <__divdf3+0x244>
    a37c:	28802d26 	beq	r5,r2,a434 <__divdf3+0x190>
    a380:	d8c00617 	ldw	r3,24(sp)
    a384:	d8800b17 	ldw	r2,44(sp)
    a388:	d9c00817 	ldw	r7,32(sp)
    a38c:	dc400d17 	ldw	r17,52(sp)
    a390:	188bc83a 	sub	r5,r3,r2
    a394:	d9800717 	ldw	r6,28(sp)
    a398:	dc000c17 	ldw	r16,48(sp)
    a39c:	d9400615 	stw	r5,24(sp)
    a3a0:	3c403836 	bltu	r7,r17,a484 <__divdf3+0x1e0>
    a3a4:	89c03626 	beq	r17,r7,a480 <__divdf3+0x1dc>
    a3a8:	0015883a 	mov	r10,zero
    a3ac:	001d883a 	mov	r14,zero
    a3b0:	02c40034 	movhi	r11,4096
    a3b4:	001f883a 	mov	r15,zero
    a3b8:	003f883a 	mov	ra,zero
    a3bc:	04800f44 	movi	r18,61
    a3c0:	00000f06 	br	a400 <__divdf3+0x15c>
    a3c4:	601d883a 	mov	r14,r12
    a3c8:	681f883a 	mov	r15,r13
    a3cc:	400d883a 	mov	r6,r8
    a3d0:	100f883a 	mov	r7,r2
    a3d4:	3191883a 	add	r8,r6,r6
    a3d8:	5808d07a 	srli	r4,r11,1
    a3dc:	4185803a 	cmpltu	r2,r8,r6
    a3e0:	39d3883a 	add	r9,r7,r7
    a3e4:	28c6b03a 	or	r3,r5,r3
    a3e8:	1245883a 	add	r2,r2,r9
    a3ec:	1815883a 	mov	r10,r3
    a3f0:	2017883a 	mov	r11,r4
    a3f4:	400d883a 	mov	r6,r8
    a3f8:	100f883a 	mov	r7,r2
    a3fc:	fc801726 	beq	ra,r18,a45c <__divdf3+0x1b8>
    a400:	580a97fa 	slli	r5,r11,31
    a404:	5006d07a 	srli	r3,r10,1
    a408:	ffc00044 	addi	ra,ra,1
    a40c:	3c7ff136 	bltu	r7,r17,a3d4 <__divdf3+0x130>
    a410:	3411c83a 	sub	r8,r6,r16
    a414:	3205803a 	cmpltu	r2,r6,r8
    a418:	3c53c83a 	sub	r9,r7,r17
    a41c:	7298b03a 	or	r12,r14,r10
    a420:	7adab03a 	or	r13,r15,r11
    a424:	4885c83a 	sub	r2,r9,r2
    a428:	89ffe61e 	bne	r17,r7,a3c4 <__divdf3+0x120>
    a42c:	343fe936 	bltu	r6,r16,a3d4 <__divdf3+0x130>
    a430:	003fe406 	br	a3c4 <__divdf3+0x120>
    a434:	9809883a 	mov	r4,r19
    a438:	d9800415 	stw	r6,16(sp)
    a43c:	000ac200 	call	ac20 <__pack_d>
    a440:	dfc01217 	ldw	ra,72(sp)
    a444:	dcc01117 	ldw	r19,68(sp)
    a448:	dc801017 	ldw	r18,64(sp)
    a44c:	dc400f17 	ldw	r17,60(sp)
    a450:	dc000e17 	ldw	r16,56(sp)
    a454:	dec01304 	addi	sp,sp,76
    a458:	f800283a 	ret
    a45c:	00803fc4 	movi	r2,255
    a460:	7090703a 	and	r8,r14,r2
    a464:	00802004 	movi	r2,128
    a468:	0007883a 	mov	r3,zero
    a46c:	0013883a 	mov	r9,zero
    a470:	40800d26 	beq	r8,r2,a4a8 <__divdf3+0x204>
    a474:	dbc00815 	stw	r15,32(sp)
    a478:	db800715 	stw	r14,28(sp)
    a47c:	003fab06 	br	a32c <__divdf3+0x88>
    a480:	343fc92e 	bgeu	r6,r16,a3a8 <__divdf3+0x104>
    a484:	3185883a 	add	r2,r6,r6
    a488:	1189803a 	cmpltu	r4,r2,r6
    a48c:	39c7883a 	add	r3,r7,r7
    a490:	20c9883a 	add	r4,r4,r3
    a494:	297fffc4 	addi	r5,r5,-1
    a498:	100d883a 	mov	r6,r2
    a49c:	200f883a 	mov	r7,r4
    a4a0:	d9400615 	stw	r5,24(sp)
    a4a4:	003fc006 	br	a3a8 <__divdf3+0x104>
    a4a8:	483ff21e 	bne	r9,zero,a474 <__divdf3+0x1d0>
    a4ac:	01004004 	movi	r4,256
    a4b0:	7104703a 	and	r2,r14,r4
    a4b4:	10c4b03a 	or	r2,r2,r3
    a4b8:	103fee1e 	bne	r2,zero,a474 <__divdf3+0x1d0>
    a4bc:	31c4b03a 	or	r2,r6,r7
    a4c0:	103fec26 	beq	r2,zero,a474 <__divdf3+0x1d0>
    a4c4:	7205883a 	add	r2,r14,r8
    a4c8:	1391803a 	cmpltu	r8,r2,r14
    a4cc:	43d1883a 	add	r8,r8,r15
    a4d0:	013fc004 	movi	r4,-256
    a4d4:	111c703a 	and	r14,r2,r4
    a4d8:	401f883a 	mov	r15,r8
    a4dc:	003fe506 	br	a474 <__divdf3+0x1d0>
    a4e0:	8009883a 	mov	r4,r16
    a4e4:	003f9206 	br	a330 <__divdf3+0x8c>
    a4e8:	9809883a 	mov	r4,r19
    a4ec:	d8000715 	stw	zero,28(sp)
    a4f0:	d8000815 	stw	zero,32(sp)
    a4f4:	d8000615 	stw	zero,24(sp)
    a4f8:	003f8d06 	br	a330 <__divdf3+0x8c>

0000a4fc <__eqdf2>:
    a4fc:	deffef04 	addi	sp,sp,-68
    a500:	dc400f15 	stw	r17,60(sp)
    a504:	dc400404 	addi	r17,sp,16
    a508:	2005883a 	mov	r2,r4
    a50c:	2807883a 	mov	r3,r5
    a510:	dc000e15 	stw	r16,56(sp)
    a514:	d809883a 	mov	r4,sp
    a518:	880b883a 	mov	r5,r17
    a51c:	dc000904 	addi	r16,sp,36
    a520:	d8c00115 	stw	r3,4(sp)
    a524:	d8800015 	stw	r2,0(sp)
    a528:	d9800215 	stw	r6,8(sp)
    a52c:	dfc01015 	stw	ra,64(sp)
    a530:	d9c00315 	stw	r7,12(sp)
    a534:	000af340 	call	af34 <__unpack_d>
    a538:	d9000204 	addi	r4,sp,8
    a53c:	800b883a 	mov	r5,r16
    a540:	000af340 	call	af34 <__unpack_d>
    a544:	d8800417 	ldw	r2,16(sp)
    a548:	00c00044 	movi	r3,1
    a54c:	180d883a 	mov	r6,r3
    a550:	1880062e 	bgeu	r3,r2,a56c <__eqdf2+0x70>
    a554:	d8800917 	ldw	r2,36(sp)
    a558:	8809883a 	mov	r4,r17
    a55c:	800b883a 	mov	r5,r16
    a560:	1880022e 	bgeu	r3,r2,a56c <__eqdf2+0x70>
    a564:	000b06c0 	call	b06c <__fpcmp_parts_d>
    a568:	100d883a 	mov	r6,r2
    a56c:	3005883a 	mov	r2,r6
    a570:	dfc01017 	ldw	ra,64(sp)
    a574:	dc400f17 	ldw	r17,60(sp)
    a578:	dc000e17 	ldw	r16,56(sp)
    a57c:	dec01104 	addi	sp,sp,68
    a580:	f800283a 	ret

0000a584 <__nedf2>:
    a584:	deffef04 	addi	sp,sp,-68
    a588:	dc400f15 	stw	r17,60(sp)
    a58c:	dc400404 	addi	r17,sp,16
    a590:	2005883a 	mov	r2,r4
    a594:	2807883a 	mov	r3,r5
    a598:	dc000e15 	stw	r16,56(sp)
    a59c:	d809883a 	mov	r4,sp
    a5a0:	880b883a 	mov	r5,r17
    a5a4:	dc000904 	addi	r16,sp,36
    a5a8:	d8c00115 	stw	r3,4(sp)
    a5ac:	d8800015 	stw	r2,0(sp)
    a5b0:	d9800215 	stw	r6,8(sp)
    a5b4:	dfc01015 	stw	ra,64(sp)
    a5b8:	d9c00315 	stw	r7,12(sp)
    a5bc:	000af340 	call	af34 <__unpack_d>
    a5c0:	d9000204 	addi	r4,sp,8
    a5c4:	800b883a 	mov	r5,r16
    a5c8:	000af340 	call	af34 <__unpack_d>
    a5cc:	d8800417 	ldw	r2,16(sp)
    a5d0:	00c00044 	movi	r3,1
    a5d4:	180d883a 	mov	r6,r3
    a5d8:	1880062e 	bgeu	r3,r2,a5f4 <__nedf2+0x70>
    a5dc:	d8800917 	ldw	r2,36(sp)
    a5e0:	8809883a 	mov	r4,r17
    a5e4:	800b883a 	mov	r5,r16
    a5e8:	1880022e 	bgeu	r3,r2,a5f4 <__nedf2+0x70>
    a5ec:	000b06c0 	call	b06c <__fpcmp_parts_d>
    a5f0:	100d883a 	mov	r6,r2
    a5f4:	3005883a 	mov	r2,r6
    a5f8:	dfc01017 	ldw	ra,64(sp)
    a5fc:	dc400f17 	ldw	r17,60(sp)
    a600:	dc000e17 	ldw	r16,56(sp)
    a604:	dec01104 	addi	sp,sp,68
    a608:	f800283a 	ret

0000a60c <__gtdf2>:
    a60c:	deffef04 	addi	sp,sp,-68
    a610:	dc400f15 	stw	r17,60(sp)
    a614:	dc400404 	addi	r17,sp,16
    a618:	2005883a 	mov	r2,r4
    a61c:	2807883a 	mov	r3,r5
    a620:	dc000e15 	stw	r16,56(sp)
    a624:	d809883a 	mov	r4,sp
    a628:	880b883a 	mov	r5,r17
    a62c:	dc000904 	addi	r16,sp,36
    a630:	d8c00115 	stw	r3,4(sp)
    a634:	d8800015 	stw	r2,0(sp)
    a638:	d9800215 	stw	r6,8(sp)
    a63c:	dfc01015 	stw	ra,64(sp)
    a640:	d9c00315 	stw	r7,12(sp)
    a644:	000af340 	call	af34 <__unpack_d>
    a648:	d9000204 	addi	r4,sp,8
    a64c:	800b883a 	mov	r5,r16
    a650:	000af340 	call	af34 <__unpack_d>
    a654:	d8800417 	ldw	r2,16(sp)
    a658:	00c00044 	movi	r3,1
    a65c:	01bfffc4 	movi	r6,-1
    a660:	1880062e 	bgeu	r3,r2,a67c <__gtdf2+0x70>
    a664:	d8800917 	ldw	r2,36(sp)
    a668:	8809883a 	mov	r4,r17
    a66c:	800b883a 	mov	r5,r16
    a670:	1880022e 	bgeu	r3,r2,a67c <__gtdf2+0x70>
    a674:	000b06c0 	call	b06c <__fpcmp_parts_d>
    a678:	100d883a 	mov	r6,r2
    a67c:	3005883a 	mov	r2,r6
    a680:	dfc01017 	ldw	ra,64(sp)
    a684:	dc400f17 	ldw	r17,60(sp)
    a688:	dc000e17 	ldw	r16,56(sp)
    a68c:	dec01104 	addi	sp,sp,68
    a690:	f800283a 	ret

0000a694 <__gedf2>:
    a694:	deffef04 	addi	sp,sp,-68
    a698:	dc400f15 	stw	r17,60(sp)
    a69c:	dc400404 	addi	r17,sp,16
    a6a0:	2005883a 	mov	r2,r4
    a6a4:	2807883a 	mov	r3,r5
    a6a8:	dc000e15 	stw	r16,56(sp)
    a6ac:	d809883a 	mov	r4,sp
    a6b0:	880b883a 	mov	r5,r17
    a6b4:	dc000904 	addi	r16,sp,36
    a6b8:	d8c00115 	stw	r3,4(sp)
    a6bc:	d8800015 	stw	r2,0(sp)
    a6c0:	d9800215 	stw	r6,8(sp)
    a6c4:	dfc01015 	stw	ra,64(sp)
    a6c8:	d9c00315 	stw	r7,12(sp)
    a6cc:	000af340 	call	af34 <__unpack_d>
    a6d0:	d9000204 	addi	r4,sp,8
    a6d4:	800b883a 	mov	r5,r16
    a6d8:	000af340 	call	af34 <__unpack_d>
    a6dc:	d8800417 	ldw	r2,16(sp)
    a6e0:	00c00044 	movi	r3,1
    a6e4:	01bfffc4 	movi	r6,-1
    a6e8:	1880062e 	bgeu	r3,r2,a704 <__gedf2+0x70>
    a6ec:	d8800917 	ldw	r2,36(sp)
    a6f0:	8809883a 	mov	r4,r17
    a6f4:	800b883a 	mov	r5,r16
    a6f8:	1880022e 	bgeu	r3,r2,a704 <__gedf2+0x70>
    a6fc:	000b06c0 	call	b06c <__fpcmp_parts_d>
    a700:	100d883a 	mov	r6,r2
    a704:	3005883a 	mov	r2,r6
    a708:	dfc01017 	ldw	ra,64(sp)
    a70c:	dc400f17 	ldw	r17,60(sp)
    a710:	dc000e17 	ldw	r16,56(sp)
    a714:	dec01104 	addi	sp,sp,68
    a718:	f800283a 	ret

0000a71c <__ltdf2>:
    a71c:	deffef04 	addi	sp,sp,-68
    a720:	dc400f15 	stw	r17,60(sp)
    a724:	dc400404 	addi	r17,sp,16
    a728:	2005883a 	mov	r2,r4
    a72c:	2807883a 	mov	r3,r5
    a730:	dc000e15 	stw	r16,56(sp)
    a734:	d809883a 	mov	r4,sp
    a738:	880b883a 	mov	r5,r17
    a73c:	dc000904 	addi	r16,sp,36
    a740:	d8c00115 	stw	r3,4(sp)
    a744:	d8800015 	stw	r2,0(sp)
    a748:	d9800215 	stw	r6,8(sp)
    a74c:	dfc01015 	stw	ra,64(sp)
    a750:	d9c00315 	stw	r7,12(sp)
    a754:	000af340 	call	af34 <__unpack_d>
    a758:	d9000204 	addi	r4,sp,8
    a75c:	800b883a 	mov	r5,r16
    a760:	000af340 	call	af34 <__unpack_d>
    a764:	d8800417 	ldw	r2,16(sp)
    a768:	00c00044 	movi	r3,1
    a76c:	180d883a 	mov	r6,r3
    a770:	1880062e 	bgeu	r3,r2,a78c <__ltdf2+0x70>
    a774:	d8800917 	ldw	r2,36(sp)
    a778:	8809883a 	mov	r4,r17
    a77c:	800b883a 	mov	r5,r16
    a780:	1880022e 	bgeu	r3,r2,a78c <__ltdf2+0x70>
    a784:	000b06c0 	call	b06c <__fpcmp_parts_d>
    a788:	100d883a 	mov	r6,r2
    a78c:	3005883a 	mov	r2,r6
    a790:	dfc01017 	ldw	ra,64(sp)
    a794:	dc400f17 	ldw	r17,60(sp)
    a798:	dc000e17 	ldw	r16,56(sp)
    a79c:	dec01104 	addi	sp,sp,68
    a7a0:	f800283a 	ret

0000a7a4 <__floatsidf>:
    a7a4:	2006d7fa 	srli	r3,r4,31
    a7a8:	defff604 	addi	sp,sp,-40
    a7ac:	008000c4 	movi	r2,3
    a7b0:	dfc00915 	stw	ra,36(sp)
    a7b4:	dcc00815 	stw	r19,32(sp)
    a7b8:	dc800715 	stw	r18,28(sp)
    a7bc:	dc400615 	stw	r17,24(sp)
    a7c0:	dc000515 	stw	r16,20(sp)
    a7c4:	d8800015 	stw	r2,0(sp)
    a7c8:	d8c00115 	stw	r3,4(sp)
    a7cc:	20000f1e 	bne	r4,zero,a80c <__floatsidf+0x68>
    a7d0:	00800084 	movi	r2,2
    a7d4:	d8800015 	stw	r2,0(sp)
    a7d8:	d809883a 	mov	r4,sp
    a7dc:	000ac200 	call	ac20 <__pack_d>
    a7e0:	1009883a 	mov	r4,r2
    a7e4:	180b883a 	mov	r5,r3
    a7e8:	2005883a 	mov	r2,r4
    a7ec:	2807883a 	mov	r3,r5
    a7f0:	dfc00917 	ldw	ra,36(sp)
    a7f4:	dcc00817 	ldw	r19,32(sp)
    a7f8:	dc800717 	ldw	r18,28(sp)
    a7fc:	dc400617 	ldw	r17,24(sp)
    a800:	dc000517 	ldw	r16,20(sp)
    a804:	dec00a04 	addi	sp,sp,40
    a808:	f800283a 	ret
    a80c:	00800f04 	movi	r2,60
    a810:	1807003a 	cmpeq	r3,r3,zero
    a814:	d8800215 	stw	r2,8(sp)
    a818:	18001126 	beq	r3,zero,a860 <__floatsidf+0xbc>
    a81c:	0027883a 	mov	r19,zero
    a820:	2025883a 	mov	r18,r4
    a824:	d9000315 	stw	r4,12(sp)
    a828:	dcc00415 	stw	r19,16(sp)
    a82c:	000aba00 	call	aba0 <__clzsi2>
    a830:	11000744 	addi	r4,r2,29
    a834:	013fe80e 	bge	zero,r4,a7d8 <__floatsidf+0x34>
    a838:	10bfff44 	addi	r2,r2,-3
    a83c:	10000c16 	blt	r2,zero,a870 <__floatsidf+0xcc>
    a840:	90a2983a 	sll	r17,r18,r2
    a844:	0021883a 	mov	r16,zero
    a848:	d8800217 	ldw	r2,8(sp)
    a84c:	dc400415 	stw	r17,16(sp)
    a850:	dc000315 	stw	r16,12(sp)
    a854:	1105c83a 	sub	r2,r2,r4
    a858:	d8800215 	stw	r2,8(sp)
    a85c:	003fde06 	br	a7d8 <__floatsidf+0x34>
    a860:	00a00034 	movhi	r2,32768
    a864:	20800a26 	beq	r4,r2,a890 <__floatsidf+0xec>
    a868:	0109c83a 	sub	r4,zero,r4
    a86c:	003feb06 	br	a81c <__floatsidf+0x78>
    a870:	9006d07a 	srli	r3,r18,1
    a874:	008007c4 	movi	r2,31
    a878:	1105c83a 	sub	r2,r2,r4
    a87c:	1886d83a 	srl	r3,r3,r2
    a880:	9922983a 	sll	r17,r19,r4
    a884:	9120983a 	sll	r16,r18,r4
    a888:	1c62b03a 	or	r17,r3,r17
    a88c:	003fee06 	br	a848 <__floatsidf+0xa4>
    a890:	0009883a 	mov	r4,zero
    a894:	01707834 	movhi	r5,49632
    a898:	003fd306 	br	a7e8 <__floatsidf+0x44>

0000a89c <__fixdfsi>:
    a89c:	defff804 	addi	sp,sp,-32
    a8a0:	2005883a 	mov	r2,r4
    a8a4:	2807883a 	mov	r3,r5
    a8a8:	d809883a 	mov	r4,sp
    a8ac:	d9400204 	addi	r5,sp,8
    a8b0:	d8c00115 	stw	r3,4(sp)
    a8b4:	d8800015 	stw	r2,0(sp)
    a8b8:	dfc00715 	stw	ra,28(sp)
    a8bc:	000af340 	call	af34 <__unpack_d>
    a8c0:	d8c00217 	ldw	r3,8(sp)
    a8c4:	00800084 	movi	r2,2
    a8c8:	1880051e 	bne	r3,r2,a8e0 <__fixdfsi+0x44>
    a8cc:	0007883a 	mov	r3,zero
    a8d0:	1805883a 	mov	r2,r3
    a8d4:	dfc00717 	ldw	ra,28(sp)
    a8d8:	dec00804 	addi	sp,sp,32
    a8dc:	f800283a 	ret
    a8e0:	00800044 	movi	r2,1
    a8e4:	10fff92e 	bgeu	r2,r3,a8cc <__fixdfsi+0x30>
    a8e8:	00800104 	movi	r2,4
    a8ec:	18800426 	beq	r3,r2,a900 <__fixdfsi+0x64>
    a8f0:	d8c00417 	ldw	r3,16(sp)
    a8f4:	183ff516 	blt	r3,zero,a8cc <__fixdfsi+0x30>
    a8f8:	00800784 	movi	r2,30
    a8fc:	10c0080e 	bge	r2,r3,a920 <__fixdfsi+0x84>
    a900:	d8800317 	ldw	r2,12(sp)
    a904:	1000121e 	bne	r2,zero,a950 <__fixdfsi+0xb4>
    a908:	00e00034 	movhi	r3,32768
    a90c:	18ffffc4 	addi	r3,r3,-1
    a910:	1805883a 	mov	r2,r3
    a914:	dfc00717 	ldw	ra,28(sp)
    a918:	dec00804 	addi	sp,sp,32
    a91c:	f800283a 	ret
    a920:	00800f04 	movi	r2,60
    a924:	10d1c83a 	sub	r8,r2,r3
    a928:	40bff804 	addi	r2,r8,-32
    a92c:	d9800517 	ldw	r6,20(sp)
    a930:	d9c00617 	ldw	r7,24(sp)
    a934:	10000816 	blt	r2,zero,a958 <__fixdfsi+0xbc>
    a938:	3888d83a 	srl	r4,r7,r2
    a93c:	d8800317 	ldw	r2,12(sp)
    a940:	2007883a 	mov	r3,r4
    a944:	103fe226 	beq	r2,zero,a8d0 <__fixdfsi+0x34>
    a948:	0107c83a 	sub	r3,zero,r4
    a94c:	003fe006 	br	a8d0 <__fixdfsi+0x34>
    a950:	00e00034 	movhi	r3,32768
    a954:	003fde06 	br	a8d0 <__fixdfsi+0x34>
    a958:	39c7883a 	add	r3,r7,r7
    a95c:	008007c4 	movi	r2,31
    a960:	1205c83a 	sub	r2,r2,r8
    a964:	1886983a 	sll	r3,r3,r2
    a968:	3208d83a 	srl	r4,r6,r8
    a96c:	1908b03a 	or	r4,r3,r4
    a970:	003ff206 	br	a93c <__fixdfsi+0xa0>

0000a974 <__floatunsidf>:
    a974:	defff204 	addi	sp,sp,-56
    a978:	dfc00d15 	stw	ra,52(sp)
    a97c:	ddc00c15 	stw	r23,48(sp)
    a980:	dd800b15 	stw	r22,44(sp)
    a984:	dd400a15 	stw	r21,40(sp)
    a988:	dd000915 	stw	r20,36(sp)
    a98c:	dcc00815 	stw	r19,32(sp)
    a990:	dc800715 	stw	r18,28(sp)
    a994:	dc400615 	stw	r17,24(sp)
    a998:	dc000515 	stw	r16,20(sp)
    a99c:	d8000115 	stw	zero,4(sp)
    a9a0:	20000f1e 	bne	r4,zero,a9e0 <__floatunsidf+0x6c>
    a9a4:	00800084 	movi	r2,2
    a9a8:	d8800015 	stw	r2,0(sp)
    a9ac:	d809883a 	mov	r4,sp
    a9b0:	000ac200 	call	ac20 <__pack_d>
    a9b4:	dfc00d17 	ldw	ra,52(sp)
    a9b8:	ddc00c17 	ldw	r23,48(sp)
    a9bc:	dd800b17 	ldw	r22,44(sp)
    a9c0:	dd400a17 	ldw	r21,40(sp)
    a9c4:	dd000917 	ldw	r20,36(sp)
    a9c8:	dcc00817 	ldw	r19,32(sp)
    a9cc:	dc800717 	ldw	r18,28(sp)
    a9d0:	dc400617 	ldw	r17,24(sp)
    a9d4:	dc000517 	ldw	r16,20(sp)
    a9d8:	dec00e04 	addi	sp,sp,56
    a9dc:	f800283a 	ret
    a9e0:	008000c4 	movi	r2,3
    a9e4:	00c00f04 	movi	r3,60
    a9e8:	002f883a 	mov	r23,zero
    a9ec:	202d883a 	mov	r22,r4
    a9f0:	d8800015 	stw	r2,0(sp)
    a9f4:	d8c00215 	stw	r3,8(sp)
    a9f8:	d9000315 	stw	r4,12(sp)
    a9fc:	ddc00415 	stw	r23,16(sp)
    aa00:	000aba00 	call	aba0 <__clzsi2>
    aa04:	12400744 	addi	r9,r2,29
    aa08:	48000b16 	blt	r9,zero,aa38 <__floatunsidf+0xc4>
    aa0c:	483fe726 	beq	r9,zero,a9ac <__floatunsidf+0x38>
    aa10:	10bfff44 	addi	r2,r2,-3
    aa14:	10002e16 	blt	r2,zero,aad0 <__floatunsidf+0x15c>
    aa18:	b0a2983a 	sll	r17,r22,r2
    aa1c:	0021883a 	mov	r16,zero
    aa20:	d8800217 	ldw	r2,8(sp)
    aa24:	dc400415 	stw	r17,16(sp)
    aa28:	dc000315 	stw	r16,12(sp)
    aa2c:	1245c83a 	sub	r2,r2,r9
    aa30:	d8800215 	stw	r2,8(sp)
    aa34:	003fdd06 	br	a9ac <__floatunsidf+0x38>
    aa38:	0255c83a 	sub	r10,zero,r9
    aa3c:	51bff804 	addi	r6,r10,-32
    aa40:	30001b16 	blt	r6,zero,aab0 <__floatunsidf+0x13c>
    aa44:	b9a8d83a 	srl	r20,r23,r6
    aa48:	002b883a 	mov	r21,zero
    aa4c:	000f883a 	mov	r7,zero
    aa50:	01000044 	movi	r4,1
    aa54:	0011883a 	mov	r8,zero
    aa58:	30002516 	blt	r6,zero,aaf0 <__floatunsidf+0x17c>
    aa5c:	21a6983a 	sll	r19,r4,r6
    aa60:	0025883a 	mov	r18,zero
    aa64:	00bfffc4 	movi	r2,-1
    aa68:	9089883a 	add	r4,r18,r2
    aa6c:	988b883a 	add	r5,r19,r2
    aa70:	248d803a 	cmpltu	r6,r4,r18
    aa74:	314b883a 	add	r5,r6,r5
    aa78:	b104703a 	and	r2,r22,r4
    aa7c:	b946703a 	and	r3,r23,r5
    aa80:	10c4b03a 	or	r2,r2,r3
    aa84:	10000226 	beq	r2,zero,aa90 <__floatunsidf+0x11c>
    aa88:	01c00044 	movi	r7,1
    aa8c:	0011883a 	mov	r8,zero
    aa90:	d9000217 	ldw	r4,8(sp)
    aa94:	a1c4b03a 	or	r2,r20,r7
    aa98:	aa06b03a 	or	r3,r21,r8
    aa9c:	2249c83a 	sub	r4,r4,r9
    aaa0:	d8c00415 	stw	r3,16(sp)
    aaa4:	d9000215 	stw	r4,8(sp)
    aaa8:	d8800315 	stw	r2,12(sp)
    aaac:	003fbf06 	br	a9ac <__floatunsidf+0x38>
    aab0:	bdc7883a 	add	r3,r23,r23
    aab4:	008007c4 	movi	r2,31
    aab8:	1285c83a 	sub	r2,r2,r10
    aabc:	1886983a 	sll	r3,r3,r2
    aac0:	b2a8d83a 	srl	r20,r22,r10
    aac4:	baaad83a 	srl	r21,r23,r10
    aac8:	1d28b03a 	or	r20,r3,r20
    aacc:	003fdf06 	br	aa4c <__floatunsidf+0xd8>
    aad0:	b006d07a 	srli	r3,r22,1
    aad4:	008007c4 	movi	r2,31
    aad8:	1245c83a 	sub	r2,r2,r9
    aadc:	1886d83a 	srl	r3,r3,r2
    aae0:	ba62983a 	sll	r17,r23,r9
    aae4:	b260983a 	sll	r16,r22,r9
    aae8:	1c62b03a 	or	r17,r3,r17
    aaec:	003fcc06 	br	aa20 <__floatunsidf+0xac>
    aaf0:	2006d07a 	srli	r3,r4,1
    aaf4:	008007c4 	movi	r2,31
    aaf8:	1285c83a 	sub	r2,r2,r10
    aafc:	18a6d83a 	srl	r19,r3,r2
    ab00:	22a4983a 	sll	r18,r4,r10
    ab04:	003fd706 	br	aa64 <__floatunsidf+0xf0>

0000ab08 <__muldi3>:
    ab08:	2011883a 	mov	r8,r4
    ab0c:	427fffcc 	andi	r9,r8,65535
    ab10:	4018d43a 	srli	r12,r8,16
    ab14:	32bfffcc 	andi	r10,r6,65535
    ab18:	3016d43a 	srli	r11,r6,16
    ab1c:	4a85383a 	mul	r2,r9,r10
    ab20:	6295383a 	mul	r10,r12,r10
    ab24:	4ad3383a 	mul	r9,r9,r11
    ab28:	113fffcc 	andi	r4,r2,65535
    ab2c:	1004d43a 	srli	r2,r2,16
    ab30:	4a93883a 	add	r9,r9,r10
    ab34:	3807883a 	mov	r3,r7
    ab38:	1245883a 	add	r2,r2,r9
    ab3c:	280f883a 	mov	r7,r5
    ab40:	180b883a 	mov	r5,r3
    ab44:	1006943a 	slli	r3,r2,16
    ab48:	defffd04 	addi	sp,sp,-12
    ab4c:	dc800215 	stw	r18,8(sp)
    ab50:	1907883a 	add	r3,r3,r4
    ab54:	dc400115 	stw	r17,4(sp)
    ab58:	dc000015 	stw	r16,0(sp)
    ab5c:	4165383a 	mul	r18,r8,r5
    ab60:	31e3383a 	mul	r17,r6,r7
    ab64:	1012d43a 	srli	r9,r2,16
    ab68:	62d9383a 	mul	r12,r12,r11
    ab6c:	181f883a 	mov	r15,r3
    ab70:	1280022e 	bgeu	r2,r10,ab7c <__muldi3+0x74>
    ab74:	00800074 	movhi	r2,1
    ab78:	6099883a 	add	r12,r12,r2
    ab7c:	624d883a 	add	r6,r12,r9
    ab80:	9187883a 	add	r3,r18,r6
    ab84:	88c7883a 	add	r3,r17,r3
    ab88:	7805883a 	mov	r2,r15
    ab8c:	dc800217 	ldw	r18,8(sp)
    ab90:	dc400117 	ldw	r17,4(sp)
    ab94:	dc000017 	ldw	r16,0(sp)
    ab98:	dec00304 	addi	sp,sp,12
    ab9c:	f800283a 	ret

0000aba0 <__clzsi2>:
    aba0:	00bfffd4 	movui	r2,65535
    aba4:	11000e36 	bltu	r2,r4,abe0 <__clzsi2+0x40>
    aba8:	00803fc4 	movi	r2,255
    abac:	01400204 	movi	r5,8
    abb0:	0007883a 	mov	r3,zero
    abb4:	11001036 	bltu	r2,r4,abf8 <__clzsi2+0x58>
    abb8:	000b883a 	mov	r5,zero
    abbc:	20c6d83a 	srl	r3,r4,r3
    abc0:	00800074 	movhi	r2,1
    abc4:	10bd0004 	addi	r2,r2,-3072
    abc8:	1887883a 	add	r3,r3,r2
    abcc:	18800003 	ldbu	r2,0(r3)
    abd0:	00c00804 	movi	r3,32
    abd4:	2885883a 	add	r2,r5,r2
    abd8:	1885c83a 	sub	r2,r3,r2
    abdc:	f800283a 	ret
    abe0:	01400404 	movi	r5,16
    abe4:	00804034 	movhi	r2,256
    abe8:	10bfffc4 	addi	r2,r2,-1
    abec:	2807883a 	mov	r3,r5
    abf0:	113ff22e 	bgeu	r2,r4,abbc <__clzsi2+0x1c>
    abf4:	01400604 	movi	r5,24
    abf8:	2807883a 	mov	r3,r5
    abfc:	20c6d83a 	srl	r3,r4,r3
    ac00:	00800074 	movhi	r2,1
    ac04:	10bd0004 	addi	r2,r2,-3072
    ac08:	1887883a 	add	r3,r3,r2
    ac0c:	18800003 	ldbu	r2,0(r3)
    ac10:	00c00804 	movi	r3,32
    ac14:	2885883a 	add	r2,r5,r2
    ac18:	1885c83a 	sub	r2,r3,r2
    ac1c:	f800283a 	ret

0000ac20 <__pack_d>:
    ac20:	20c00017 	ldw	r3,0(r4)
    ac24:	defffd04 	addi	sp,sp,-12
    ac28:	dc000015 	stw	r16,0(sp)
    ac2c:	dc800215 	stw	r18,8(sp)
    ac30:	dc400115 	stw	r17,4(sp)
    ac34:	00800044 	movi	r2,1
    ac38:	22000317 	ldw	r8,12(r4)
    ac3c:	001f883a 	mov	r15,zero
    ac40:	22400417 	ldw	r9,16(r4)
    ac44:	24000117 	ldw	r16,4(r4)
    ac48:	10c0552e 	bgeu	r2,r3,ada0 <__pack_d+0x180>
    ac4c:	00800104 	movi	r2,4
    ac50:	18804f26 	beq	r3,r2,ad90 <__pack_d+0x170>
    ac54:	00800084 	movi	r2,2
    ac58:	18800226 	beq	r3,r2,ac64 <__pack_d+0x44>
    ac5c:	4244b03a 	or	r2,r8,r9
    ac60:	10001a1e 	bne	r2,zero,accc <__pack_d+0xac>
    ac64:	000d883a 	mov	r6,zero
    ac68:	000f883a 	mov	r7,zero
    ac6c:	0011883a 	mov	r8,zero
    ac70:	00800434 	movhi	r2,16
    ac74:	10bfffc4 	addi	r2,r2,-1
    ac78:	301d883a 	mov	r14,r6
    ac7c:	3884703a 	and	r2,r7,r2
    ac80:	400a953a 	slli	r5,r8,20
    ac84:	79bffc2c 	andhi	r6,r15,65520
    ac88:	308cb03a 	or	r6,r6,r2
    ac8c:	00e00434 	movhi	r3,32784
    ac90:	18ffffc4 	addi	r3,r3,-1
    ac94:	800497fa 	slli	r2,r16,31
    ac98:	30c6703a 	and	r3,r6,r3
    ac9c:	1946b03a 	or	r3,r3,r5
    aca0:	01600034 	movhi	r5,32768
    aca4:	297fffc4 	addi	r5,r5,-1
    aca8:	194a703a 	and	r5,r3,r5
    acac:	288ab03a 	or	r5,r5,r2
    acb0:	2807883a 	mov	r3,r5
    acb4:	7005883a 	mov	r2,r14
    acb8:	dc800217 	ldw	r18,8(sp)
    acbc:	dc400117 	ldw	r17,4(sp)
    acc0:	dc000017 	ldw	r16,0(sp)
    acc4:	dec00304 	addi	sp,sp,12
    acc8:	f800283a 	ret
    accc:	21000217 	ldw	r4,8(r4)
    acd0:	00bf0084 	movi	r2,-1022
    acd4:	20803f16 	blt	r4,r2,add4 <__pack_d+0x1b4>
    acd8:	0080ffc4 	movi	r2,1023
    acdc:	11002c16 	blt	r2,r4,ad90 <__pack_d+0x170>
    ace0:	00803fc4 	movi	r2,255
    ace4:	408c703a 	and	r6,r8,r2
    ace8:	00802004 	movi	r2,128
    acec:	0007883a 	mov	r3,zero
    acf0:	000f883a 	mov	r7,zero
    acf4:	2280ffc4 	addi	r10,r4,1023
    acf8:	30801e26 	beq	r6,r2,ad74 <__pack_d+0x154>
    acfc:	00801fc4 	movi	r2,127
    ad00:	4089883a 	add	r4,r8,r2
    ad04:	220d803a 	cmpltu	r6,r4,r8
    ad08:	324d883a 	add	r6,r6,r9
    ad0c:	2011883a 	mov	r8,r4
    ad10:	3013883a 	mov	r9,r6
    ad14:	00880034 	movhi	r2,8192
    ad18:	10bfffc4 	addi	r2,r2,-1
    ad1c:	12400d36 	bltu	r2,r9,ad54 <__pack_d+0x134>
    ad20:	4804963a 	slli	r2,r9,24
    ad24:	400cd23a 	srli	r6,r8,8
    ad28:	480ed23a 	srli	r7,r9,8
    ad2c:	013fffc4 	movi	r4,-1
    ad30:	118cb03a 	or	r6,r2,r6
    ad34:	01400434 	movhi	r5,16
    ad38:	297fffc4 	addi	r5,r5,-1
    ad3c:	3104703a 	and	r2,r6,r4
    ad40:	3946703a 	and	r3,r7,r5
    ad44:	5201ffcc 	andi	r8,r10,2047
    ad48:	100d883a 	mov	r6,r2
    ad4c:	180f883a 	mov	r7,r3
    ad50:	003fc706 	br	ac70 <__pack_d+0x50>
    ad54:	480897fa 	slli	r4,r9,31
    ad58:	4004d07a 	srli	r2,r8,1
    ad5c:	4806d07a 	srli	r3,r9,1
    ad60:	52800044 	addi	r10,r10,1
    ad64:	2084b03a 	or	r2,r4,r2
    ad68:	1011883a 	mov	r8,r2
    ad6c:	1813883a 	mov	r9,r3
    ad70:	003feb06 	br	ad20 <__pack_d+0x100>
    ad74:	383fe11e 	bne	r7,zero,acfc <__pack_d+0xdc>
    ad78:	01004004 	movi	r4,256
    ad7c:	4104703a 	and	r2,r8,r4
    ad80:	10c4b03a 	or	r2,r2,r3
    ad84:	103fe326 	beq	r2,zero,ad14 <__pack_d+0xf4>
    ad88:	3005883a 	mov	r2,r6
    ad8c:	003fdc06 	br	ad00 <__pack_d+0xe0>
    ad90:	000d883a 	mov	r6,zero
    ad94:	000f883a 	mov	r7,zero
    ad98:	0201ffc4 	movi	r8,2047
    ad9c:	003fb406 	br	ac70 <__pack_d+0x50>
    ada0:	0005883a 	mov	r2,zero
    ada4:	00c00234 	movhi	r3,8
    ada8:	408cb03a 	or	r6,r8,r2
    adac:	48ceb03a 	or	r7,r9,r3
    adb0:	013fffc4 	movi	r4,-1
    adb4:	01400434 	movhi	r5,16
    adb8:	297fffc4 	addi	r5,r5,-1
    adbc:	3104703a 	and	r2,r6,r4
    adc0:	3946703a 	and	r3,r7,r5
    adc4:	100d883a 	mov	r6,r2
    adc8:	180f883a 	mov	r7,r3
    adcc:	0201ffc4 	movi	r8,2047
    add0:	003fa706 	br	ac70 <__pack_d+0x50>
    add4:	1109c83a 	sub	r4,r2,r4
    add8:	00800e04 	movi	r2,56
    addc:	11004316 	blt	r2,r4,aeec <__pack_d+0x2cc>
    ade0:	21fff804 	addi	r7,r4,-32
    ade4:	38004516 	blt	r7,zero,aefc <__pack_d+0x2dc>
    ade8:	49d8d83a 	srl	r12,r9,r7
    adec:	001b883a 	mov	r13,zero
    adf0:	0023883a 	mov	r17,zero
    adf4:	01400044 	movi	r5,1
    adf8:	0025883a 	mov	r18,zero
    adfc:	38004716 	blt	r7,zero,af1c <__pack_d+0x2fc>
    ae00:	29d6983a 	sll	r11,r5,r7
    ae04:	0015883a 	mov	r10,zero
    ae08:	00bfffc4 	movi	r2,-1
    ae0c:	5089883a 	add	r4,r10,r2
    ae10:	588b883a 	add	r5,r11,r2
    ae14:	228d803a 	cmpltu	r6,r4,r10
    ae18:	314b883a 	add	r5,r6,r5
    ae1c:	4104703a 	and	r2,r8,r4
    ae20:	4946703a 	and	r3,r9,r5
    ae24:	10c4b03a 	or	r2,r2,r3
    ae28:	10000226 	beq	r2,zero,ae34 <__pack_d+0x214>
    ae2c:	04400044 	movi	r17,1
    ae30:	0025883a 	mov	r18,zero
    ae34:	00803fc4 	movi	r2,255
    ae38:	644eb03a 	or	r7,r12,r17
    ae3c:	3892703a 	and	r9,r7,r2
    ae40:	00802004 	movi	r2,128
    ae44:	6c90b03a 	or	r8,r13,r18
    ae48:	0015883a 	mov	r10,zero
    ae4c:	48801626 	beq	r9,r2,aea8 <__pack_d+0x288>
    ae50:	01001fc4 	movi	r4,127
    ae54:	3905883a 	add	r2,r7,r4
    ae58:	11cd803a 	cmpltu	r6,r2,r7
    ae5c:	320d883a 	add	r6,r6,r8
    ae60:	100f883a 	mov	r7,r2
    ae64:	00840034 	movhi	r2,4096
    ae68:	10bfffc4 	addi	r2,r2,-1
    ae6c:	3011883a 	mov	r8,r6
    ae70:	0007883a 	mov	r3,zero
    ae74:	11801b36 	bltu	r2,r6,aee4 <__pack_d+0x2c4>
    ae78:	4004963a 	slli	r2,r8,24
    ae7c:	3808d23a 	srli	r4,r7,8
    ae80:	400ad23a 	srli	r5,r8,8
    ae84:	1813883a 	mov	r9,r3
    ae88:	1108b03a 	or	r4,r2,r4
    ae8c:	00bfffc4 	movi	r2,-1
    ae90:	00c00434 	movhi	r3,16
    ae94:	18ffffc4 	addi	r3,r3,-1
    ae98:	208c703a 	and	r6,r4,r2
    ae9c:	28ce703a 	and	r7,r5,r3
    aea0:	4a01ffcc 	andi	r8,r9,2047
    aea4:	003f7206 	br	ac70 <__pack_d+0x50>
    aea8:	503fe91e 	bne	r10,zero,ae50 <__pack_d+0x230>
    aeac:	01004004 	movi	r4,256
    aeb0:	3904703a 	and	r2,r7,r4
    aeb4:	0007883a 	mov	r3,zero
    aeb8:	10c4b03a 	or	r2,r2,r3
    aebc:	10000626 	beq	r2,zero,aed8 <__pack_d+0x2b8>
    aec0:	3a45883a 	add	r2,r7,r9
    aec4:	11cd803a 	cmpltu	r6,r2,r7
    aec8:	320d883a 	add	r6,r6,r8
    aecc:	100f883a 	mov	r7,r2
    aed0:	3011883a 	mov	r8,r6
    aed4:	0007883a 	mov	r3,zero
    aed8:	00840034 	movhi	r2,4096
    aedc:	10bfffc4 	addi	r2,r2,-1
    aee0:	123fe52e 	bgeu	r2,r8,ae78 <__pack_d+0x258>
    aee4:	00c00044 	movi	r3,1
    aee8:	003fe306 	br	ae78 <__pack_d+0x258>
    aeec:	0009883a 	mov	r4,zero
    aef0:	0013883a 	mov	r9,zero
    aef4:	000b883a 	mov	r5,zero
    aef8:	003fe406 	br	ae8c <__pack_d+0x26c>
    aefc:	4a47883a 	add	r3,r9,r9
    af00:	008007c4 	movi	r2,31
    af04:	1105c83a 	sub	r2,r2,r4
    af08:	1886983a 	sll	r3,r3,r2
    af0c:	4118d83a 	srl	r12,r8,r4
    af10:	491ad83a 	srl	r13,r9,r4
    af14:	1b18b03a 	or	r12,r3,r12
    af18:	003fb506 	br	adf0 <__pack_d+0x1d0>
    af1c:	2806d07a 	srli	r3,r5,1
    af20:	008007c4 	movi	r2,31
    af24:	1105c83a 	sub	r2,r2,r4
    af28:	1896d83a 	srl	r11,r3,r2
    af2c:	2914983a 	sll	r10,r5,r4
    af30:	003fb506 	br	ae08 <__pack_d+0x1e8>

0000af34 <__unpack_d>:
    af34:	20c00117 	ldw	r3,4(r4)
    af38:	22400017 	ldw	r9,0(r4)
    af3c:	00800434 	movhi	r2,16
    af40:	10bfffc4 	addi	r2,r2,-1
    af44:	1808d53a 	srli	r4,r3,20
    af48:	180cd7fa 	srli	r6,r3,31
    af4c:	1894703a 	and	r10,r3,r2
    af50:	2201ffcc 	andi	r8,r4,2047
    af54:	281b883a 	mov	r13,r5
    af58:	4817883a 	mov	r11,r9
    af5c:	29800115 	stw	r6,4(r5)
    af60:	5019883a 	mov	r12,r10
    af64:	40001e1e 	bne	r8,zero,afe0 <__unpack_d+0xac>
    af68:	4a84b03a 	or	r2,r9,r10
    af6c:	10001926 	beq	r2,zero,afd4 <__unpack_d+0xa0>
    af70:	4804d63a 	srli	r2,r9,24
    af74:	500c923a 	slli	r6,r10,8
    af78:	013f0084 	movi	r4,-1022
    af7c:	00c40034 	movhi	r3,4096
    af80:	18ffffc4 	addi	r3,r3,-1
    af84:	118cb03a 	or	r6,r2,r6
    af88:	008000c4 	movi	r2,3
    af8c:	480a923a 	slli	r5,r9,8
    af90:	68800015 	stw	r2,0(r13)
    af94:	69000215 	stw	r4,8(r13)
    af98:	19800b36 	bltu	r3,r6,afc8 <__unpack_d+0x94>
    af9c:	200f883a 	mov	r7,r4
    afa0:	1811883a 	mov	r8,r3
    afa4:	2945883a 	add	r2,r5,r5
    afa8:	1149803a 	cmpltu	r4,r2,r5
    afac:	3187883a 	add	r3,r6,r6
    afb0:	20c9883a 	add	r4,r4,r3
    afb4:	100b883a 	mov	r5,r2
    afb8:	200d883a 	mov	r6,r4
    afbc:	39ffffc4 	addi	r7,r7,-1
    afc0:	413ff82e 	bgeu	r8,r4,afa4 <__unpack_d+0x70>
    afc4:	69c00215 	stw	r7,8(r13)
    afc8:	69800415 	stw	r6,16(r13)
    afcc:	69400315 	stw	r5,12(r13)
    afd0:	f800283a 	ret
    afd4:	00800084 	movi	r2,2
    afd8:	28800015 	stw	r2,0(r5)
    afdc:	f800283a 	ret
    afe0:	0081ffc4 	movi	r2,2047
    afe4:	40800f26 	beq	r8,r2,b024 <__unpack_d+0xf0>
    afe8:	480cd63a 	srli	r6,r9,24
    afec:	5006923a 	slli	r3,r10,8
    aff0:	4804923a 	slli	r2,r9,8
    aff4:	0009883a 	mov	r4,zero
    aff8:	30c6b03a 	or	r3,r6,r3
    affc:	01440034 	movhi	r5,4096
    b000:	110cb03a 	or	r6,r2,r4
    b004:	423f0044 	addi	r8,r8,-1023
    b008:	194eb03a 	or	r7,r3,r5
    b00c:	008000c4 	movi	r2,3
    b010:	69c00415 	stw	r7,16(r13)
    b014:	6a000215 	stw	r8,8(r13)
    b018:	68800015 	stw	r2,0(r13)
    b01c:	69800315 	stw	r6,12(r13)
    b020:	f800283a 	ret
    b024:	4a84b03a 	or	r2,r9,r10
    b028:	1000031e 	bne	r2,zero,b038 <__unpack_d+0x104>
    b02c:	00800104 	movi	r2,4
    b030:	28800015 	stw	r2,0(r5)
    b034:	f800283a 	ret
    b038:	0009883a 	mov	r4,zero
    b03c:	01400234 	movhi	r5,8
    b040:	4904703a 	and	r2,r9,r4
    b044:	5146703a 	and	r3,r10,r5
    b048:	10c4b03a 	or	r2,r2,r3
    b04c:	10000526 	beq	r2,zero,b064 <__unpack_d+0x130>
    b050:	00800044 	movi	r2,1
    b054:	68800015 	stw	r2,0(r13)
    b058:	6b000415 	stw	r12,16(r13)
    b05c:	6ac00315 	stw	r11,12(r13)
    b060:	f800283a 	ret
    b064:	68000015 	stw	zero,0(r13)
    b068:	003ffb06 	br	b058 <__unpack_d+0x124>

0000b06c <__fpcmp_parts_d>:
    b06c:	21800017 	ldw	r6,0(r4)
    b070:	00c00044 	movi	r3,1
    b074:	19800a2e 	bgeu	r3,r6,b0a0 <__fpcmp_parts_d+0x34>
    b078:	28800017 	ldw	r2,0(r5)
    b07c:	1880082e 	bgeu	r3,r2,b0a0 <__fpcmp_parts_d+0x34>
    b080:	00c00104 	movi	r3,4
    b084:	30c02626 	beq	r6,r3,b120 <__fpcmp_parts_d+0xb4>
    b088:	10c02226 	beq	r2,r3,b114 <__fpcmp_parts_d+0xa8>
    b08c:	00c00084 	movi	r3,2
    b090:	30c00526 	beq	r6,r3,b0a8 <__fpcmp_parts_d+0x3c>
    b094:	10c0071e 	bne	r2,r3,b0b4 <__fpcmp_parts_d+0x48>
    b098:	20800117 	ldw	r2,4(r4)
    b09c:	1000091e 	bne	r2,zero,b0c4 <__fpcmp_parts_d+0x58>
    b0a0:	00800044 	movi	r2,1
    b0a4:	f800283a 	ret
    b0a8:	10c01a1e 	bne	r2,r3,b114 <__fpcmp_parts_d+0xa8>
    b0ac:	0005883a 	mov	r2,zero
    b0b0:	f800283a 	ret
    b0b4:	22000117 	ldw	r8,4(r4)
    b0b8:	28800117 	ldw	r2,4(r5)
    b0bc:	40800326 	beq	r8,r2,b0cc <__fpcmp_parts_d+0x60>
    b0c0:	403ff726 	beq	r8,zero,b0a0 <__fpcmp_parts_d+0x34>
    b0c4:	00bfffc4 	movi	r2,-1
    b0c8:	f800283a 	ret
    b0cc:	20c00217 	ldw	r3,8(r4)
    b0d0:	28800217 	ldw	r2,8(r5)
    b0d4:	10fffa16 	blt	r2,r3,b0c0 <__fpcmp_parts_d+0x54>
    b0d8:	18800916 	blt	r3,r2,b100 <__fpcmp_parts_d+0x94>
    b0dc:	21c00417 	ldw	r7,16(r4)
    b0e0:	28c00417 	ldw	r3,16(r5)
    b0e4:	21800317 	ldw	r6,12(r4)
    b0e8:	28800317 	ldw	r2,12(r5)
    b0ec:	19fff436 	bltu	r3,r7,b0c0 <__fpcmp_parts_d+0x54>
    b0f0:	38c00526 	beq	r7,r3,b108 <__fpcmp_parts_d+0x9c>
    b0f4:	38c00236 	bltu	r7,r3,b100 <__fpcmp_parts_d+0x94>
    b0f8:	19ffec1e 	bne	r3,r7,b0ac <__fpcmp_parts_d+0x40>
    b0fc:	30bfeb2e 	bgeu	r6,r2,b0ac <__fpcmp_parts_d+0x40>
    b100:	403fe71e 	bne	r8,zero,b0a0 <__fpcmp_parts_d+0x34>
    b104:	003fef06 	br	b0c4 <__fpcmp_parts_d+0x58>
    b108:	11bffa2e 	bgeu	r2,r6,b0f4 <__fpcmp_parts_d+0x88>
    b10c:	403fe426 	beq	r8,zero,b0a0 <__fpcmp_parts_d+0x34>
    b110:	003fec06 	br	b0c4 <__fpcmp_parts_d+0x58>
    b114:	28800117 	ldw	r2,4(r5)
    b118:	103fe11e 	bne	r2,zero,b0a0 <__fpcmp_parts_d+0x34>
    b11c:	003fe906 	br	b0c4 <__fpcmp_parts_d+0x58>
    b120:	11bfdd1e 	bne	r2,r6,b098 <__fpcmp_parts_d+0x2c>
    b124:	28c00117 	ldw	r3,4(r5)
    b128:	20800117 	ldw	r2,4(r4)
    b12c:	1885c83a 	sub	r2,r3,r2
    b130:	f800283a 	ret

0000b134 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
    b134:	defff804 	addi	sp,sp,-32
    b138:	dfc00715 	stw	ra,28(sp)
    b13c:	df000615 	stw	fp,24(sp)
    b140:	df000604 	addi	fp,sp,24
    b144:	e13ffc15 	stw	r4,-16(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
    b148:	e0bffc17 	ldw	r2,-16(fp)
    b14c:	1004803a 	cmplt	r2,r2,zero
    b150:	1000081e 	bne	r2,zero,b174 <close+0x40>
    b154:	e0bffc17 	ldw	r2,-16(fp)
    b158:	10800324 	muli	r2,r2,12
    b15c:	1007883a 	mov	r3,r2
    b160:	00800074 	movhi	r2,1
    b164:	10806b04 	addi	r2,r2,428
    b168:	1887883a 	add	r3,r3,r2
    b16c:	e0ffff15 	stw	r3,-4(fp)
    b170:	00000106 	br	b178 <close+0x44>
    b174:	e03fff15 	stw	zero,-4(fp)
    b178:	e0bfff17 	ldw	r2,-4(fp)
    b17c:	e0bffb15 	stw	r2,-20(fp)

  if (fd)
    b180:	e0bffb17 	ldw	r2,-20(fp)
    b184:	1005003a 	cmpeq	r2,r2,zero
    b188:	10001d1e 	bne	r2,zero,b200 <close+0xcc>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
    b18c:	e0bffb17 	ldw	r2,-20(fp)
    b190:	10800017 	ldw	r2,0(r2)
    b194:	10800417 	ldw	r2,16(r2)
    b198:	1005003a 	cmpeq	r2,r2,zero
    b19c:	1000071e 	bne	r2,zero,b1bc <close+0x88>
    b1a0:	e0bffb17 	ldw	r2,-20(fp)
    b1a4:	10800017 	ldw	r2,0(r2)
    b1a8:	10800417 	ldw	r2,16(r2)
    b1ac:	e13ffb17 	ldw	r4,-20(fp)
    b1b0:	103ee83a 	callr	r2
    b1b4:	e0bffe15 	stw	r2,-8(fp)
    b1b8:	00000106 	br	b1c0 <close+0x8c>
    b1bc:	e03ffe15 	stw	zero,-8(fp)
    b1c0:	e0bffe17 	ldw	r2,-8(fp)
    b1c4:	e0bffa15 	stw	r2,-24(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
    b1c8:	e13ffc17 	ldw	r4,-16(fp)
    b1cc:	000b9780 	call	b978 <alt_release_fd>
    if (rval < 0)
    b1d0:	e0bffa17 	ldw	r2,-24(fp)
    b1d4:	1004403a 	cmpge	r2,r2,zero
    b1d8:	1000071e 	bne	r2,zero,b1f8 <close+0xc4>
    {
      ALT_ERRNO = -rval;
    b1dc:	000b2300 	call	b230 <alt_get_errno>
    b1e0:	e0fffa17 	ldw	r3,-24(fp)
    b1e4:	00c7c83a 	sub	r3,zero,r3
    b1e8:	10c00015 	stw	r3,0(r2)
      return -1;
    b1ec:	00bfffc4 	movi	r2,-1
    b1f0:	e0bffd15 	stw	r2,-12(fp)
    b1f4:	00000806 	br	b218 <close+0xe4>
    }
    return 0;
    b1f8:	e03ffd15 	stw	zero,-12(fp)
    b1fc:	00000606 	br	b218 <close+0xe4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
    b200:	000b2300 	call	b230 <alt_get_errno>
    b204:	1007883a 	mov	r3,r2
    b208:	00801444 	movi	r2,81
    b20c:	18800015 	stw	r2,0(r3)
    return -1;
    b210:	00bfffc4 	movi	r2,-1
    b214:	e0bffd15 	stw	r2,-12(fp)
    b218:	e0bffd17 	ldw	r2,-12(fp)
  }
}
    b21c:	e037883a 	mov	sp,fp
    b220:	dfc00117 	ldw	ra,4(sp)
    b224:	df000017 	ldw	fp,0(sp)
    b228:	dec00204 	addi	sp,sp,8
    b22c:	f800283a 	ret

0000b230 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    b230:	defffd04 	addi	sp,sp,-12
    b234:	dfc00215 	stw	ra,8(sp)
    b238:	df000115 	stw	fp,4(sp)
    b23c:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
    b240:	00800074 	movhi	r2,1
    b244:	10853604 	addi	r2,r2,5336
    b248:	10800017 	ldw	r2,0(r2)
    b24c:	1005003a 	cmpeq	r2,r2,zero
    b250:	1000061e 	bne	r2,zero,b26c <alt_get_errno+0x3c>
    b254:	00800074 	movhi	r2,1
    b258:	10853604 	addi	r2,r2,5336
    b25c:	10800017 	ldw	r2,0(r2)
    b260:	103ee83a 	callr	r2
    b264:	e0bfff15 	stw	r2,-4(fp)
    b268:	00000306 	br	b278 <alt_get_errno+0x48>
    b26c:	00800074 	movhi	r2,1
    b270:	108c8c04 	addi	r2,r2,12848
    b274:	e0bfff15 	stw	r2,-4(fp)
    b278:	e0bfff17 	ldw	r2,-4(fp)
}
    b27c:	e037883a 	mov	sp,fp
    b280:	dfc00117 	ldw	ra,4(sp)
    b284:	df000017 	ldw	fp,0(sp)
    b288:	dec00204 	addi	sp,sp,8
    b28c:	f800283a 	ret

0000b290 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
    b290:	defffc04 	addi	sp,sp,-16
    b294:	df000315 	stw	fp,12(sp)
    b298:	df000304 	addi	fp,sp,12
    b29c:	e13ffd15 	stw	r4,-12(fp)
    b2a0:	e17ffe15 	stw	r5,-8(fp)
    b2a4:	e1bfff15 	stw	r6,-4(fp)
  return len;
    b2a8:	e0bfff17 	ldw	r2,-4(fp)
}
    b2ac:	e037883a 	mov	sp,fp
    b2b0:	df000017 	ldw	fp,0(sp)
    b2b4:	dec00104 	addi	sp,sp,4
    b2b8:	f800283a 	ret

0000b2bc <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
    b2bc:	defff904 	addi	sp,sp,-28
    b2c0:	dfc00615 	stw	ra,24(sp)
    b2c4:	df000515 	stw	fp,20(sp)
    b2c8:	df000504 	addi	fp,sp,20
    b2cc:	e13ffc15 	stw	r4,-16(fp)
    b2d0:	e17ffd15 	stw	r5,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    b2d4:	e0bffc17 	ldw	r2,-16(fp)
    b2d8:	1004803a 	cmplt	r2,r2,zero
    b2dc:	1000081e 	bne	r2,zero,b300 <fstat+0x44>
    b2e0:	e0bffc17 	ldw	r2,-16(fp)
    b2e4:	10800324 	muli	r2,r2,12
    b2e8:	1007883a 	mov	r3,r2
    b2ec:	00800074 	movhi	r2,1
    b2f0:	10806b04 	addi	r2,r2,428
    b2f4:	1887883a 	add	r3,r3,r2
    b2f8:	e0ffff15 	stw	r3,-4(fp)
    b2fc:	00000106 	br	b304 <fstat+0x48>
    b300:	e03fff15 	stw	zero,-4(fp)
    b304:	e0bfff17 	ldw	r2,-4(fp)
    b308:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
    b30c:	e0bffb17 	ldw	r2,-20(fp)
    b310:	1005003a 	cmpeq	r2,r2,zero
    b314:	1000121e 	bne	r2,zero,b360 <fstat+0xa4>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
    b318:	e0bffb17 	ldw	r2,-20(fp)
    b31c:	10800017 	ldw	r2,0(r2)
    b320:	10800817 	ldw	r2,32(r2)
    b324:	1005003a 	cmpeq	r2,r2,zero
    b328:	1000081e 	bne	r2,zero,b34c <fstat+0x90>
    {
      return fd->dev->fstat(fd, st);
    b32c:	e0bffb17 	ldw	r2,-20(fp)
    b330:	10800017 	ldw	r2,0(r2)
    b334:	10800817 	ldw	r2,32(r2)
    b338:	e13ffb17 	ldw	r4,-20(fp)
    b33c:	e17ffd17 	ldw	r5,-12(fp)
    b340:	103ee83a 	callr	r2
    b344:	e0bffe15 	stw	r2,-8(fp)
    b348:	00000b06 	br	b378 <fstat+0xbc>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
    b34c:	e0fffd17 	ldw	r3,-12(fp)
    b350:	00880004 	movi	r2,8192
    b354:	18800115 	stw	r2,4(r3)
      return 0;
    b358:	e03ffe15 	stw	zero,-8(fp)
    b35c:	00000606 	br	b378 <fstat+0xbc>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
    b360:	000b3900 	call	b390 <alt_get_errno>
    b364:	1007883a 	mov	r3,r2
    b368:	00801444 	movi	r2,81
    b36c:	18800015 	stw	r2,0(r3)
    return -1;
    b370:	00bfffc4 	movi	r2,-1
    b374:	e0bffe15 	stw	r2,-8(fp)
    b378:	e0bffe17 	ldw	r2,-8(fp)
  }
}
    b37c:	e037883a 	mov	sp,fp
    b380:	dfc00117 	ldw	ra,4(sp)
    b384:	df000017 	ldw	fp,0(sp)
    b388:	dec00204 	addi	sp,sp,8
    b38c:	f800283a 	ret

0000b390 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    b390:	defffd04 	addi	sp,sp,-12
    b394:	dfc00215 	stw	ra,8(sp)
    b398:	df000115 	stw	fp,4(sp)
    b39c:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
    b3a0:	00800074 	movhi	r2,1
    b3a4:	10853604 	addi	r2,r2,5336
    b3a8:	10800017 	ldw	r2,0(r2)
    b3ac:	1005003a 	cmpeq	r2,r2,zero
    b3b0:	1000061e 	bne	r2,zero,b3cc <alt_get_errno+0x3c>
    b3b4:	00800074 	movhi	r2,1
    b3b8:	10853604 	addi	r2,r2,5336
    b3bc:	10800017 	ldw	r2,0(r2)
    b3c0:	103ee83a 	callr	r2
    b3c4:	e0bfff15 	stw	r2,-4(fp)
    b3c8:	00000306 	br	b3d8 <alt_get_errno+0x48>
    b3cc:	00800074 	movhi	r2,1
    b3d0:	108c8c04 	addi	r2,r2,12848
    b3d4:	e0bfff15 	stw	r2,-4(fp)
    b3d8:	e0bfff17 	ldw	r2,-4(fp)
}
    b3dc:	e037883a 	mov	sp,fp
    b3e0:	dfc00117 	ldw	ra,4(sp)
    b3e4:	df000017 	ldw	fp,0(sp)
    b3e8:	dec00204 	addi	sp,sp,8
    b3ec:	f800283a 	ret

0000b3f0 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
    b3f0:	deffeb04 	addi	sp,sp,-84
    b3f4:	dfc01415 	stw	ra,80(sp)
    b3f8:	df001315 	stw	fp,76(sp)
    b3fc:	df001304 	addi	fp,sp,76
    b400:	e13ffd15 	stw	r4,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    b404:	e0bffd17 	ldw	r2,-12(fp)
    b408:	1004803a 	cmplt	r2,r2,zero
    b40c:	1000081e 	bne	r2,zero,b430 <isatty+0x40>
    b410:	e0bffd17 	ldw	r2,-12(fp)
    b414:	10800324 	muli	r2,r2,12
    b418:	1007883a 	mov	r3,r2
    b41c:	00800074 	movhi	r2,1
    b420:	10806b04 	addi	r2,r2,428
    b424:	1887883a 	add	r3,r3,r2
    b428:	e0ffff15 	stw	r3,-4(fp)
    b42c:	00000106 	br	b434 <isatty+0x44>
    b430:	e03fff15 	stw	zero,-4(fp)
    b434:	e0bfff17 	ldw	r2,-4(fp)
    b438:	e0bfed15 	stw	r2,-76(fp)
  
  if (fd)
    b43c:	e0bfed17 	ldw	r2,-76(fp)
    b440:	1005003a 	cmpeq	r2,r2,zero
    b444:	10000f1e 	bne	r2,zero,b484 <isatty+0x94>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
    b448:	e0bfed17 	ldw	r2,-76(fp)
    b44c:	10800017 	ldw	r2,0(r2)
    b450:	10800817 	ldw	r2,32(r2)
    b454:	1004c03a 	cmpne	r2,r2,zero
    b458:	1000031e 	bne	r2,zero,b468 <isatty+0x78>
    {
      return 1;
    b45c:	00800044 	movi	r2,1
    b460:	e0bffe15 	stw	r2,-8(fp)
    b464:	00000c06 	br	b498 <isatty+0xa8>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
    b468:	e17fee04 	addi	r5,fp,-72
    b46c:	e13ffd17 	ldw	r4,-12(fp)
    b470:	000b2bc0 	call	b2bc <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
    b474:	e0bfef17 	ldw	r2,-68(fp)
    b478:	10880020 	cmpeqi	r2,r2,8192
    b47c:	e0bffe15 	stw	r2,-8(fp)
    b480:	00000506 	br	b498 <isatty+0xa8>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
    b484:	000b4b00 	call	b4b0 <alt_get_errno>
    b488:	1007883a 	mov	r3,r2
    b48c:	00801444 	movi	r2,81
    b490:	18800015 	stw	r2,0(r3)
    return 0;
    b494:	e03ffe15 	stw	zero,-8(fp)
    b498:	e0bffe17 	ldw	r2,-8(fp)
  }
}
    b49c:	e037883a 	mov	sp,fp
    b4a0:	dfc00117 	ldw	ra,4(sp)
    b4a4:	df000017 	ldw	fp,0(sp)
    b4a8:	dec00204 	addi	sp,sp,8
    b4ac:	f800283a 	ret

0000b4b0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    b4b0:	defffd04 	addi	sp,sp,-12
    b4b4:	dfc00215 	stw	ra,8(sp)
    b4b8:	df000115 	stw	fp,4(sp)
    b4bc:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
    b4c0:	00800074 	movhi	r2,1
    b4c4:	10853604 	addi	r2,r2,5336
    b4c8:	10800017 	ldw	r2,0(r2)
    b4cc:	1005003a 	cmpeq	r2,r2,zero
    b4d0:	1000061e 	bne	r2,zero,b4ec <alt_get_errno+0x3c>
    b4d4:	00800074 	movhi	r2,1
    b4d8:	10853604 	addi	r2,r2,5336
    b4dc:	10800017 	ldw	r2,0(r2)
    b4e0:	103ee83a 	callr	r2
    b4e4:	e0bfff15 	stw	r2,-4(fp)
    b4e8:	00000306 	br	b4f8 <alt_get_errno+0x48>
    b4ec:	00800074 	movhi	r2,1
    b4f0:	108c8c04 	addi	r2,r2,12848
    b4f4:	e0bfff15 	stw	r2,-4(fp)
    b4f8:	e0bfff17 	ldw	r2,-4(fp)
}
    b4fc:	e037883a 	mov	sp,fp
    b500:	dfc00117 	ldw	ra,4(sp)
    b504:	df000017 	ldw	fp,0(sp)
    b508:	dec00204 	addi	sp,sp,8
    b50c:	f800283a 	ret

0000b510 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
    b510:	defffe04 	addi	sp,sp,-8
    b514:	dfc00115 	stw	ra,4(sp)
    b518:	df000015 	stw	fp,0(sp)
    b51c:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
    b520:	01000074 	movhi	r4,1
    b524:	21053d04 	addi	r4,r4,5364
    b528:	01400074 	movhi	r5,1
    b52c:	297df304 	addi	r5,r5,-2100
    b530:	01800074 	movhi	r6,1
    b534:	31853d04 	addi	r6,r6,5364
    b538:	000b5900 	call	b590 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
    b53c:	01000034 	movhi	r4,0
    b540:	21000804 	addi	r4,r4,32
    b544:	01400034 	movhi	r5,0
    b548:	29400804 	addi	r5,r5,32
    b54c:	01800034 	movhi	r6,0
    b550:	31806d04 	addi	r6,r6,436
    b554:	000b5900 	call	b590 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
    b558:	01000074 	movhi	r4,1
    b55c:	213b1b04 	addi	r4,r4,-5012
    b560:	01400074 	movhi	r5,1
    b564:	297b1b04 	addi	r5,r5,-5012
    b568:	01800074 	movhi	r6,1
    b56c:	31bdf304 	addi	r6,r6,-2100
    b570:	000b5900 	call	b590 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
    b574:	000dc500 	call	dc50 <alt_dcache_flush_all>
  alt_icache_flush_all();
    b578:	000de480 	call	de48 <alt_icache_flush_all>
}
    b57c:	e037883a 	mov	sp,fp
    b580:	dfc00117 	ldw	ra,4(sp)
    b584:	df000017 	ldw	fp,0(sp)
    b588:	dec00204 	addi	sp,sp,8
    b58c:	f800283a 	ret

0000b590 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
    b590:	defffc04 	addi	sp,sp,-16
    b594:	df000315 	stw	fp,12(sp)
    b598:	df000304 	addi	fp,sp,12
    b59c:	e13ffd15 	stw	r4,-12(fp)
    b5a0:	e17ffe15 	stw	r5,-8(fp)
    b5a4:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
    b5a8:	e0fffe17 	ldw	r3,-8(fp)
    b5ac:	e0bffd17 	ldw	r2,-12(fp)
    b5b0:	18800e26 	beq	r3,r2,b5ec <alt_load_section+0x5c>
  {
    while( to != end )
    b5b4:	00000a06 	br	b5e0 <alt_load_section+0x50>
    {
      *to++ = *from++;
    b5b8:	e0bffd17 	ldw	r2,-12(fp)
    b5bc:	10c00017 	ldw	r3,0(r2)
    b5c0:	e0bffe17 	ldw	r2,-8(fp)
    b5c4:	10c00015 	stw	r3,0(r2)
    b5c8:	e0bffe17 	ldw	r2,-8(fp)
    b5cc:	10800104 	addi	r2,r2,4
    b5d0:	e0bffe15 	stw	r2,-8(fp)
    b5d4:	e0bffd17 	ldw	r2,-12(fp)
    b5d8:	10800104 	addi	r2,r2,4
    b5dc:	e0bffd15 	stw	r2,-12(fp)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
    b5e0:	e0fffe17 	ldw	r3,-8(fp)
    b5e4:	e0bfff17 	ldw	r2,-4(fp)
    b5e8:	18bff31e 	bne	r3,r2,b5b8 <alt_load_section+0x28>
    {
      *to++ = *from++;
    }
  }
}
    b5ec:	e037883a 	mov	sp,fp
    b5f0:	df000017 	ldw	fp,0(sp)
    b5f4:	dec00104 	addi	sp,sp,4
    b5f8:	f800283a 	ret

0000b5fc <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
    b5fc:	defff804 	addi	sp,sp,-32
    b600:	dfc00715 	stw	ra,28(sp)
    b604:	df000615 	stw	fp,24(sp)
    b608:	df000604 	addi	fp,sp,24
    b60c:	e13ffc15 	stw	r4,-16(fp)
    b610:	e17ffd15 	stw	r5,-12(fp)
    b614:	e1bffe15 	stw	r6,-8(fp)
  alt_fd* fd;
  off_t   rc = 0; 
    b618:	e03ffa15 	stw	zero,-24(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    b61c:	e0bffc17 	ldw	r2,-16(fp)
    b620:	1004803a 	cmplt	r2,r2,zero
    b624:	1000081e 	bne	r2,zero,b648 <lseek+0x4c>
    b628:	e0bffc17 	ldw	r2,-16(fp)
    b62c:	10800324 	muli	r2,r2,12
    b630:	1007883a 	mov	r3,r2
    b634:	00800074 	movhi	r2,1
    b638:	10806b04 	addi	r2,r2,428
    b63c:	1887883a 	add	r3,r3,r2
    b640:	e0ffff15 	stw	r3,-4(fp)
    b644:	00000106 	br	b64c <lseek+0x50>
    b648:	e03fff15 	stw	zero,-4(fp)
    b64c:	e0bfff17 	ldw	r2,-4(fp)
    b650:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd) 
    b654:	e0bffb17 	ldw	r2,-20(fp)
    b658:	1005003a 	cmpeq	r2,r2,zero
    b65c:	1000111e 	bne	r2,zero,b6a4 <lseek+0xa8>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
    b660:	e0bffb17 	ldw	r2,-20(fp)
    b664:	10800017 	ldw	r2,0(r2)
    b668:	10800717 	ldw	r2,28(r2)
    b66c:	1005003a 	cmpeq	r2,r2,zero
    b670:	1000091e 	bne	r2,zero,b698 <lseek+0x9c>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
    b674:	e0bffb17 	ldw	r2,-20(fp)
    b678:	10800017 	ldw	r2,0(r2)
    b67c:	10800717 	ldw	r2,28(r2)
    b680:	e13ffb17 	ldw	r4,-20(fp)
    b684:	e17ffd17 	ldw	r5,-12(fp)
    b688:	e1bffe17 	ldw	r6,-8(fp)
    b68c:	103ee83a 	callr	r2
    b690:	e0bffa15 	stw	r2,-24(fp)
    b694:	00000506 	br	b6ac <lseek+0xb0>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
    b698:	00bfde84 	movi	r2,-134
    b69c:	e0bffa15 	stw	r2,-24(fp)
    b6a0:	00000206 	br	b6ac <lseek+0xb0>
    }
  }
  else  
  {
    rc = -EBADFD;
    b6a4:	00bfebc4 	movi	r2,-81
    b6a8:	e0bffa15 	stw	r2,-24(fp)
  }

  if (rc < 0)
    b6ac:	e0bffa17 	ldw	r2,-24(fp)
    b6b0:	1004403a 	cmpge	r2,r2,zero
    b6b4:	1000071e 	bne	r2,zero,b6d4 <lseek+0xd8>
  {
    ALT_ERRNO = -rc;
    b6b8:	000b6ec0 	call	b6ec <alt_get_errno>
    b6bc:	1007883a 	mov	r3,r2
    b6c0:	e0bffa17 	ldw	r2,-24(fp)
    b6c4:	0085c83a 	sub	r2,zero,r2
    b6c8:	18800015 	stw	r2,0(r3)
    rc = -1;
    b6cc:	00bfffc4 	movi	r2,-1
    b6d0:	e0bffa15 	stw	r2,-24(fp)
  }

  return rc;
    b6d4:	e0bffa17 	ldw	r2,-24(fp)
}
    b6d8:	e037883a 	mov	sp,fp
    b6dc:	dfc00117 	ldw	ra,4(sp)
    b6e0:	df000017 	ldw	fp,0(sp)
    b6e4:	dec00204 	addi	sp,sp,8
    b6e8:	f800283a 	ret

0000b6ec <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    b6ec:	defffd04 	addi	sp,sp,-12
    b6f0:	dfc00215 	stw	ra,8(sp)
    b6f4:	df000115 	stw	fp,4(sp)
    b6f8:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
    b6fc:	00800074 	movhi	r2,1
    b700:	10853604 	addi	r2,r2,5336
    b704:	10800017 	ldw	r2,0(r2)
    b708:	1005003a 	cmpeq	r2,r2,zero
    b70c:	1000061e 	bne	r2,zero,b728 <alt_get_errno+0x3c>
    b710:	00800074 	movhi	r2,1
    b714:	10853604 	addi	r2,r2,5336
    b718:	10800017 	ldw	r2,0(r2)
    b71c:	103ee83a 	callr	r2
    b720:	e0bfff15 	stw	r2,-4(fp)
    b724:	00000306 	br	b734 <alt_get_errno+0x48>
    b728:	00800074 	movhi	r2,1
    b72c:	108c8c04 	addi	r2,r2,12848
    b730:	e0bfff15 	stw	r2,-4(fp)
    b734:	e0bfff17 	ldw	r2,-4(fp)
}
    b738:	e037883a 	mov	sp,fp
    b73c:	dfc00117 	ldw	ra,4(sp)
    b740:	df000017 	ldw	fp,0(sp)
    b744:	dec00204 	addi	sp,sp,8
    b748:	f800283a 	ret

0000b74c <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    b74c:	defffd04 	addi	sp,sp,-12
    b750:	dfc00215 	stw	ra,8(sp)
    b754:	df000115 	stw	fp,4(sp)
    b758:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    b75c:	0009883a 	mov	r4,zero
    b760:	000bde80 	call	bde8 <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
    b764:	000be1c0 	call	be1c <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
    b768:	01000074 	movhi	r4,1
    b76c:	213d4304 	addi	r4,r4,-2804
    b770:	01400074 	movhi	r5,1
    b774:	297d4304 	addi	r5,r5,-2804
    b778:	01800074 	movhi	r6,1
    b77c:	31bd4304 	addi	r6,r6,-2804
    b780:	000e2080 	call	e208 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
    b784:	000dd800 	call	dd80 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
    b788:	01000074 	movhi	r4,1
    b78c:	21377904 	addi	r4,r4,-8732
    b790:	000e8600 	call	e860 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
    b794:	d1276517 	ldw	r4,-25196(gp)
    b798:	d1676617 	ldw	r5,-25192(gp)
    b79c:	d1a76717 	ldw	r6,-25188(gp)
    b7a0:	000191c0 	call	191c <main>
    b7a4:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
    b7a8:	01000044 	movi	r4,1
    b7ac:	000b1340 	call	b134 <close>
  exit (result);
    b7b0:	e13fff17 	ldw	r4,-4(fp)
    b7b4:	000e8740 	call	e874 <exit>

0000b7b8 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
    b7b8:	defffe04 	addi	sp,sp,-8
    b7bc:	df000115 	stw	fp,4(sp)
    b7c0:	df000104 	addi	fp,sp,4
    b7c4:	e13fff15 	stw	r4,-4(fp)
}
    b7c8:	e037883a 	mov	sp,fp
    b7cc:	df000017 	ldw	fp,0(sp)
    b7d0:	dec00104 	addi	sp,sp,4
    b7d4:	f800283a 	ret

0000b7d8 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
    b7d8:	defffe04 	addi	sp,sp,-8
    b7dc:	df000115 	stw	fp,4(sp)
    b7e0:	df000104 	addi	fp,sp,4
    b7e4:	e13fff15 	stw	r4,-4(fp)
}
    b7e8:	e037883a 	mov	sp,fp
    b7ec:	df000017 	ldw	fp,0(sp)
    b7f0:	dec00104 	addi	sp,sp,4
    b7f4:	f800283a 	ret

0000b7f8 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
    b7f8:	defff704 	addi	sp,sp,-36
    b7fc:	dfc00815 	stw	ra,32(sp)
    b800:	df000715 	stw	fp,28(sp)
    b804:	df000704 	addi	fp,sp,28
    b808:	e13ffb15 	stw	r4,-20(fp)
    b80c:	e17ffc15 	stw	r5,-16(fp)
    b810:	e1bffd15 	stw	r6,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    b814:	e0bffb17 	ldw	r2,-20(fp)
    b818:	1004803a 	cmplt	r2,r2,zero
    b81c:	1000081e 	bne	r2,zero,b840 <read+0x48>
    b820:	e0bffb17 	ldw	r2,-20(fp)
    b824:	10800324 	muli	r2,r2,12
    b828:	1007883a 	mov	r3,r2
    b82c:	00800074 	movhi	r2,1
    b830:	10806b04 	addi	r2,r2,428
    b834:	1887883a 	add	r3,r3,r2
    b838:	e0ffff15 	stw	r3,-4(fp)
    b83c:	00000106 	br	b844 <read+0x4c>
    b840:	e03fff15 	stw	zero,-4(fp)
    b844:	e0bfff17 	ldw	r2,-4(fp)
    b848:	e0bffa15 	stw	r2,-24(fp)
  
  if (fd)
    b84c:	e0bffa17 	ldw	r2,-24(fp)
    b850:	1005003a 	cmpeq	r2,r2,zero
    b854:	1000241e 	bne	r2,zero,b8e8 <read+0xf0>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
    b858:	e0bffa17 	ldw	r2,-24(fp)
    b85c:	10800217 	ldw	r2,8(r2)
    b860:	108000cc 	andi	r2,r2,3
    b864:	10800060 	cmpeqi	r2,r2,1
    b868:	10001a1e 	bne	r2,zero,b8d4 <read+0xdc>
    b86c:	e0bffa17 	ldw	r2,-24(fp)
    b870:	10800017 	ldw	r2,0(r2)
    b874:	10800517 	ldw	r2,20(r2)
    b878:	1005003a 	cmpeq	r2,r2,zero
    b87c:	1000151e 	bne	r2,zero,b8d4 <read+0xdc>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
    b880:	e0bffa17 	ldw	r2,-24(fp)
    b884:	10800017 	ldw	r2,0(r2)
    b888:	10800517 	ldw	r2,20(r2)
    b88c:	e17ffc17 	ldw	r5,-16(fp)
    b890:	e1bffd17 	ldw	r6,-12(fp)
    b894:	e13ffa17 	ldw	r4,-24(fp)
    b898:	103ee83a 	callr	r2
    b89c:	e0bff915 	stw	r2,-28(fp)
    b8a0:	e0bff917 	ldw	r2,-28(fp)
    b8a4:	1004403a 	cmpge	r2,r2,zero
    b8a8:	1000071e 	bne	r2,zero,b8c8 <read+0xd0>
        {
          ALT_ERRNO = -rval;
    b8ac:	000b9180 	call	b918 <alt_get_errno>
    b8b0:	e0fff917 	ldw	r3,-28(fp)
    b8b4:	00c7c83a 	sub	r3,zero,r3
    b8b8:	10c00015 	stw	r3,0(r2)
          return -1;
    b8bc:	00bfffc4 	movi	r2,-1
    b8c0:	e0bffe15 	stw	r2,-8(fp)
    b8c4:	00000e06 	br	b900 <read+0x108>
        }
        return rval;
    b8c8:	e0bff917 	ldw	r2,-28(fp)
    b8cc:	e0bffe15 	stw	r2,-8(fp)
    b8d0:	00000b06 	br	b900 <read+0x108>
      }
      else
      {
        ALT_ERRNO = EACCES;
    b8d4:	000b9180 	call	b918 <alt_get_errno>
    b8d8:	1007883a 	mov	r3,r2
    b8dc:	00800344 	movi	r2,13
    b8e0:	18800015 	stw	r2,0(r3)
    b8e4:	00000406 	br	b8f8 <read+0x100>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
    b8e8:	000b9180 	call	b918 <alt_get_errno>
    b8ec:	1007883a 	mov	r3,r2
    b8f0:	00801444 	movi	r2,81
    b8f4:	18800015 	stw	r2,0(r3)
  }
  return -1;
    b8f8:	00bfffc4 	movi	r2,-1
    b8fc:	e0bffe15 	stw	r2,-8(fp)
    b900:	e0bffe17 	ldw	r2,-8(fp)
}
    b904:	e037883a 	mov	sp,fp
    b908:	dfc00117 	ldw	ra,4(sp)
    b90c:	df000017 	ldw	fp,0(sp)
    b910:	dec00204 	addi	sp,sp,8
    b914:	f800283a 	ret

0000b918 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    b918:	defffd04 	addi	sp,sp,-12
    b91c:	dfc00215 	stw	ra,8(sp)
    b920:	df000115 	stw	fp,4(sp)
    b924:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
    b928:	00800074 	movhi	r2,1
    b92c:	10853604 	addi	r2,r2,5336
    b930:	10800017 	ldw	r2,0(r2)
    b934:	1005003a 	cmpeq	r2,r2,zero
    b938:	1000061e 	bne	r2,zero,b954 <alt_get_errno+0x3c>
    b93c:	00800074 	movhi	r2,1
    b940:	10853604 	addi	r2,r2,5336
    b944:	10800017 	ldw	r2,0(r2)
    b948:	103ee83a 	callr	r2
    b94c:	e0bfff15 	stw	r2,-4(fp)
    b950:	00000306 	br	b960 <alt_get_errno+0x48>
    b954:	00800074 	movhi	r2,1
    b958:	108c8c04 	addi	r2,r2,12848
    b95c:	e0bfff15 	stw	r2,-4(fp)
    b960:	e0bfff17 	ldw	r2,-4(fp)
}
    b964:	e037883a 	mov	sp,fp
    b968:	dfc00117 	ldw	ra,4(sp)
    b96c:	df000017 	ldw	fp,0(sp)
    b970:	dec00204 	addi	sp,sp,8
    b974:	f800283a 	ret

0000b978 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
    b978:	defffe04 	addi	sp,sp,-8
    b97c:	df000115 	stw	fp,4(sp)
    b980:	df000104 	addi	fp,sp,4
    b984:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
    b988:	e0bfff17 	ldw	r2,-4(fp)
    b98c:	108000d0 	cmplti	r2,r2,3
    b990:	10000d1e 	bne	r2,zero,b9c8 <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
    b994:	e0bfff17 	ldw	r2,-4(fp)
    b998:	00c00074 	movhi	r3,1
    b99c:	18c06b04 	addi	r3,r3,428
    b9a0:	10800324 	muli	r2,r2,12
    b9a4:	10c5883a 	add	r2,r2,r3
    b9a8:	10800204 	addi	r2,r2,8
    b9ac:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
    b9b0:	e0bfff17 	ldw	r2,-4(fp)
    b9b4:	00c00074 	movhi	r3,1
    b9b8:	18c06b04 	addi	r3,r3,428
    b9bc:	10800324 	muli	r2,r2,12
    b9c0:	10c5883a 	add	r2,r2,r3
    b9c4:	10000015 	stw	zero,0(r2)
  }
}
    b9c8:	e037883a 	mov	sp,fp
    b9cc:	df000017 	ldw	fp,0(sp)
    b9d0:	dec00104 	addi	sp,sp,4
    b9d4:	f800283a 	ret

0000b9d8 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
    b9d8:	defff804 	addi	sp,sp,-32
    b9dc:	df000715 	stw	fp,28(sp)
    b9e0:	df000704 	addi	fp,sp,28
    b9e4:	e13ffe15 	stw	r4,-8(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    b9e8:	0005303a 	rdctl	r2,status
    b9ec:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    b9f0:	e0fffb17 	ldw	r3,-20(fp)
    b9f4:	00bfff84 	movi	r2,-2
    b9f8:	1884703a 	and	r2,r3,r2
    b9fc:	1001703a 	wrctl	status,r2
  
  return context;
    ba00:	e0bffb17 	ldw	r2,-20(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
    ba04:	e0bffd15 	stw	r2,-12(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
    ba08:	d0a00c17 	ldw	r2,-32720(gp)
    ba0c:	10c000c4 	addi	r3,r2,3
    ba10:	00bfff04 	movi	r2,-4
    ba14:	1884703a 	and	r2,r3,r2
    ba18:	d0a00c15 	stw	r2,-32720(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
    ba1c:	d0e00c17 	ldw	r3,-32720(gp)
    ba20:	e0bffe17 	ldw	r2,-8(fp)
    ba24:	1887883a 	add	r3,r3,r2
    ba28:	00820034 	movhi	r2,2048
    ba2c:	10800004 	addi	r2,r2,0
    ba30:	10c0072e 	bgeu	r2,r3,ba50 <sbrk+0x78>
    ba34:	e0bffd17 	ldw	r2,-12(fp)
    ba38:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    ba3c:	e0bffa17 	ldw	r2,-24(fp)
    ba40:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
    ba44:	00bfffc4 	movi	r2,-1
    ba48:	e0bfff15 	stw	r2,-4(fp)
    ba4c:	00000c06 	br	ba80 <sbrk+0xa8>
  }
#endif

  prev_heap_end = heap_end; 
    ba50:	d0a00c17 	ldw	r2,-32720(gp)
    ba54:	e0bffc15 	stw	r2,-16(fp)
  heap_end += incr; 
    ba58:	d0e00c17 	ldw	r3,-32720(gp)
    ba5c:	e0bffe17 	ldw	r2,-8(fp)
    ba60:	1885883a 	add	r2,r3,r2
    ba64:	d0a00c15 	stw	r2,-32720(gp)
    ba68:	e0bffd17 	ldw	r2,-12(fp)
    ba6c:	e0bff915 	stw	r2,-28(fp)
    ba70:	e0bff917 	ldw	r2,-28(fp)
    ba74:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
    ba78:	e0bffc17 	ldw	r2,-16(fp)
    ba7c:	e0bfff15 	stw	r2,-4(fp)
    ba80:	e0bfff17 	ldw	r2,-4(fp)
} 
    ba84:	e037883a 	mov	sp,fp
    ba88:	df000017 	ldw	fp,0(sp)
    ba8c:	dec00104 	addi	sp,sp,4
    ba90:	f800283a 	ret

0000ba94 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
    ba94:	defffa04 	addi	sp,sp,-24
    ba98:	df000515 	stw	fp,20(sp)
    ba9c:	df000504 	addi	fp,sp,20
    baa0:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    baa4:	0005303a 	rdctl	r2,status
    baa8:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    baac:	e0fffd17 	ldw	r3,-12(fp)
    bab0:	00bfff84 	movi	r2,-2
    bab4:	1884703a 	and	r2,r3,r2
    bab8:	1001703a 	wrctl	status,r2
  
  return context;
    babc:	e0bffd17 	ldw	r2,-12(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
    bac0:	e0bffe15 	stw	r2,-8(fp)
  alt_llist_remove (&alarm->llist);
    bac4:	e0bfff17 	ldw	r2,-4(fp)
    bac8:	e0bffc15 	stw	r2,-16(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
    bacc:	e0bffc17 	ldw	r2,-16(fp)
    bad0:	10c00017 	ldw	r3,0(r2)
    bad4:	e0bffc17 	ldw	r2,-16(fp)
    bad8:	10800117 	ldw	r2,4(r2)
    badc:	18800115 	stw	r2,4(r3)
  entry->previous->next = entry->next;
    bae0:	e0bffc17 	ldw	r2,-16(fp)
    bae4:	10c00117 	ldw	r3,4(r2)
    bae8:	e0bffc17 	ldw	r2,-16(fp)
    baec:	10800017 	ldw	r2,0(r2)
    baf0:	18800015 	stw	r2,0(r3)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
    baf4:	e0fffc17 	ldw	r3,-16(fp)
    baf8:	e0bffc17 	ldw	r2,-16(fp)
    bafc:	18800115 	stw	r2,4(r3)
  entry->next     = entry;
    bb00:	e0fffc17 	ldw	r3,-16(fp)
    bb04:	e0bffc17 	ldw	r2,-16(fp)
    bb08:	18800015 	stw	r2,0(r3)
    bb0c:	e0bffe17 	ldw	r2,-8(fp)
    bb10:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    bb14:	e0bffb17 	ldw	r2,-20(fp)
    bb18:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
    bb1c:	e037883a 	mov	sp,fp
    bb20:	df000017 	ldw	fp,0(sp)
    bb24:	dec00104 	addi	sp,sp,4
    bb28:	f800283a 	ret

0000bb2c <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
    bb2c:	defffb04 	addi	sp,sp,-20
    bb30:	dfc00415 	stw	ra,16(sp)
    bb34:	df000315 	stw	fp,12(sp)
    bb38:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
    bb3c:	d0a00d17 	ldw	r2,-32716(gp)
    bb40:	e0bffe15 	stw	r2,-8(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
    bb44:	d0a76917 	ldw	r2,-25180(gp)
    bb48:	10800044 	addi	r2,r2,1
    bb4c:	d0a76915 	stw	r2,-25180(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
    bb50:	00003106 	br	bc18 <alt_tick+0xec>
  {
    next = (alt_alarm*) alarm->llist.next;
    bb54:	e0bffe17 	ldw	r2,-8(fp)
    bb58:	10800017 	ldw	r2,0(r2)
    bb5c:	e0bfff15 	stw	r2,-4(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
    bb60:	e0bffe17 	ldw	r2,-8(fp)
    bb64:	10800403 	ldbu	r2,16(r2)
    bb68:	10803fcc 	andi	r2,r2,255
    bb6c:	1005003a 	cmpeq	r2,r2,zero
    bb70:	1000051e 	bne	r2,zero,bb88 <alt_tick+0x5c>
    bb74:	d0a76917 	ldw	r2,-25180(gp)
    bb78:	1004c03a 	cmpne	r2,r2,zero
    bb7c:	1000021e 	bne	r2,zero,bb88 <alt_tick+0x5c>
    {
      alarm->rollover = 0;
    bb80:	e0bffe17 	ldw	r2,-8(fp)
    bb84:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
    bb88:	e0bffe17 	ldw	r2,-8(fp)
    bb8c:	10c00217 	ldw	r3,8(r2)
    bb90:	d0a76917 	ldw	r2,-25180(gp)
    bb94:	10c01e36 	bltu	r2,r3,bc10 <alt_tick+0xe4>
    bb98:	e0bffe17 	ldw	r2,-8(fp)
    bb9c:	10800403 	ldbu	r2,16(r2)
    bba0:	10803fcc 	andi	r2,r2,255
    bba4:	1004c03a 	cmpne	r2,r2,zero
    bba8:	1000191e 	bne	r2,zero,bc10 <alt_tick+0xe4>
    {
      next_callback = alarm->callback (alarm->context);
    bbac:	e0bffe17 	ldw	r2,-8(fp)
    bbb0:	10c00317 	ldw	r3,12(r2)
    bbb4:	e0bffe17 	ldw	r2,-8(fp)
    bbb8:	11000517 	ldw	r4,20(r2)
    bbbc:	183ee83a 	callr	r3
    bbc0:	e0bffd15 	stw	r2,-12(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
    bbc4:	e0bffd17 	ldw	r2,-12(fp)
    bbc8:	1004c03a 	cmpne	r2,r2,zero
    bbcc:	1000031e 	bne	r2,zero,bbdc <alt_tick+0xb0>
      {
        alt_alarm_stop (alarm);
    bbd0:	e13ffe17 	ldw	r4,-8(fp)
    bbd4:	000ba940 	call	ba94 <alt_alarm_stop>
    bbd8:	00000d06 	br	bc10 <alt_tick+0xe4>
      }
      else
      {
        alarm->time += next_callback;
    bbdc:	e0bffe17 	ldw	r2,-8(fp)
    bbe0:	10c00217 	ldw	r3,8(r2)
    bbe4:	e0bffd17 	ldw	r2,-12(fp)
    bbe8:	1887883a 	add	r3,r3,r2
    bbec:	e0bffe17 	ldw	r2,-8(fp)
    bbf0:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
    bbf4:	e0bffe17 	ldw	r2,-8(fp)
    bbf8:	10c00217 	ldw	r3,8(r2)
    bbfc:	d0a76917 	ldw	r2,-25180(gp)
    bc00:	1880032e 	bgeu	r3,r2,bc10 <alt_tick+0xe4>
        {
          alarm->rollover = 1;
    bc04:	e0fffe17 	ldw	r3,-8(fp)
    bc08:	00800044 	movi	r2,1
    bc0c:	18800405 	stb	r2,16(r3)
        }
      }
    }
    alarm = next;
    bc10:	e0bfff17 	ldw	r2,-4(fp)
    bc14:	e0bffe15 	stw	r2,-8(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
    bc18:	d0e00d04 	addi	r3,gp,-32716
    bc1c:	e0bffe17 	ldw	r2,-8(fp)
    bc20:	10ffcc1e 	bne	r2,r3,bb54 <alt_tick+0x28>
  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
}
    bc24:	e037883a 	mov	sp,fp
    bc28:	dfc00117 	ldw	ra,4(sp)
    bc2c:	df000017 	ldw	fp,0(sp)
    bc30:	dec00204 	addi	sp,sp,8
    bc34:	f800283a 	ret

0000bc38 <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
    bc38:	defffd04 	addi	sp,sp,-12
    bc3c:	dfc00215 	stw	ra,8(sp)
    bc40:	df000115 	stw	fp,4(sp)
    bc44:	df000104 	addi	fp,sp,4
    bc48:	e13fff15 	stw	r4,-4(fp)
  return alt_busy_sleep(us);
    bc4c:	e13fff17 	ldw	r4,-4(fp)
    bc50:	000db040 	call	db04 <alt_busy_sleep>
}
    bc54:	e037883a 	mov	sp,fp
    bc58:	dfc00117 	ldw	ra,4(sp)
    bc5c:	df000017 	ldw	fp,0(sp)
    bc60:	dec00204 	addi	sp,sp,8
    bc64:	f800283a 	ret

0000bc68 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
    bc68:	defff704 	addi	sp,sp,-36
    bc6c:	dfc00815 	stw	ra,32(sp)
    bc70:	df000715 	stw	fp,28(sp)
    bc74:	df000704 	addi	fp,sp,28
    bc78:	e13ffb15 	stw	r4,-20(fp)
    bc7c:	e17ffc15 	stw	r5,-16(fp)
    bc80:	e1bffd15 	stw	r6,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    bc84:	e0bffb17 	ldw	r2,-20(fp)
    bc88:	1004803a 	cmplt	r2,r2,zero
    bc8c:	1000081e 	bne	r2,zero,bcb0 <write+0x48>
    bc90:	e0bffb17 	ldw	r2,-20(fp)
    bc94:	10800324 	muli	r2,r2,12
    bc98:	1007883a 	mov	r3,r2
    bc9c:	00800074 	movhi	r2,1
    bca0:	10806b04 	addi	r2,r2,428
    bca4:	1887883a 	add	r3,r3,r2
    bca8:	e0ffff15 	stw	r3,-4(fp)
    bcac:	00000106 	br	bcb4 <write+0x4c>
    bcb0:	e03fff15 	stw	zero,-4(fp)
    bcb4:	e0bfff17 	ldw	r2,-4(fp)
    bcb8:	e0bffa15 	stw	r2,-24(fp)
  
  if (fd)
    bcbc:	e0bffa17 	ldw	r2,-24(fp)
    bcc0:	1005003a 	cmpeq	r2,r2,zero
    bcc4:	1000241e 	bne	r2,zero,bd58 <write+0xf0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
    bcc8:	e0bffa17 	ldw	r2,-24(fp)
    bccc:	10800217 	ldw	r2,8(r2)
    bcd0:	108000cc 	andi	r2,r2,3
    bcd4:	1005003a 	cmpeq	r2,r2,zero
    bcd8:	10001a1e 	bne	r2,zero,bd44 <write+0xdc>
    bcdc:	e0bffa17 	ldw	r2,-24(fp)
    bce0:	10800017 	ldw	r2,0(r2)
    bce4:	10800617 	ldw	r2,24(r2)
    bce8:	1005003a 	cmpeq	r2,r2,zero
    bcec:	1000151e 	bne	r2,zero,bd44 <write+0xdc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
    bcf0:	e0bffa17 	ldw	r2,-24(fp)
    bcf4:	10800017 	ldw	r2,0(r2)
    bcf8:	10800617 	ldw	r2,24(r2)
    bcfc:	e17ffc17 	ldw	r5,-16(fp)
    bd00:	e1bffd17 	ldw	r6,-12(fp)
    bd04:	e13ffa17 	ldw	r4,-24(fp)
    bd08:	103ee83a 	callr	r2
    bd0c:	e0bff915 	stw	r2,-28(fp)
    bd10:	e0bff917 	ldw	r2,-28(fp)
    bd14:	1004403a 	cmpge	r2,r2,zero
    bd18:	1000071e 	bne	r2,zero,bd38 <write+0xd0>
      {
        ALT_ERRNO = -rval;
    bd1c:	000bd880 	call	bd88 <alt_get_errno>
    bd20:	e0fff917 	ldw	r3,-28(fp)
    bd24:	00c7c83a 	sub	r3,zero,r3
    bd28:	10c00015 	stw	r3,0(r2)
        return -1;
    bd2c:	00bfffc4 	movi	r2,-1
    bd30:	e0bffe15 	stw	r2,-8(fp)
    bd34:	00000e06 	br	bd70 <write+0x108>
      }
      return rval;
    bd38:	e0bff917 	ldw	r2,-28(fp)
    bd3c:	e0bffe15 	stw	r2,-8(fp)
    bd40:	00000b06 	br	bd70 <write+0x108>
    }
    else
    {
      ALT_ERRNO = EACCES;
    bd44:	000bd880 	call	bd88 <alt_get_errno>
    bd48:	1007883a 	mov	r3,r2
    bd4c:	00800344 	movi	r2,13
    bd50:	18800015 	stw	r2,0(r3)
    bd54:	00000406 	br	bd68 <write+0x100>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
    bd58:	000bd880 	call	bd88 <alt_get_errno>
    bd5c:	1007883a 	mov	r3,r2
    bd60:	00801444 	movi	r2,81
    bd64:	18800015 	stw	r2,0(r3)
  }
  return -1;
    bd68:	00bfffc4 	movi	r2,-1
    bd6c:	e0bffe15 	stw	r2,-8(fp)
    bd70:	e0bffe17 	ldw	r2,-8(fp)
}
    bd74:	e037883a 	mov	sp,fp
    bd78:	dfc00117 	ldw	ra,4(sp)
    bd7c:	df000017 	ldw	fp,0(sp)
    bd80:	dec00204 	addi	sp,sp,8
    bd84:	f800283a 	ret

0000bd88 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    bd88:	defffd04 	addi	sp,sp,-12
    bd8c:	dfc00215 	stw	ra,8(sp)
    bd90:	df000115 	stw	fp,4(sp)
    bd94:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
    bd98:	00800074 	movhi	r2,1
    bd9c:	10853604 	addi	r2,r2,5336
    bda0:	10800017 	ldw	r2,0(r2)
    bda4:	1005003a 	cmpeq	r2,r2,zero
    bda8:	1000061e 	bne	r2,zero,bdc4 <alt_get_errno+0x3c>
    bdac:	00800074 	movhi	r2,1
    bdb0:	10853604 	addi	r2,r2,5336
    bdb4:	10800017 	ldw	r2,0(r2)
    bdb8:	103ee83a 	callr	r2
    bdbc:	e0bfff15 	stw	r2,-4(fp)
    bdc0:	00000306 	br	bdd0 <alt_get_errno+0x48>
    bdc4:	00800074 	movhi	r2,1
    bdc8:	108c8c04 	addi	r2,r2,12848
    bdcc:	e0bfff15 	stw	r2,-4(fp)
    bdd0:	e0bfff17 	ldw	r2,-4(fp)
}
    bdd4:	e037883a 	mov	sp,fp
    bdd8:	dfc00117 	ldw	ra,4(sp)
    bddc:	df000017 	ldw	fp,0(sp)
    bde0:	dec00204 	addi	sp,sp,8
    bde4:	f800283a 	ret

0000bde8 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
    bde8:	defffd04 	addi	sp,sp,-12
    bdec:	dfc00215 	stw	ra,8(sp)
    bdf0:	df000115 	stw	fp,4(sp)
    bdf4:	df000104 	addi	fp,sp,4
    bdf8:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( CPU_0, cpu_0);
    bdfc:	000e5440 	call	e544 <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
    be00:	00800044 	movi	r2,1
    be04:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
    be08:	e037883a 	mov	sp,fp
    be0c:	dfc00117 	ldw	ra,4(sp)
    be10:	df000017 	ldw	fp,0(sp)
    be14:	dec00204 	addi	sp,sp,8
    be18:	f800283a 	ret

0000be1c <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
    be1c:	defffe04 	addi	sp,sp,-8
    be20:	dfc00115 	stw	ra,4(sp)
    be24:	df000015 	stw	fp,0(sp)
    be28:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER_0, timer_0);
    be2c:	01020034 	movhi	r4,2048
    be30:	000b883a 	mov	r5,zero
    be34:	01800044 	movi	r6,1
    be38:	01c0fa04 	movi	r7,1000
    be3c:	000d9200 	call	d920 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_TIMER_INIT ( TIMER_1, timer_1);
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
    be40:	01000074 	movhi	r4,1
    be44:	2100d504 	addi	r4,r4,852
    be48:	000b883a 	mov	r5,zero
    be4c:	000d883a 	mov	r6,zero
    be50:	000c00c0 	call	c00c <altera_avalon_jtag_uart_init>
    be54:	01000074 	movhi	r4,1
    be58:	2100cb04 	addi	r4,r4,812
    be5c:	000be8c0 	call	be8c <alt_dev_reg>
    ALTERA_AVALON_LCD_16207_INIT ( LCD_16207_0, lcd_16207_0);
    be60:	01000074 	movhi	r4,1
    be64:	2104ed04 	addi	r4,r4,5044
    be68:	000d71c0 	call	d71c <altera_avalon_lcd_16207_init>
    be6c:	01000074 	movhi	r4,1
    be70:	2104e304 	addi	r4,r4,5004
    be74:	000be8c0 	call	be8c <alt_dev_reg>
}
    be78:	e037883a 	mov	sp,fp
    be7c:	dfc00117 	ldw	ra,4(sp)
    be80:	df000017 	ldw	fp,0(sp)
    be84:	dec00204 	addi	sp,sp,8
    be88:	f800283a 	ret

0000be8c <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
    be8c:	defffd04 	addi	sp,sp,-12
    be90:	dfc00215 	stw	ra,8(sp)
    be94:	df000115 	stw	fp,4(sp)
    be98:	df000104 	addi	fp,sp,4
    be9c:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
    bea0:	e13fff17 	ldw	r4,-4(fp)
    bea4:	01400074 	movhi	r5,1
    bea8:	29453304 	addi	r5,r5,5324
    beac:	000dc6c0 	call	dc6c <alt_dev_llist_insert>
}
    beb0:	e037883a 	mov	sp,fp
    beb4:	dfc00117 	ldw	ra,4(sp)
    beb8:	df000017 	ldw	fp,0(sp)
    bebc:	dec00204 	addi	sp,sp,8
    bec0:	f800283a 	ret

0000bec4 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
    bec4:	defffa04 	addi	sp,sp,-24
    bec8:	dfc00515 	stw	ra,20(sp)
    becc:	df000415 	stw	fp,16(sp)
    bed0:	df000404 	addi	fp,sp,16
    bed4:	e13ffd15 	stw	r4,-12(fp)
    bed8:	e17ffe15 	stw	r5,-8(fp)
    bedc:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    bee0:	e0bffd17 	ldw	r2,-12(fp)
    bee4:	10800017 	ldw	r2,0(r2)
    bee8:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
    beec:	e0bffc17 	ldw	r2,-16(fp)
    bef0:	11000a04 	addi	r4,r2,40
    bef4:	e0bffd17 	ldw	r2,-12(fp)
    bef8:	11c00217 	ldw	r7,8(r2)
    befc:	e17ffe17 	ldw	r5,-8(fp)
    bf00:	e1bfff17 	ldw	r6,-4(fp)
    bf04:	000c50c0 	call	c50c <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
    bf08:	e037883a 	mov	sp,fp
    bf0c:	dfc00117 	ldw	ra,4(sp)
    bf10:	df000017 	ldw	fp,0(sp)
    bf14:	dec00204 	addi	sp,sp,8
    bf18:	f800283a 	ret

0000bf1c <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
    bf1c:	defffa04 	addi	sp,sp,-24
    bf20:	dfc00515 	stw	ra,20(sp)
    bf24:	df000415 	stw	fp,16(sp)
    bf28:	df000404 	addi	fp,sp,16
    bf2c:	e13ffd15 	stw	r4,-12(fp)
    bf30:	e17ffe15 	stw	r5,-8(fp)
    bf34:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    bf38:	e0bffd17 	ldw	r2,-12(fp)
    bf3c:	10800017 	ldw	r2,0(r2)
    bf40:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
    bf44:	e0bffc17 	ldw	r2,-16(fp)
    bf48:	11000a04 	addi	r4,r2,40
    bf4c:	e0bffd17 	ldw	r2,-12(fp)
    bf50:	11c00217 	ldw	r7,8(r2)
    bf54:	e17ffe17 	ldw	r5,-8(fp)
    bf58:	e1bfff17 	ldw	r6,-4(fp)
    bf5c:	000c7300 	call	c730 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
    bf60:	e037883a 	mov	sp,fp
    bf64:	dfc00117 	ldw	ra,4(sp)
    bf68:	df000017 	ldw	fp,0(sp)
    bf6c:	dec00204 	addi	sp,sp,8
    bf70:	f800283a 	ret

0000bf74 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
    bf74:	defffc04 	addi	sp,sp,-16
    bf78:	dfc00315 	stw	ra,12(sp)
    bf7c:	df000215 	stw	fp,8(sp)
    bf80:	df000204 	addi	fp,sp,8
    bf84:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    bf88:	e0bfff17 	ldw	r2,-4(fp)
    bf8c:	10800017 	ldw	r2,0(r2)
    bf90:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
    bf94:	e0bffe17 	ldw	r2,-8(fp)
    bf98:	11000a04 	addi	r4,r2,40
    bf9c:	e0bfff17 	ldw	r2,-4(fp)
    bfa0:	11400217 	ldw	r5,8(r2)
    bfa4:	000c3a40 	call	c3a4 <altera_avalon_jtag_uart_close>
}
    bfa8:	e037883a 	mov	sp,fp
    bfac:	dfc00117 	ldw	ra,4(sp)
    bfb0:	df000017 	ldw	fp,0(sp)
    bfb4:	dec00204 	addi	sp,sp,8
    bfb8:	f800283a 	ret

0000bfbc <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
    bfbc:	defffa04 	addi	sp,sp,-24
    bfc0:	dfc00515 	stw	ra,20(sp)
    bfc4:	df000415 	stw	fp,16(sp)
    bfc8:	df000404 	addi	fp,sp,16
    bfcc:	e13ffd15 	stw	r4,-12(fp)
    bfd0:	e17ffe15 	stw	r5,-8(fp)
    bfd4:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
    bfd8:	e0bffd17 	ldw	r2,-12(fp)
    bfdc:	10800017 	ldw	r2,0(r2)
    bfe0:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
    bfe4:	e0bffc17 	ldw	r2,-16(fp)
    bfe8:	11000a04 	addi	r4,r2,40
    bfec:	e17ffe17 	ldw	r5,-8(fp)
    bff0:	e1bfff17 	ldw	r6,-4(fp)
    bff4:	000c4180 	call	c418 <altera_avalon_jtag_uart_ioctl>
}
    bff8:	e037883a 	mov	sp,fp
    bffc:	dfc00117 	ldw	ra,4(sp)
    c000:	df000017 	ldw	fp,0(sp)
    c004:	dec00204 	addi	sp,sp,8
    c008:	f800283a 	ret

0000c00c <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
    c00c:	defffa04 	addi	sp,sp,-24
    c010:	dfc00515 	stw	ra,20(sp)
    c014:	df000415 	stw	fp,16(sp)
    c018:	df000404 	addi	fp,sp,16
    c01c:	e13ffd15 	stw	r4,-12(fp)
    c020:	e17ffe15 	stw	r5,-8(fp)
    c024:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    c028:	e0fffd17 	ldw	r3,-12(fp)
    c02c:	00800044 	movi	r2,1
    c030:	18800815 	stw	r2,32(r3)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
    c034:	e0bffd17 	ldw	r2,-12(fp)
    c038:	10800017 	ldw	r2,0(r2)
    c03c:	11000104 	addi	r4,r2,4
    c040:	e0bffd17 	ldw	r2,-12(fp)
    c044:	10800817 	ldw	r2,32(r2)
    c048:	1007883a 	mov	r3,r2
    c04c:	2005883a 	mov	r2,r4
    c050:	10c00035 	stwio	r3,0(r2)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
    c054:	e13ffe17 	ldw	r4,-8(fp)
    c058:	e17fff17 	ldw	r5,-4(fp)
    c05c:	d8000015 	stw	zero,0(sp)
    c060:	01800074 	movhi	r6,1
    c064:	31b03304 	addi	r6,r6,-16180
    c068:	e1fffd17 	ldw	r7,-12(fp)
    c06c:	000de780 	call	de78 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
    c070:	e0bffd17 	ldw	r2,-12(fp)
    c074:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
    c078:	e0bffd17 	ldw	r2,-12(fp)
    c07c:	11000204 	addi	r4,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
    c080:	00800074 	movhi	r2,1
    c084:	108c9304 	addi	r2,r2,12876
    c088:	10800017 	ldw	r2,0(r2)
    c08c:	100b883a 	mov	r5,r2
    c090:	01800074 	movhi	r6,1
    c094:	31b0bd04 	addi	r6,r6,-15628
    c098:	e1fffd17 	ldw	r7,-12(fp)
    c09c:	000d9b00 	call	d9b0 <alt_alarm_start>
    c0a0:	1004403a 	cmpge	r2,r2,zero
    c0a4:	1000041e 	bne	r2,zero,c0b8 <altera_avalon_jtag_uart_init+0xac>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
    c0a8:	e0fffd17 	ldw	r3,-12(fp)
    c0ac:	00a00034 	movhi	r2,32768
    c0b0:	10bfffc4 	addi	r2,r2,-1
    c0b4:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
    c0b8:	e037883a 	mov	sp,fp
    c0bc:	dfc00117 	ldw	ra,4(sp)
    c0c0:	df000017 	ldw	fp,0(sp)
    c0c4:	dec00204 	addi	sp,sp,8
    c0c8:	f800283a 	ret

0000c0cc <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
    c0cc:	defff804 	addi	sp,sp,-32
    c0d0:	df000715 	stw	fp,28(sp)
    c0d4:	df000704 	addi	fp,sp,28
    c0d8:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
    c0dc:	e0bfff17 	ldw	r2,-4(fp)
    c0e0:	e0bffe15 	stw	r2,-8(fp)
  unsigned int base = sp->base;
    c0e4:	e0bffe17 	ldw	r2,-8(fp)
    c0e8:	10800017 	ldw	r2,0(r2)
    c0ec:	e0bffd15 	stw	r2,-12(fp)
    c0f0:	00000006 	br	c0f4 <altera_avalon_jtag_uart_irq+0x28>
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    c0f4:	e0bffd17 	ldw	r2,-12(fp)
    c0f8:	10800104 	addi	r2,r2,4
    c0fc:	10800037 	ldwio	r2,0(r2)
    c100:	e0bffc15 	stw	r2,-16(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
    c104:	e0bffc17 	ldw	r2,-16(fp)
    c108:	1080c00c 	andi	r2,r2,768
    c10c:	1005003a 	cmpeq	r2,r2,zero
    c110:	1000741e 	bne	r2,zero,c2e4 <altera_avalon_jtag_uart_irq+0x218>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
    c114:	e0bffc17 	ldw	r2,-16(fp)
    c118:	1080400c 	andi	r2,r2,256
    c11c:	1005003a 	cmpeq	r2,r2,zero
    c120:	1000351e 	bne	r2,zero,c1f8 <altera_avalon_jtag_uart_irq+0x12c>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
    c124:	00800074 	movhi	r2,1
    c128:	e0bffb15 	stw	r2,-20(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    c12c:	e0bffe17 	ldw	r2,-8(fp)
    c130:	10800a17 	ldw	r2,40(r2)
    c134:	10800044 	addi	r2,r2,1
    c138:	1081ffcc 	andi	r2,r2,2047
    c13c:	e0bffa15 	stw	r2,-24(fp)
        if (next == sp->rx_out)
    c140:	e0bffe17 	ldw	r2,-8(fp)
    c144:	10c00b17 	ldw	r3,44(r2)
    c148:	e0bffa17 	ldw	r2,-24(fp)
    c14c:	18801626 	beq	r3,r2,c1a8 <altera_avalon_jtag_uart_irq+0xdc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
    c150:	e0bffd17 	ldw	r2,-12(fp)
    c154:	10800037 	ldwio	r2,0(r2)
    c158:	e0bffb15 	stw	r2,-20(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
    c15c:	e0bffb17 	ldw	r2,-20(fp)
    c160:	10a0000c 	andi	r2,r2,32768
    c164:	1005003a 	cmpeq	r2,r2,zero
    c168:	10000f1e 	bne	r2,zero,c1a8 <altera_avalon_jtag_uart_irq+0xdc>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
    c16c:	e0bffe17 	ldw	r2,-8(fp)
    c170:	10c00a17 	ldw	r3,40(r2)
    c174:	e0bffb17 	ldw	r2,-20(fp)
    c178:	1009883a 	mov	r4,r2
    c17c:	e0bffe17 	ldw	r2,-8(fp)
    c180:	1885883a 	add	r2,r3,r2
    c184:	10800e04 	addi	r2,r2,56
    c188:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    c18c:	e0bffe17 	ldw	r2,-8(fp)
    c190:	10800a17 	ldw	r2,40(r2)
    c194:	10800044 	addi	r2,r2,1
    c198:	10c1ffcc 	andi	r3,r2,2047
    c19c:	e0bffe17 	ldw	r2,-8(fp)
    c1a0:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
    c1a4:	003fe106 	br	c12c <altera_avalon_jtag_uart_irq+0x60>

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
    c1a8:	e0bffb17 	ldw	r2,-20(fp)
    c1ac:	10bfffec 	andhi	r2,r2,65535
    c1b0:	1005003a 	cmpeq	r2,r2,zero
    c1b4:	1000101e 	bne	r2,zero,c1f8 <altera_avalon_jtag_uart_irq+0x12c>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    c1b8:	e0bffe17 	ldw	r2,-8(fp)
    c1bc:	10c00817 	ldw	r3,32(r2)
    c1c0:	00bfff84 	movi	r2,-2
    c1c4:	1886703a 	and	r3,r3,r2
    c1c8:	e0bffe17 	ldw	r2,-8(fp)
    c1cc:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
    c1d0:	e0bffd17 	ldw	r2,-12(fp)
    c1d4:	11000104 	addi	r4,r2,4
    c1d8:	e0bffe17 	ldw	r2,-8(fp)
    c1dc:	10800817 	ldw	r2,32(r2)
    c1e0:	1007883a 	mov	r3,r2
    c1e4:	2005883a 	mov	r2,r4
    c1e8:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    c1ec:	e0bffd17 	ldw	r2,-12(fp)
    c1f0:	10800104 	addi	r2,r2,4
    c1f4:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    c1f8:	e0bffc17 	ldw	r2,-16(fp)
    c1fc:	1080800c 	andi	r2,r2,512
    c200:	1005003a 	cmpeq	r2,r2,zero
    c204:	103fbb1e 	bne	r2,zero,c0f4 <altera_avalon_jtag_uart_irq+0x28>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
    c208:	e0bffc17 	ldw	r2,-16(fp)
    c20c:	10bfffec 	andhi	r2,r2,65535
    c210:	1004d43a 	srli	r2,r2,16
    c214:	e0bff915 	stw	r2,-28(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
    c218:	00001506 	br	c270 <altera_avalon_jtag_uart_irq+0x1a4>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
    c21c:	e13ffd17 	ldw	r4,-12(fp)
    c220:	e0bffe17 	ldw	r2,-8(fp)
    c224:	10c00d17 	ldw	r3,52(r2)
    c228:	e0bffe17 	ldw	r2,-8(fp)
    c22c:	1885883a 	add	r2,r3,r2
    c230:	10820e04 	addi	r2,r2,2104
    c234:	10800003 	ldbu	r2,0(r2)
    c238:	10c03fcc 	andi	r3,r2,255
    c23c:	18c0201c 	xori	r3,r3,128
    c240:	18ffe004 	addi	r3,r3,-128
    c244:	2005883a 	mov	r2,r4
    c248:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    c24c:	e0bffe17 	ldw	r2,-8(fp)
    c250:	10800d17 	ldw	r2,52(r2)
    c254:	10800044 	addi	r2,r2,1
    c258:	10c1ffcc 	andi	r3,r2,2047
    c25c:	e0bffe17 	ldw	r2,-8(fp)
    c260:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
    c264:	e0bff917 	ldw	r2,-28(fp)
    c268:	10bfffc4 	addi	r2,r2,-1
    c26c:	e0bff915 	stw	r2,-28(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
    c270:	e0bff917 	ldw	r2,-28(fp)
    c274:	1005003a 	cmpeq	r2,r2,zero
    c278:	1000051e 	bne	r2,zero,c290 <altera_avalon_jtag_uart_irq+0x1c4>
    c27c:	e0bffe17 	ldw	r2,-8(fp)
    c280:	10c00d17 	ldw	r3,52(r2)
    c284:	e0bffe17 	ldw	r2,-8(fp)
    c288:	10800c17 	ldw	r2,48(r2)
    c28c:	18bfe31e 	bne	r3,r2,c21c <altera_avalon_jtag_uart_irq+0x150>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
    c290:	e0bff917 	ldw	r2,-28(fp)
    c294:	1005003a 	cmpeq	r2,r2,zero
    c298:	103f961e 	bne	r2,zero,c0f4 <altera_avalon_jtag_uart_irq+0x28>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
    c29c:	e0bffe17 	ldw	r2,-8(fp)
    c2a0:	10c00817 	ldw	r3,32(r2)
    c2a4:	00bfff44 	movi	r2,-3
    c2a8:	1886703a 	and	r3,r3,r2
    c2ac:	e0bffe17 	ldw	r2,-8(fp)
    c2b0:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    c2b4:	e0bffe17 	ldw	r2,-8(fp)
    c2b8:	10800017 	ldw	r2,0(r2)
    c2bc:	11000104 	addi	r4,r2,4
    c2c0:	e0bffe17 	ldw	r2,-8(fp)
    c2c4:	10800817 	ldw	r2,32(r2)
    c2c8:	1007883a 	mov	r3,r2
    c2cc:	2005883a 	mov	r2,r4
    c2d0:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    c2d4:	e0bffd17 	ldw	r2,-12(fp)
    c2d8:	10800104 	addi	r2,r2,4
    c2dc:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
    c2e0:	003f8406 	br	c0f4 <altera_avalon_jtag_uart_irq+0x28>
}
    c2e4:	e037883a 	mov	sp,fp
    c2e8:	df000017 	ldw	fp,0(sp)
    c2ec:	dec00104 	addi	sp,sp,4
    c2f0:	f800283a 	ret

0000c2f4 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
    c2f4:	defffc04 	addi	sp,sp,-16
    c2f8:	df000315 	stw	fp,12(sp)
    c2fc:	df000304 	addi	fp,sp,12
    c300:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
    c304:	e0bfff17 	ldw	r2,-4(fp)
    c308:	e0bffe15 	stw	r2,-8(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
    c30c:	e0bffe17 	ldw	r2,-8(fp)
    c310:	10800017 	ldw	r2,0(r2)
    c314:	10800104 	addi	r2,r2,4
    c318:	10800037 	ldwio	r2,0(r2)
    c31c:	e0bffd15 	stw	r2,-12(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
    c320:	e0bffd17 	ldw	r2,-12(fp)
    c324:	1081000c 	andi	r2,r2,1024
    c328:	1005003a 	cmpeq	r2,r2,zero
    c32c:	10000c1e 	bne	r2,zero,c360 <altera_avalon_jtag_uart_timeout+0x6c>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
    c330:	e0bffe17 	ldw	r2,-8(fp)
    c334:	10800017 	ldw	r2,0(r2)
    c338:	11000104 	addi	r4,r2,4
    c33c:	e0bffe17 	ldw	r2,-8(fp)
    c340:	10800817 	ldw	r2,32(r2)
    c344:	10810014 	ori	r2,r2,1024
    c348:	1007883a 	mov	r3,r2
    c34c:	2005883a 	mov	r2,r4
    c350:	10c00035 	stwio	r3,0(r2)
    sp->host_inactive = 0;
    c354:	e0bffe17 	ldw	r2,-8(fp)
    c358:	10000915 	stw	zero,36(r2)
    c35c:	00000a06 	br	c388 <altera_avalon_jtag_uart_timeout+0x94>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
    c360:	e0bffe17 	ldw	r2,-8(fp)
    c364:	10c00917 	ldw	r3,36(r2)
    c368:	00a00034 	movhi	r2,32768
    c36c:	10bfff04 	addi	r2,r2,-4
    c370:	10c00536 	bltu	r2,r3,c388 <altera_avalon_jtag_uart_timeout+0x94>
    sp->host_inactive++;
    c374:	e0bffe17 	ldw	r2,-8(fp)
    c378:	10800917 	ldw	r2,36(r2)
    c37c:	10c00044 	addi	r3,r2,1
    c380:	e0bffe17 	ldw	r2,-8(fp)
    c384:	10c00915 	stw	r3,36(r2)
    c388:	00800074 	movhi	r2,1
    c38c:	108c9304 	addi	r2,r2,12876
    c390:	10800017 	ldw	r2,0(r2)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
    c394:	e037883a 	mov	sp,fp
    c398:	df000017 	ldw	fp,0(sp)
    c39c:	dec00104 	addi	sp,sp,4
    c3a0:	f800283a 	ret

0000c3a4 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
    c3a4:	defffc04 	addi	sp,sp,-16
    c3a8:	df000315 	stw	fp,12(sp)
    c3ac:	df000304 	addi	fp,sp,12
    c3b0:	e13ffd15 	stw	r4,-12(fp)
    c3b4:	e17ffe15 	stw	r5,-8(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
    c3b8:	00000706 	br	c3d8 <altera_avalon_jtag_uart_close+0x34>
    if (flags & O_NONBLOCK) {
    c3bc:	e0bffe17 	ldw	r2,-8(fp)
    c3c0:	1090000c 	andi	r2,r2,16384
    c3c4:	1005003a 	cmpeq	r2,r2,zero
    c3c8:	1000031e 	bne	r2,zero,c3d8 <altera_avalon_jtag_uart_close+0x34>
      return -EWOULDBLOCK; 
    c3cc:	00bffd44 	movi	r2,-11
    c3d0:	e0bfff15 	stw	r2,-4(fp)
    c3d4:	00000b06 	br	c404 <altera_avalon_jtag_uart_close+0x60>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
    c3d8:	e0bffd17 	ldw	r2,-12(fp)
    c3dc:	10c00d17 	ldw	r3,52(r2)
    c3e0:	e0bffd17 	ldw	r2,-12(fp)
    c3e4:	10800c17 	ldw	r2,48(r2)
    c3e8:	18800526 	beq	r3,r2,c400 <altera_avalon_jtag_uart_close+0x5c>
    c3ec:	e0bffd17 	ldw	r2,-12(fp)
    c3f0:	10c00917 	ldw	r3,36(r2)
    c3f4:	e0bffd17 	ldw	r2,-12(fp)
    c3f8:	10800117 	ldw	r2,4(r2)
    c3fc:	18bfef36 	bltu	r3,r2,c3bc <altera_avalon_jtag_uart_close+0x18>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
    c400:	e03fff15 	stw	zero,-4(fp)
    c404:	e0bfff17 	ldw	r2,-4(fp)
}
    c408:	e037883a 	mov	sp,fp
    c40c:	df000017 	ldw	fp,0(sp)
    c410:	dec00104 	addi	sp,sp,4
    c414:	f800283a 	ret

0000c418 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
    c418:	defff804 	addi	sp,sp,-32
    c41c:	df000715 	stw	fp,28(sp)
    c420:	df000704 	addi	fp,sp,28
    c424:	e13ffb15 	stw	r4,-20(fp)
    c428:	e17ffc15 	stw	r5,-16(fp)
    c42c:	e1bffd15 	stw	r6,-12(fp)
  int rc = -ENOTTY;
    c430:	00bff9c4 	movi	r2,-25
    c434:	e0bffa15 	stw	r2,-24(fp)

  switch (req)
    c438:	e0bffc17 	ldw	r2,-16(fp)
    c43c:	e0bfff15 	stw	r2,-4(fp)
    c440:	e0ffff17 	ldw	r3,-4(fp)
    c444:	189a8060 	cmpeqi	r2,r3,27137
    c448:	1000041e 	bne	r2,zero,c45c <altera_avalon_jtag_uart_ioctl+0x44>
    c44c:	e0ffff17 	ldw	r3,-4(fp)
    c450:	189a80a0 	cmpeqi	r2,r3,27138
    c454:	10001b1e 	bne	r2,zero,c4c4 <altera_avalon_jtag_uart_ioctl+0xac>
    c458:	00002706 	br	c4f8 <altera_avalon_jtag_uart_ioctl+0xe0>
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
    c45c:	e0bffb17 	ldw	r2,-20(fp)
    c460:	10c00117 	ldw	r3,4(r2)
    c464:	00a00034 	movhi	r2,32768
    c468:	10bfffc4 	addi	r2,r2,-1
    c46c:	18802226 	beq	r3,r2,c4f8 <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      int timeout = *((int *)arg);
    c470:	e0bffd17 	ldw	r2,-12(fp)
    c474:	10800017 	ldw	r2,0(r2)
    c478:	e0bff915 	stw	r2,-28(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
    c47c:	e0bff917 	ldw	r2,-28(fp)
    c480:	10800090 	cmplti	r2,r2,2
    c484:	1000071e 	bne	r2,zero,c4a4 <altera_avalon_jtag_uart_ioctl+0x8c>
    c488:	e0fff917 	ldw	r3,-28(fp)
    c48c:	00a00034 	movhi	r2,32768
    c490:	10bfffc4 	addi	r2,r2,-1
    c494:	18800326 	beq	r3,r2,c4a4 <altera_avalon_jtag_uart_ioctl+0x8c>
    c498:	e0bff917 	ldw	r2,-28(fp)
    c49c:	e0bffe15 	stw	r2,-8(fp)
    c4a0:	00000306 	br	c4b0 <altera_avalon_jtag_uart_ioctl+0x98>
    c4a4:	00e00034 	movhi	r3,32768
    c4a8:	18ffff84 	addi	r3,r3,-2
    c4ac:	e0fffe15 	stw	r3,-8(fp)
    c4b0:	e0bffb17 	ldw	r2,-20(fp)
    c4b4:	e0fffe17 	ldw	r3,-8(fp)
    c4b8:	10c00115 	stw	r3,4(r2)
      rc = 0;
    c4bc:	e03ffa15 	stw	zero,-24(fp)
    }
    break;
    c4c0:	00000d06 	br	c4f8 <altera_avalon_jtag_uart_ioctl+0xe0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
    c4c4:	e0bffb17 	ldw	r2,-20(fp)
    c4c8:	10c00117 	ldw	r3,4(r2)
    c4cc:	00a00034 	movhi	r2,32768
    c4d0:	10bfffc4 	addi	r2,r2,-1
    c4d4:	18800826 	beq	r3,r2,c4f8 <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
    c4d8:	e13ffd17 	ldw	r4,-12(fp)
    c4dc:	e0bffb17 	ldw	r2,-20(fp)
    c4e0:	10c00917 	ldw	r3,36(r2)
    c4e4:	e0bffb17 	ldw	r2,-20(fp)
    c4e8:	10800117 	ldw	r2,4(r2)
    c4ec:	1885803a 	cmpltu	r2,r3,r2
    c4f0:	20800015 	stw	r2,0(r4)
      rc = 0;
    c4f4:	e03ffa15 	stw	zero,-24(fp)

  default:
    break;
  }

  return rc;
    c4f8:	e0bffa17 	ldw	r2,-24(fp)
}
    c4fc:	e037883a 	mov	sp,fp
    c500:	df000017 	ldw	fp,0(sp)
    c504:	dec00104 	addi	sp,sp,4
    c508:	f800283a 	ret

0000c50c <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
    c50c:	defff204 	addi	sp,sp,-56
    c510:	dfc00d15 	stw	ra,52(sp)
    c514:	df000c15 	stw	fp,48(sp)
    c518:	df000c04 	addi	fp,sp,48
    c51c:	e13ffb15 	stw	r4,-20(fp)
    c520:	e17ffc15 	stw	r5,-16(fp)
    c524:	e1bffd15 	stw	r6,-12(fp)
    c528:	e1fffe15 	stw	r7,-8(fp)
  char * ptr = buffer;
    c52c:	e0bffc17 	ldw	r2,-16(fp)
    c530:	e0bffa15 	stw	r2,-24(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
    c534:	00004806 	br	c658 <altera_avalon_jtag_uart_read+0x14c>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
    c538:	e0bffb17 	ldw	r2,-20(fp)
    c53c:	10800a17 	ldw	r2,40(r2)
    c540:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
    c544:	e0bffb17 	ldw	r2,-20(fp)
    c548:	10800b17 	ldw	r2,44(r2)
    c54c:	e0bff615 	stw	r2,-40(fp)

      if (in >= out)
    c550:	e0fff717 	ldw	r3,-36(fp)
    c554:	e0bff617 	ldw	r2,-40(fp)
    c558:	18800536 	bltu	r3,r2,c570 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
    c55c:	e0bff717 	ldw	r2,-36(fp)
    c560:	e0fff617 	ldw	r3,-40(fp)
    c564:	10c5c83a 	sub	r2,r2,r3
    c568:	e0bff815 	stw	r2,-32(fp)
    c56c:	00000406 	br	c580 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
    c570:	00820004 	movi	r2,2048
    c574:	e0fff617 	ldw	r3,-40(fp)
    c578:	10c5c83a 	sub	r2,r2,r3
    c57c:	e0bff815 	stw	r2,-32(fp)

      if (n == 0)
    c580:	e0bff817 	ldw	r2,-32(fp)
    c584:	1005003a 	cmpeq	r2,r2,zero
    c588:	10001f1e 	bne	r2,zero,c608 <altera_avalon_jtag_uart_read+0xfc>
        break; /* No more data available */

      if (n > space)
    c58c:	e0fffd17 	ldw	r3,-12(fp)
    c590:	e0bff817 	ldw	r2,-32(fp)
    c594:	1880022e 	bgeu	r3,r2,c5a0 <altera_avalon_jtag_uart_read+0x94>
        n = space;
    c598:	e0bffd17 	ldw	r2,-12(fp)
    c59c:	e0bff815 	stw	r2,-32(fp)

      memcpy(ptr, sp->rx_buf + out, n);
    c5a0:	e0bffb17 	ldw	r2,-20(fp)
    c5a4:	10c00e04 	addi	r3,r2,56
    c5a8:	e0bff617 	ldw	r2,-40(fp)
    c5ac:	1887883a 	add	r3,r3,r2
    c5b0:	e0bffa17 	ldw	r2,-24(fp)
    c5b4:	1009883a 	mov	r4,r2
    c5b8:	180b883a 	mov	r5,r3
    c5bc:	e1bff817 	ldw	r6,-32(fp)
    c5c0:	0006f440 	call	6f44 <memcpy>
      ptr   += n;
    c5c4:	e0fff817 	ldw	r3,-32(fp)
    c5c8:	e0bffa17 	ldw	r2,-24(fp)
    c5cc:	10c5883a 	add	r2,r2,r3
    c5d0:	e0bffa15 	stw	r2,-24(fp)
      space -= n;
    c5d4:	e0fffd17 	ldw	r3,-12(fp)
    c5d8:	e0bff817 	ldw	r2,-32(fp)
    c5dc:	1885c83a 	sub	r2,r3,r2
    c5e0:	e0bffd15 	stw	r2,-12(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    c5e4:	e0fff617 	ldw	r3,-40(fp)
    c5e8:	e0bff817 	ldw	r2,-32(fp)
    c5ec:	1885883a 	add	r2,r3,r2
    c5f0:	10c1ffcc 	andi	r3,r2,2047
    c5f4:	e0bffb17 	ldw	r2,-20(fp)
    c5f8:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
    c5fc:	e0bffd17 	ldw	r2,-12(fp)
    c600:	10800048 	cmpgei	r2,r2,1
    c604:	103fcc1e 	bne	r2,zero,c538 <altera_avalon_jtag_uart_read+0x2c>

    /* If we read any data then return it */
    if (ptr != buffer)
    c608:	e0fffa17 	ldw	r3,-24(fp)
    c60c:	e0bffc17 	ldw	r2,-16(fp)
    c610:	1880141e 	bne	r3,r2,c664 <altera_avalon_jtag_uart_read+0x158>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
    c614:	e0bffe17 	ldw	r2,-8(fp)
    c618:	1090000c 	andi	r2,r2,16384
    c61c:	1004c03a 	cmpne	r2,r2,zero
    c620:	1000101e 	bne	r2,zero,c664 <altera_avalon_jtag_uart_read+0x158>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
    c624:	e0bffb17 	ldw	r2,-20(fp)
    c628:	10c00a17 	ldw	r3,40(r2)
    c62c:	e0bff717 	ldw	r2,-36(fp)
    c630:	1880051e 	bne	r3,r2,c648 <altera_avalon_jtag_uart_read+0x13c>
    c634:	e0bffb17 	ldw	r2,-20(fp)
    c638:	10c00917 	ldw	r3,36(r2)
    c63c:	e0bffb17 	ldw	r2,-20(fp)
    c640:	10800117 	ldw	r2,4(r2)
    c644:	18bff736 	bltu	r3,r2,c624 <altera_avalon_jtag_uart_read+0x118>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
    c648:	e0bffb17 	ldw	r2,-20(fp)
    c64c:	10c00a17 	ldw	r3,40(r2)
    c650:	e0bff717 	ldw	r2,-36(fp)
    c654:	18800326 	beq	r3,r2,c664 <altera_avalon_jtag_uart_read+0x158>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
    c658:	e0bffd17 	ldw	r2,-12(fp)
    c65c:	10800048 	cmpgei	r2,r2,1
    c660:	103fb51e 	bne	r2,zero,c538 <altera_avalon_jtag_uart_read+0x2c>
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
    c664:	e0fffa17 	ldw	r3,-24(fp)
    c668:	e0bffc17 	ldw	r2,-16(fp)
    c66c:	18801926 	beq	r3,r2,c6d4 <altera_avalon_jtag_uart_read+0x1c8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    c670:	0005303a 	rdctl	r2,status
    c674:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    c678:	e0fff517 	ldw	r3,-44(fp)
    c67c:	00bfff84 	movi	r2,-2
    c680:	1884703a 	and	r2,r3,r2
    c684:	1001703a 	wrctl	status,r2
  
  return context;
    c688:	e0bff517 	ldw	r2,-44(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
    c68c:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    c690:	e0bffb17 	ldw	r2,-20(fp)
    c694:	10800817 	ldw	r2,32(r2)
    c698:	10c00054 	ori	r3,r2,1
    c69c:	e0bffb17 	ldw	r2,-20(fp)
    c6a0:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    c6a4:	e0bffb17 	ldw	r2,-20(fp)
    c6a8:	10800017 	ldw	r2,0(r2)
    c6ac:	11000104 	addi	r4,r2,4
    c6b0:	e0bffb17 	ldw	r2,-20(fp)
    c6b4:	10800817 	ldw	r2,32(r2)
    c6b8:	1007883a 	mov	r3,r2
    c6bc:	2005883a 	mov	r2,r4
    c6c0:	10c00035 	stwio	r3,0(r2)
    c6c4:	e0bff917 	ldw	r2,-28(fp)
    c6c8:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    c6cc:	e0bff417 	ldw	r2,-48(fp)
    c6d0:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
    c6d4:	e0fffa17 	ldw	r3,-24(fp)
    c6d8:	e0bffc17 	ldw	r2,-16(fp)
    c6dc:	18800526 	beq	r3,r2,c6f4 <altera_avalon_jtag_uart_read+0x1e8>
    return ptr - buffer;
    c6e0:	e0fffa17 	ldw	r3,-24(fp)
    c6e4:	e0bffc17 	ldw	r2,-16(fp)
    c6e8:	1887c83a 	sub	r3,r3,r2
    c6ec:	e0ffff15 	stw	r3,-4(fp)
    c6f0:	00000906 	br	c718 <altera_avalon_jtag_uart_read+0x20c>
  else if (flags & O_NONBLOCK)
    c6f4:	e0bffe17 	ldw	r2,-8(fp)
    c6f8:	1090000c 	andi	r2,r2,16384
    c6fc:	1005003a 	cmpeq	r2,r2,zero
    c700:	1000031e 	bne	r2,zero,c710 <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
    c704:	00bffd44 	movi	r2,-11
    c708:	e0bfff15 	stw	r2,-4(fp)
    c70c:	00000206 	br	c718 <altera_avalon_jtag_uart_read+0x20c>
  else
    return -EIO;
    c710:	00bffec4 	movi	r2,-5
    c714:	e0bfff15 	stw	r2,-4(fp)
    c718:	e0bfff17 	ldw	r2,-4(fp)
}
    c71c:	e037883a 	mov	sp,fp
    c720:	dfc00117 	ldw	ra,4(sp)
    c724:	df000017 	ldw	fp,0(sp)
    c728:	dec00204 	addi	sp,sp,8
    c72c:	f800283a 	ret

0000c730 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
    c730:	defff204 	addi	sp,sp,-56
    c734:	dfc00d15 	stw	ra,52(sp)
    c738:	df000c15 	stw	fp,48(sp)
    c73c:	df000c04 	addi	fp,sp,48
    c740:	e13ffb15 	stw	r4,-20(fp)
    c744:	e17ffc15 	stw	r5,-16(fp)
    c748:	e1bffd15 	stw	r6,-12(fp)
    c74c:	e1fffe15 	stw	r7,-8(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
    c750:	e03ff915 	stw	zero,-28(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
    c754:	e0bffc17 	ldw	r2,-16(fp)
    c758:	e0bff615 	stw	r2,-40(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
    c75c:	00003a06 	br	c848 <altera_avalon_jtag_uart_write+0x118>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
    c760:	e0bffb17 	ldw	r2,-20(fp)
    c764:	10800c17 	ldw	r2,48(r2)
    c768:	e0bffa15 	stw	r2,-24(fp)
      out = sp->tx_out;
    c76c:	e0bffb17 	ldw	r2,-20(fp)
    c770:	10800d17 	ldw	r2,52(r2)
    c774:	e0bff915 	stw	r2,-28(fp)

      if (in < out)
    c778:	e0fffa17 	ldw	r3,-24(fp)
    c77c:	e0bff917 	ldw	r2,-28(fp)
    c780:	1880062e 	bgeu	r3,r2,c79c <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
    c784:	e0fff917 	ldw	r3,-28(fp)
    c788:	e0bffa17 	ldw	r2,-24(fp)
    c78c:	1885c83a 	sub	r2,r3,r2
    c790:	10bfffc4 	addi	r2,r2,-1
    c794:	e0bff815 	stw	r2,-32(fp)
    c798:	00000c06 	br	c7cc <altera_avalon_jtag_uart_write+0x9c>
      else if (out > 0)
    c79c:	e0bff917 	ldw	r2,-28(fp)
    c7a0:	1005003a 	cmpeq	r2,r2,zero
    c7a4:	1000051e 	bne	r2,zero,c7bc <altera_avalon_jtag_uart_write+0x8c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
    c7a8:	00820004 	movi	r2,2048
    c7ac:	e0fffa17 	ldw	r3,-24(fp)
    c7b0:	10c5c83a 	sub	r2,r2,r3
    c7b4:	e0bff815 	stw	r2,-32(fp)
    c7b8:	00000406 	br	c7cc <altera_avalon_jtag_uart_write+0x9c>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
    c7bc:	0081ffc4 	movi	r2,2047
    c7c0:	e0fffa17 	ldw	r3,-24(fp)
    c7c4:	10c5c83a 	sub	r2,r2,r3
    c7c8:	e0bff815 	stw	r2,-32(fp)

      if (n == 0)
    c7cc:	e0bff817 	ldw	r2,-32(fp)
    c7d0:	1005003a 	cmpeq	r2,r2,zero
    c7d4:	10001f1e 	bne	r2,zero,c854 <altera_avalon_jtag_uart_write+0x124>
        break;

      if (n > count)
    c7d8:	e0fffd17 	ldw	r3,-12(fp)
    c7dc:	e0bff817 	ldw	r2,-32(fp)
    c7e0:	1880022e 	bgeu	r3,r2,c7ec <altera_avalon_jtag_uart_write+0xbc>
        n = count;
    c7e4:	e0bffd17 	ldw	r2,-12(fp)
    c7e8:	e0bff815 	stw	r2,-32(fp)

      memcpy(sp->tx_buf + in, ptr, n);
    c7ec:	e0bffb17 	ldw	r2,-20(fp)
    c7f0:	10c20e04 	addi	r3,r2,2104
    c7f4:	e0bffa17 	ldw	r2,-24(fp)
    c7f8:	1885883a 	add	r2,r3,r2
    c7fc:	e0fffc17 	ldw	r3,-16(fp)
    c800:	1009883a 	mov	r4,r2
    c804:	180b883a 	mov	r5,r3
    c808:	e1bff817 	ldw	r6,-32(fp)
    c80c:	0006f440 	call	6f44 <memcpy>
      ptr   += n;
    c810:	e0fff817 	ldw	r3,-32(fp)
    c814:	e0bffc17 	ldw	r2,-16(fp)
    c818:	10c5883a 	add	r2,r2,r3
    c81c:	e0bffc15 	stw	r2,-16(fp)
      count -= n;
    c820:	e0fffd17 	ldw	r3,-12(fp)
    c824:	e0bff817 	ldw	r2,-32(fp)
    c828:	1885c83a 	sub	r2,r3,r2
    c82c:	e0bffd15 	stw	r2,-12(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    c830:	e0fffa17 	ldw	r3,-24(fp)
    c834:	e0bff817 	ldw	r2,-32(fp)
    c838:	1885883a 	add	r2,r3,r2
    c83c:	10c1ffcc 	andi	r3,r2,2047
    c840:	e0bffb17 	ldw	r2,-20(fp)
    c844:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
    c848:	e0bffd17 	ldw	r2,-12(fp)
    c84c:	10800048 	cmpgei	r2,r2,1
    c850:	103fc31e 	bne	r2,zero,c760 <altera_avalon_jtag_uart_write+0x30>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    c854:	0005303a 	rdctl	r2,status
    c858:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    c85c:	e0fff517 	ldw	r3,-44(fp)
    c860:	00bfff84 	movi	r2,-2
    c864:	1884703a 	and	r2,r3,r2
    c868:	1001703a 	wrctl	status,r2
  
  return context;
    c86c:	e0bff517 	ldw	r2,-44(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
    c870:	e0bff715 	stw	r2,-36(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
    c874:	e0bffb17 	ldw	r2,-20(fp)
    c878:	10800817 	ldw	r2,32(r2)
    c87c:	10c00094 	ori	r3,r2,2
    c880:	e0bffb17 	ldw	r2,-20(fp)
    c884:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    c888:	e0bffb17 	ldw	r2,-20(fp)
    c88c:	10800017 	ldw	r2,0(r2)
    c890:	11000104 	addi	r4,r2,4
    c894:	e0bffb17 	ldw	r2,-20(fp)
    c898:	10800817 	ldw	r2,32(r2)
    c89c:	1007883a 	mov	r3,r2
    c8a0:	2005883a 	mov	r2,r4
    c8a4:	10c00035 	stwio	r3,0(r2)
    c8a8:	e0bff717 	ldw	r2,-36(fp)
    c8ac:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    c8b0:	e0bff417 	ldw	r2,-48(fp)
    c8b4:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    c8b8:	e0bffd17 	ldw	r2,-12(fp)
    c8bc:	10800050 	cmplti	r2,r2,1
    c8c0:	1000111e 	bne	r2,zero,c908 <altera_avalon_jtag_uart_write+0x1d8>
    {
      if (flags & O_NONBLOCK)
    c8c4:	e0bffe17 	ldw	r2,-8(fp)
    c8c8:	1090000c 	andi	r2,r2,16384
    c8cc:	1004c03a 	cmpne	r2,r2,zero
    c8d0:	1000101e 	bne	r2,zero,c914 <altera_avalon_jtag_uart_write+0x1e4>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
    c8d4:	e0bffb17 	ldw	r2,-20(fp)
    c8d8:	10c00d17 	ldw	r3,52(r2)
    c8dc:	e0bff917 	ldw	r2,-28(fp)
    c8e0:	1880051e 	bne	r3,r2,c8f8 <altera_avalon_jtag_uart_write+0x1c8>
    c8e4:	e0bffb17 	ldw	r2,-20(fp)
    c8e8:	10c00917 	ldw	r3,36(r2)
    c8ec:	e0bffb17 	ldw	r2,-20(fp)
    c8f0:	10800117 	ldw	r2,4(r2)
    c8f4:	18bff736 	bltu	r3,r2,c8d4 <altera_avalon_jtag_uart_write+0x1a4>
        ;
#endif /* __ucosii__ */

      if (out == sp->tx_out)
    c8f8:	e0bffb17 	ldw	r2,-20(fp)
    c8fc:	10c00d17 	ldw	r3,52(r2)
    c900:	e0bff917 	ldw	r2,-28(fp)
    c904:	18800326 	beq	r3,r2,c914 <altera_avalon_jtag_uart_write+0x1e4>
        break;
    }
  }
  while (count > 0);
    c908:	e0bffd17 	ldw	r2,-12(fp)
    c90c:	10800048 	cmpgei	r2,r2,1
    c910:	103fcd1e 	bne	r2,zero,c848 <altera_avalon_jtag_uart_write+0x118>
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
    c914:	e0fffc17 	ldw	r3,-16(fp)
    c918:	e0bff617 	ldw	r2,-40(fp)
    c91c:	18800526 	beq	r3,r2,c934 <altera_avalon_jtag_uart_write+0x204>
    return ptr - start;
    c920:	e0fffc17 	ldw	r3,-16(fp)
    c924:	e0bff617 	ldw	r2,-40(fp)
    c928:	1887c83a 	sub	r3,r3,r2
    c92c:	e0ffff15 	stw	r3,-4(fp)
    c930:	00000906 	br	c958 <altera_avalon_jtag_uart_write+0x228>
  else if (flags & O_NONBLOCK)
    c934:	e0bffe17 	ldw	r2,-8(fp)
    c938:	1090000c 	andi	r2,r2,16384
    c93c:	1005003a 	cmpeq	r2,r2,zero
    c940:	1000031e 	bne	r2,zero,c950 <altera_avalon_jtag_uart_write+0x220>
    return -EWOULDBLOCK;
    c944:	00bffd44 	movi	r2,-11
    c948:	e0bfff15 	stw	r2,-4(fp)
    c94c:	00000206 	br	c958 <altera_avalon_jtag_uart_write+0x228>
  else
    return -EIO; /* Host not connected */
    c950:	00bffec4 	movi	r2,-5
    c954:	e0bfff15 	stw	r2,-4(fp)
    c958:	e0bfff17 	ldw	r2,-4(fp)
}
    c95c:	e037883a 	mov	sp,fp
    c960:	dfc00117 	ldw	ra,4(sp)
    c964:	df000017 	ldw	fp,0(sp)
    c968:	dec00204 	addi	sp,sp,8
    c96c:	f800283a 	ret

0000c970 <lcd_write_command>:

/* --------------------------------------------------------------------- */

static void lcd_write_command(altera_avalon_lcd_16207_state* sp, 
  unsigned char command)
{
    c970:	defffa04 	addi	sp,sp,-24
    c974:	dfc00515 	stw	ra,20(sp)
    c978:	df000415 	stw	fp,16(sp)
    c97c:	df000404 	addi	fp,sp,16
    c980:	e13ffe15 	stw	r4,-8(fp)
    c984:	e17fff05 	stb	r5,-4(fp)
  unsigned int base = sp->base;
    c988:	e0bffe17 	ldw	r2,-8(fp)
    c98c:	10800017 	ldw	r2,0(r2)
    c990:	e0bffd15 	stw	r2,-12(fp)
  /* We impose a timeout on the driver in case the LCD panel isn't connected.
   * The first time we call this function the timeout is approx 25ms 
   * (assuming 5 cycles per loop and a 200MHz clock).  Obviously systems
   * with slower clocks, or debug builds, or slower memory will take longer.
   */
  int i = 1000000;
    c994:	008003f4 	movhi	r2,15
    c998:	10909004 	addi	r2,r2,16960
    c99c:	e0bffc15 	stw	r2,-16(fp)

  /* Don't bother if the LCD panel didn't work before */
  if (sp->broken)
    c9a0:	e0bffe17 	ldw	r2,-8(fp)
    c9a4:	10800803 	ldbu	r2,32(r2)
    c9a8:	10803fcc 	andi	r2,r2,255
    c9ac:	1080201c 	xori	r2,r2,128
    c9b0:	10bfe004 	addi	r2,r2,-128
    c9b4:	1004c03a 	cmpne	r2,r2,zero
    c9b8:	1000161e 	bne	r2,zero,ca14 <lcd_write_command+0xa4>
    return;

  /* Wait until LCD isn't busy. */
  while (IORD_ALTERA_AVALON_LCD_16207_STATUS(base) & ALTERA_AVALON_LCD_16207_STATUS_BUSY_MSK)
    c9bc:	00000a06 	br	c9e8 <lcd_write_command+0x78>
    if (--i == 0)
    c9c0:	e0bffc17 	ldw	r2,-16(fp)
    c9c4:	10bfffc4 	addi	r2,r2,-1
    c9c8:	e0bffc15 	stw	r2,-16(fp)
    c9cc:	e0bffc17 	ldw	r2,-16(fp)
    c9d0:	1004c03a 	cmpne	r2,r2,zero
    c9d4:	1000041e 	bne	r2,zero,c9e8 <lcd_write_command+0x78>
    {
      sp->broken = 1;
    c9d8:	e0fffe17 	ldw	r3,-8(fp)
    c9dc:	00800044 	movi	r2,1
    c9e0:	18800805 	stb	r2,32(r3)
      return;
    c9e4:	00000b06 	br	ca14 <lcd_write_command+0xa4>
  /* Don't bother if the LCD panel didn't work before */
  if (sp->broken)
    return;

  /* Wait until LCD isn't busy. */
  while (IORD_ALTERA_AVALON_LCD_16207_STATUS(base) & ALTERA_AVALON_LCD_16207_STATUS_BUSY_MSK)
    c9e8:	e0bffd17 	ldw	r2,-12(fp)
    c9ec:	10800104 	addi	r2,r2,4
    c9f0:	10800037 	ldwio	r2,0(r2)
    c9f4:	1080200c 	andi	r2,r2,128
    c9f8:	1004c03a 	cmpne	r2,r2,zero
    c9fc:	103ff01e 	bne	r2,zero,c9c0 <lcd_write_command+0x50>
    }

  /* Despite what it says in the datasheet, the LCD isn't ready to accept
   * a write immediately after it returns BUSY=0.  Wait for 100us more.
   */
  usleep(100);
    ca00:	01001904 	movi	r4,100
    ca04:	000bc380 	call	bc38 <usleep>

  IOWR_ALTERA_AVALON_LCD_16207_COMMAND(base, command);
    ca08:	e0bffd17 	ldw	r2,-12(fp)
    ca0c:	e0ffff03 	ldbu	r3,-4(fp)
    ca10:	10c00035 	stwio	r3,0(r2)
}
    ca14:	e037883a 	mov	sp,fp
    ca18:	dfc00117 	ldw	ra,4(sp)
    ca1c:	df000017 	ldw	fp,0(sp)
    ca20:	dec00204 	addi	sp,sp,8
    ca24:	f800283a 	ret

0000ca28 <lcd_write_data>:

/* --------------------------------------------------------------------- */

static void lcd_write_data(altera_avalon_lcd_16207_state* sp, 
  unsigned char data)
{
    ca28:	defffa04 	addi	sp,sp,-24
    ca2c:	dfc00515 	stw	ra,20(sp)
    ca30:	df000415 	stw	fp,16(sp)
    ca34:	df000404 	addi	fp,sp,16
    ca38:	e13ffe15 	stw	r4,-8(fp)
    ca3c:	e17fff05 	stb	r5,-4(fp)
  unsigned int base = sp->base;
    ca40:	e0bffe17 	ldw	r2,-8(fp)
    ca44:	10800017 	ldw	r2,0(r2)
    ca48:	e0bffd15 	stw	r2,-12(fp)
  /* We impose a timeout on the driver in case the LCD panel isn't connected.
   * The first time we call this function the timeout is approx 25ms 
   * (assuming 5 cycles per loop and a 200MHz clock).  Obviously systems
   * with slower clocks, or debug builds, or slower memory will take longer.
   */
  int i = 1000000;
    ca4c:	008003f4 	movhi	r2,15
    ca50:	10909004 	addi	r2,r2,16960
    ca54:	e0bffc15 	stw	r2,-16(fp)

  /* Don't bother if the LCD panel didn't work before */
  if (sp->broken)
    ca58:	e0bffe17 	ldw	r2,-8(fp)
    ca5c:	10800803 	ldbu	r2,32(r2)
    ca60:	10803fcc 	andi	r2,r2,255
    ca64:	1080201c 	xori	r2,r2,128
    ca68:	10bfe004 	addi	r2,r2,-128
    ca6c:	1004c03a 	cmpne	r2,r2,zero
    ca70:	10001d1e 	bne	r2,zero,cae8 <lcd_write_data+0xc0>
    return;

  /* Wait until LCD isn't busy. */
  while (IORD_ALTERA_AVALON_LCD_16207_STATUS(base) & ALTERA_AVALON_LCD_16207_STATUS_BUSY_MSK)
    ca74:	00000a06 	br	caa0 <lcd_write_data+0x78>
    if (--i == 0)
    ca78:	e0bffc17 	ldw	r2,-16(fp)
    ca7c:	10bfffc4 	addi	r2,r2,-1
    ca80:	e0bffc15 	stw	r2,-16(fp)
    ca84:	e0bffc17 	ldw	r2,-16(fp)
    ca88:	1004c03a 	cmpne	r2,r2,zero
    ca8c:	1000041e 	bne	r2,zero,caa0 <lcd_write_data+0x78>
    {
      sp->broken = 1;
    ca90:	e0fffe17 	ldw	r3,-8(fp)
    ca94:	00800044 	movi	r2,1
    ca98:	18800805 	stb	r2,32(r3)
      return;
    ca9c:	00001206 	br	cae8 <lcd_write_data+0xc0>
  /* Don't bother if the LCD panel didn't work before */
  if (sp->broken)
    return;

  /* Wait until LCD isn't busy. */
  while (IORD_ALTERA_AVALON_LCD_16207_STATUS(base) & ALTERA_AVALON_LCD_16207_STATUS_BUSY_MSK)
    caa0:	e0bffd17 	ldw	r2,-12(fp)
    caa4:	10800104 	addi	r2,r2,4
    caa8:	10800037 	ldwio	r2,0(r2)
    caac:	1080200c 	andi	r2,r2,128
    cab0:	1004c03a 	cmpne	r2,r2,zero
    cab4:	103ff01e 	bne	r2,zero,ca78 <lcd_write_data+0x50>
    }

  /* Despite what it says in the datasheet, the LCD isn't ready to accept
   * a write immediately after it returns BUSY=0.  Wait for 100us more.
   */
  usleep(100);
    cab8:	01001904 	movi	r4,100
    cabc:	000bc380 	call	bc38 <usleep>

  IOWR_ALTERA_AVALON_LCD_16207_DATA(base, data);
    cac0:	e0bffd17 	ldw	r2,-12(fp)
    cac4:	10800204 	addi	r2,r2,8
    cac8:	e0ffff03 	ldbu	r3,-4(fp)
    cacc:	10c00035 	stwio	r3,0(r2)

  sp->address++;
    cad0:	e0bffe17 	ldw	r2,-8(fp)
    cad4:	108008c3 	ldbu	r2,35(r2)
    cad8:	10800044 	addi	r2,r2,1
    cadc:	1007883a 	mov	r3,r2
    cae0:	e0bffe17 	ldw	r2,-8(fp)
    cae4:	10c008c5 	stb	r3,35(r2)
}
    cae8:	e037883a 	mov	sp,fp
    caec:	dfc00117 	ldw	ra,4(sp)
    caf0:	df000017 	ldw	fp,0(sp)
    caf4:	dec00204 	addi	sp,sp,8
    caf8:	f800283a 	ret

0000cafc <lcd_clear_screen>:

/* --------------------------------------------------------------------- */

static void lcd_clear_screen(altera_avalon_lcd_16207_state* sp)
{
    cafc:	defffc04 	addi	sp,sp,-16
    cb00:	dfc00315 	stw	ra,12(sp)
    cb04:	df000215 	stw	fp,8(sp)
    cb08:	df000204 	addi	fp,sp,8
    cb0c:	e13fff15 	stw	r4,-4(fp)
  int y;

  lcd_write_command(sp, LCD_CMD_CLEAR);
    cb10:	e13fff17 	ldw	r4,-4(fp)
    cb14:	01400044 	movi	r5,1
    cb18:	000c9700 	call	c970 <lcd_write_command>

  sp->x = 0;
    cb1c:	e0bfff17 	ldw	r2,-4(fp)
    cb20:	10000845 	stb	zero,33(r2)
  sp->y = 0;
    cb24:	e0bfff17 	ldw	r2,-4(fp)
    cb28:	10000885 	stb	zero,34(r2)
  sp->address = 0;
    cb2c:	e0bfff17 	ldw	r2,-4(fp)
    cb30:	100008c5 	stb	zero,35(r2)

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
    cb34:	e03ffe15 	stw	zero,-8(fp)
    cb38:	00001906 	br	cba0 <lcd_clear_screen+0xa4>
  {
    memset(sp->line[y].data, ' ', sizeof(sp->line[0].data));
    cb3c:	e0bffe17 	ldw	r2,-8(fp)
    cb40:	108018e4 	muli	r2,r2,99
    cb44:	10c01004 	addi	r3,r2,64
    cb48:	e0bfff17 	ldw	r2,-4(fp)
    cb4c:	1889883a 	add	r4,r3,r2
    cb50:	01400804 	movi	r5,32
    cb54:	01801444 	movi	r6,81
    cb58:	00070c40 	call	70c4 <memset>
    memset(sp->line[y].visible, ' ', sizeof(sp->line[0].visible));
    cb5c:	e0bffe17 	ldw	r2,-8(fp)
    cb60:	108018e4 	muli	r2,r2,99
    cb64:	10c00c04 	addi	r3,r2,48
    cb68:	e0bfff17 	ldw	r2,-4(fp)
    cb6c:	1889883a 	add	r4,r3,r2
    cb70:	01400804 	movi	r5,32
    cb74:	01800404 	movi	r6,16
    cb78:	00070c40 	call	70c4 <memset>
    sp->line[y].width = 0;
    cb7c:	e0bffe17 	ldw	r2,-8(fp)
    cb80:	e0ffff17 	ldw	r3,-4(fp)
    cb84:	108018e4 	muli	r2,r2,99
    cb88:	10c5883a 	add	r2,r2,r3
    cb8c:	10802404 	addi	r2,r2,144
    cb90:	10000045 	stb	zero,1(r2)

  sp->x = 0;
  sp->y = 0;
  sp->address = 0;

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
    cb94:	e0bffe17 	ldw	r2,-8(fp)
    cb98:	10800044 	addi	r2,r2,1
    cb9c:	e0bffe15 	stw	r2,-8(fp)
    cba0:	e0bffe17 	ldw	r2,-8(fp)
    cba4:	10800090 	cmplti	r2,r2,2
    cba8:	103fe41e 	bne	r2,zero,cb3c <lcd_clear_screen+0x40>
  {
    memset(sp->line[y].data, ' ', sizeof(sp->line[0].data));
    memset(sp->line[y].visible, ' ', sizeof(sp->line[0].visible));
    sp->line[y].width = 0;
  }
}
    cbac:	e037883a 	mov	sp,fp
    cbb0:	dfc00117 	ldw	ra,4(sp)
    cbb4:	df000017 	ldw	fp,0(sp)
    cbb8:	dec00204 	addi	sp,sp,8
    cbbc:	f800283a 	ret

0000cbc0 <lcd_repaint_screen>:

/* --------------------------------------------------------------------- */

static void lcd_repaint_screen(altera_avalon_lcd_16207_state* sp)
{
    cbc0:	defff604 	addi	sp,sp,-40
    cbc4:	dfc00915 	stw	ra,36(sp)
    cbc8:	df000815 	stw	fp,32(sp)
    cbcc:	dc000715 	stw	r16,28(sp)
    cbd0:	df000704 	addi	fp,sp,28
    cbd4:	e13fff15 	stw	r4,-4(fp)
  /* scrollpos controls how much the lines have scrolled round.  The speed
   * each line scrolls at is controlled by its speed variable - while
   * scrolline lines will wrap at the position set by width
   */

  int scrollpos = sp->scrollpos;
    cbd8:	e0bfff17 	ldw	r2,-4(fp)
    cbdc:	10800943 	ldbu	r2,37(r2)
    cbe0:	10803fcc 	andi	r2,r2,255
    cbe4:	1080201c 	xori	r2,r2,128
    cbe8:	10bfe004 	addi	r2,r2,-128
    cbec:	e0bffc15 	stw	r2,-16(fp)

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
    cbf0:	e03ffe15 	stw	zero,-8(fp)
    cbf4:	00006406 	br	cd88 <lcd_repaint_screen+0x1c8>
  {
    int width  = sp->line[y].width;
    cbf8:	e0bffe17 	ldw	r2,-8(fp)
    cbfc:	e0ffff17 	ldw	r3,-4(fp)
    cc00:	108018e4 	muli	r2,r2,99
    cc04:	10c5883a 	add	r2,r2,r3
    cc08:	10802404 	addi	r2,r2,144
    cc0c:	10800043 	ldbu	r2,1(r2)
    cc10:	10803fcc 	andi	r2,r2,255
    cc14:	1080201c 	xori	r2,r2,128
    cc18:	10bfe004 	addi	r2,r2,-128
    cc1c:	e0bffb15 	stw	r2,-20(fp)
    int offset = (scrollpos * sp->line[y].speed) >> 8;
    cc20:	e0bffe17 	ldw	r2,-8(fp)
    cc24:	e0ffff17 	ldw	r3,-4(fp)
    cc28:	108018e4 	muli	r2,r2,99
    cc2c:	10c5883a 	add	r2,r2,r3
    cc30:	10802404 	addi	r2,r2,144
    cc34:	10800083 	ldbu	r2,2(r2)
    cc38:	10c03fcc 	andi	r3,r2,255
    cc3c:	e0bffc17 	ldw	r2,-16(fp)
    cc40:	1885383a 	mul	r2,r3,r2
    cc44:	1005d23a 	srai	r2,r2,8
    cc48:	e0bffa15 	stw	r2,-24(fp)
    if (offset >= width)
    cc4c:	e0fffa17 	ldw	r3,-24(fp)
    cc50:	e0bffb17 	ldw	r2,-20(fp)
    cc54:	18800116 	blt	r3,r2,cc5c <lcd_repaint_screen+0x9c>
      offset = 0;
    cc58:	e03ffa15 	stw	zero,-24(fp)

    for (x = 0 ; x < ALT_LCD_WIDTH ; x++)
    cc5c:	e03ffd15 	stw	zero,-12(fp)
    cc60:	00004306 	br	cd70 <lcd_repaint_screen+0x1b0>
    {
      char c = sp->line[y].data[(x + offset) % width];
    cc64:	e43ffe17 	ldw	r16,-8(fp)
    cc68:	e0fffd17 	ldw	r3,-12(fp)
    cc6c:	e0bffa17 	ldw	r2,-24(fp)
    cc70:	1889883a 	add	r4,r3,r2
    cc74:	e17ffb17 	ldw	r5,-20(fp)
    cc78:	0001aa40 	call	1aa4 <__modsi3>
    cc7c:	1009883a 	mov	r4,r2
    cc80:	e0ffff17 	ldw	r3,-4(fp)
    cc84:	808018e4 	muli	r2,r16,99
    cc88:	10c5883a 	add	r2,r2,r3
    cc8c:	1105883a 	add	r2,r2,r4
    cc90:	10801004 	addi	r2,r2,64
    cc94:	10800003 	ldbu	r2,0(r2)
    cc98:	e0bff945 	stb	r2,-27(fp)

      /* Writing data takes 40us, so don't do it unless required */
      if (sp->line[y].visible[x] != c)
    cc9c:	e0bffe17 	ldw	r2,-8(fp)
    cca0:	e13ffd17 	ldw	r4,-12(fp)
    cca4:	e0ffff17 	ldw	r3,-4(fp)
    cca8:	108018e4 	muli	r2,r2,99
    ccac:	10c5883a 	add	r2,r2,r3
    ccb0:	1105883a 	add	r2,r2,r4
    ccb4:	10800c04 	addi	r2,r2,48
    ccb8:	10800003 	ldbu	r2,0(r2)
    ccbc:	10c03fcc 	andi	r3,r2,255
    ccc0:	18c0201c 	xori	r3,r3,128
    ccc4:	18ffe004 	addi	r3,r3,-128
    ccc8:	e0bff947 	ldb	r2,-27(fp)
    cccc:	18802526 	beq	r3,r2,cd64 <lcd_repaint_screen+0x1a4>
      {
        unsigned char address = x + colstart[y];
    ccd0:	e0fffe17 	ldw	r3,-8(fp)
    ccd4:	d0a00f04 	addi	r2,gp,-32708
    ccd8:	1885883a 	add	r2,r3,r2
    ccdc:	10800003 	ldbu	r2,0(r2)
    cce0:	1007883a 	mov	r3,r2
    cce4:	e0bffd17 	ldw	r2,-12(fp)
    cce8:	1885883a 	add	r2,r3,r2
    ccec:	e0bff905 	stb	r2,-28(fp)

        if (address != sp->address)
    ccf0:	e0fff903 	ldbu	r3,-28(fp)
    ccf4:	e0bfff17 	ldw	r2,-4(fp)
    ccf8:	108008c3 	ldbu	r2,35(r2)
    ccfc:	10803fcc 	andi	r2,r2,255
    cd00:	1080201c 	xori	r2,r2,128
    cd04:	10bfe004 	addi	r2,r2,-128
    cd08:	18800926 	beq	r3,r2,cd30 <lcd_repaint_screen+0x170>
        {
          lcd_write_command(sp, LCD_CMD_WRITE_DATA | address);
    cd0c:	e0fff903 	ldbu	r3,-28(fp)
    cd10:	00bfe004 	movi	r2,-128
    cd14:	1884b03a 	or	r2,r3,r2
    cd18:	11403fcc 	andi	r5,r2,255
    cd1c:	e13fff17 	ldw	r4,-4(fp)
    cd20:	000c9700 	call	c970 <lcd_write_command>
          sp->address = address;
    cd24:	e0fff903 	ldbu	r3,-28(fp)
    cd28:	e0bfff17 	ldw	r2,-4(fp)
    cd2c:	10c008c5 	stb	r3,35(r2)
        }

        lcd_write_data(sp, c);
    cd30:	e0bff943 	ldbu	r2,-27(fp)
    cd34:	11403fcc 	andi	r5,r2,255
    cd38:	e13fff17 	ldw	r4,-4(fp)
    cd3c:	000ca280 	call	ca28 <lcd_write_data>
        sp->line[y].visible[x] = c;
    cd40:	e0bffe17 	ldw	r2,-8(fp)
    cd44:	e13ffd17 	ldw	r4,-12(fp)
    cd48:	e0ffff17 	ldw	r3,-4(fp)
    cd4c:	108018e4 	muli	r2,r2,99
    cd50:	10c5883a 	add	r2,r2,r3
    cd54:	1105883a 	add	r2,r2,r4
    cd58:	10c00c04 	addi	r3,r2,48
    cd5c:	e0bff943 	ldbu	r2,-27(fp)
    cd60:	18800005 	stb	r2,0(r3)
    int width  = sp->line[y].width;
    int offset = (scrollpos * sp->line[y].speed) >> 8;
    if (offset >= width)
      offset = 0;

    for (x = 0 ; x < ALT_LCD_WIDTH ; x++)
    cd64:	e0bffd17 	ldw	r2,-12(fp)
    cd68:	10800044 	addi	r2,r2,1
    cd6c:	e0bffd15 	stw	r2,-12(fp)
    cd70:	e0bffd17 	ldw	r2,-12(fp)
    cd74:	10800410 	cmplti	r2,r2,16
    cd78:	103fba1e 	bne	r2,zero,cc64 <lcd_repaint_screen+0xa4>
   * scrolline lines will wrap at the position set by width
   */

  int scrollpos = sp->scrollpos;

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
    cd7c:	e0bffe17 	ldw	r2,-8(fp)
    cd80:	10800044 	addi	r2,r2,1
    cd84:	e0bffe15 	stw	r2,-8(fp)
    cd88:	e0bffe17 	ldw	r2,-8(fp)
    cd8c:	10800090 	cmplti	r2,r2,2
    cd90:	103f991e 	bne	r2,zero,cbf8 <lcd_repaint_screen+0x38>
        lcd_write_data(sp, c);
        sp->line[y].visible[x] = c;
      }
    }
  }
}
    cd94:	e037883a 	mov	sp,fp
    cd98:	dfc00217 	ldw	ra,8(sp)
    cd9c:	df000117 	ldw	fp,4(sp)
    cda0:	dc000017 	ldw	r16,0(sp)
    cda4:	dec00304 	addi	sp,sp,12
    cda8:	f800283a 	ret

0000cdac <lcd_scroll_up>:

/* --------------------------------------------------------------------- */

static void lcd_scroll_up(altera_avalon_lcd_16207_state* sp)
{
    cdac:	defffc04 	addi	sp,sp,-16
    cdb0:	dfc00315 	stw	ra,12(sp)
    cdb4:	df000215 	stw	fp,8(sp)
    cdb8:	df000204 	addi	fp,sp,8
    cdbc:	e13fff15 	stw	r4,-4(fp)
  int y;

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
    cdc0:	e03ffe15 	stw	zero,-8(fp)
    cdc4:	00001d06 	br	ce3c <lcd_scroll_up+0x90>
  {
    if (y < ALT_LCD_HEIGHT-1)
    cdc8:	e0bffe17 	ldw	r2,-8(fp)
    cdcc:	10800048 	cmpgei	r2,r2,1
    cdd0:	10000f1e 	bne	r2,zero,ce10 <lcd_scroll_up+0x64>
      memcpy(sp->line[y].data, sp->line[y+1].data, ALT_LCD_VIRTUAL_WIDTH);
    cdd4:	e0bffe17 	ldw	r2,-8(fp)
    cdd8:	108018e4 	muli	r2,r2,99
    cddc:	10c01004 	addi	r3,r2,64
    cde0:	e0bfff17 	ldw	r2,-4(fp)
    cde4:	1889883a 	add	r4,r3,r2
    cde8:	e0bffe17 	ldw	r2,-8(fp)
    cdec:	10800044 	addi	r2,r2,1
    cdf0:	108018e4 	muli	r2,r2,99
    cdf4:	10c01004 	addi	r3,r2,64
    cdf8:	e0bfff17 	ldw	r2,-4(fp)
    cdfc:	1885883a 	add	r2,r3,r2
    ce00:	100b883a 	mov	r5,r2
    ce04:	01801404 	movi	r6,80
    ce08:	0006f440 	call	6f44 <memcpy>
    ce0c:	00000806 	br	ce30 <lcd_scroll_up+0x84>
    else
      memset(sp->line[y].data, ' ', ALT_LCD_VIRTUAL_WIDTH);
    ce10:	e0bffe17 	ldw	r2,-8(fp)
    ce14:	108018e4 	muli	r2,r2,99
    ce18:	10c01004 	addi	r3,r2,64
    ce1c:	e0bfff17 	ldw	r2,-4(fp)
    ce20:	1889883a 	add	r4,r3,r2
    ce24:	01400804 	movi	r5,32
    ce28:	01801404 	movi	r6,80
    ce2c:	00070c40 	call	70c4 <memset>

static void lcd_scroll_up(altera_avalon_lcd_16207_state* sp)
{
  int y;

  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
    ce30:	e0bffe17 	ldw	r2,-8(fp)
    ce34:	10800044 	addi	r2,r2,1
    ce38:	e0bffe15 	stw	r2,-8(fp)
    ce3c:	e0bffe17 	ldw	r2,-8(fp)
    ce40:	10800090 	cmplti	r2,r2,2
    ce44:	103fe01e 	bne	r2,zero,cdc8 <lcd_scroll_up+0x1c>
      memcpy(sp->line[y].data, sp->line[y+1].data, ALT_LCD_VIRTUAL_WIDTH);
    else
      memset(sp->line[y].data, ' ', ALT_LCD_VIRTUAL_WIDTH);
  }

  sp->y--;
    ce48:	e0bfff17 	ldw	r2,-4(fp)
    ce4c:	10800883 	ldbu	r2,34(r2)
    ce50:	10bfffc4 	addi	r2,r2,-1
    ce54:	1007883a 	mov	r3,r2
    ce58:	e0bfff17 	ldw	r2,-4(fp)
    ce5c:	10c00885 	stb	r3,34(r2)
}
    ce60:	e037883a 	mov	sp,fp
    ce64:	dfc00117 	ldw	ra,4(sp)
    ce68:	df000017 	ldw	fp,0(sp)
    ce6c:	dec00204 	addi	sp,sp,8
    ce70:	f800283a 	ret

0000ce74 <lcd_handle_escape>:

/* --------------------------------------------------------------------- */

static void lcd_handle_escape(altera_avalon_lcd_16207_state* sp, char c)
{
    ce74:	defff804 	addi	sp,sp,-32
    ce78:	dfc00715 	stw	ra,28(sp)
    ce7c:	df000615 	stw	fp,24(sp)
    ce80:	df000604 	addi	fp,sp,24
    ce84:	e13ffd15 	stw	r4,-12(fp)
    ce88:	e17ffe05 	stb	r5,-8(fp)
  int parm1 = 0, parm2 = 0;
    ce8c:	e03ffc15 	stw	zero,-16(fp)
    ce90:	e03ffb15 	stw	zero,-20(fp)

  if (sp->escape[0] == '[')
    ce94:	e0bffd17 	ldw	r2,-12(fp)
    ce98:	10800a03 	ldbu	r2,40(r2)
    ce9c:	10803fcc 	andi	r2,r2,255
    cea0:	1080201c 	xori	r2,r2,128
    cea4:	10bfe004 	addi	r2,r2,-128
    cea8:	108016d8 	cmpnei	r2,r2,91
    ceac:	1000491e 	bne	r2,zero,cfd4 <lcd_handle_escape+0x160>
  {
    char * ptr = sp->escape+1;
    ceb0:	e0bffd17 	ldw	r2,-12(fp)
    ceb4:	10800a04 	addi	r2,r2,40
    ceb8:	10800044 	addi	r2,r2,1
    cebc:	e0bffa15 	stw	r2,-24(fp)
    while (isdigit(*ptr))
    cec0:	00000d06 	br	cef8 <lcd_handle_escape+0x84>
      parm1 = (parm1 * 10) + (*ptr++ - '0');
    cec4:	e0bffc17 	ldw	r2,-16(fp)
    cec8:	10c002a4 	muli	r3,r2,10
    cecc:	e0bffa17 	ldw	r2,-24(fp)
    ced0:	10800003 	ldbu	r2,0(r2)
    ced4:	10803fcc 	andi	r2,r2,255
    ced8:	1080201c 	xori	r2,r2,128
    cedc:	10bfe004 	addi	r2,r2,-128
    cee0:	1885883a 	add	r2,r3,r2
    cee4:	10bff404 	addi	r2,r2,-48
    cee8:	e0bffc15 	stw	r2,-16(fp)
    ceec:	e0bffa17 	ldw	r2,-24(fp)
    cef0:	10800044 	addi	r2,r2,1
    cef4:	e0bffa15 	stw	r2,-24(fp)
  int parm1 = 0, parm2 = 0;

  if (sp->escape[0] == '[')
  {
    char * ptr = sp->escape+1;
    while (isdigit(*ptr))
    cef8:	e0bffa17 	ldw	r2,-24(fp)
    cefc:	10800003 	ldbu	r2,0(r2)
    cf00:	10803fcc 	andi	r2,r2,255
    cf04:	1080201c 	xori	r2,r2,128
    cf08:	10bfe004 	addi	r2,r2,-128
    cf0c:	1007883a 	mov	r3,r2
    cf10:	00800074 	movhi	r2,1
    cf14:	10853c04 	addi	r2,r2,5360
    cf18:	10800017 	ldw	r2,0(r2)
    cf1c:	1885883a 	add	r2,r3,r2
    cf20:	10800003 	ldbu	r2,0(r2)
    cf24:	10803fcc 	andi	r2,r2,255
    cf28:	1080010c 	andi	r2,r2,4
    cf2c:	1004c03a 	cmpne	r2,r2,zero
    cf30:	103fe41e 	bne	r2,zero,cec4 <lcd_handle_escape+0x50>
      parm1 = (parm1 * 10) + (*ptr++ - '0');

    if (*ptr == ';')
    cf34:	e0bffa17 	ldw	r2,-24(fp)
    cf38:	10800003 	ldbu	r2,0(r2)
    cf3c:	10803fcc 	andi	r2,r2,255
    cf40:	1080201c 	xori	r2,r2,128
    cf44:	10bfe004 	addi	r2,r2,-128
    cf48:	10800ed8 	cmpnei	r2,r2,59
    cf4c:	1000231e 	bne	r2,zero,cfdc <lcd_handle_escape+0x168>
    {
      ptr++;
    cf50:	e0bffa17 	ldw	r2,-24(fp)
    cf54:	10800044 	addi	r2,r2,1
    cf58:	e0bffa15 	stw	r2,-24(fp)
      while (isdigit(*ptr))
    cf5c:	00000d06 	br	cf94 <lcd_handle_escape+0x120>
        parm2 = (parm2 * 10) + (*ptr++ - '0');
    cf60:	e0bffb17 	ldw	r2,-20(fp)
    cf64:	10c002a4 	muli	r3,r2,10
    cf68:	e0bffa17 	ldw	r2,-24(fp)
    cf6c:	10800003 	ldbu	r2,0(r2)
    cf70:	10803fcc 	andi	r2,r2,255
    cf74:	1080201c 	xori	r2,r2,128
    cf78:	10bfe004 	addi	r2,r2,-128
    cf7c:	1885883a 	add	r2,r3,r2
    cf80:	10bff404 	addi	r2,r2,-48
    cf84:	e0bffb15 	stw	r2,-20(fp)
    cf88:	e0bffa17 	ldw	r2,-24(fp)
    cf8c:	10800044 	addi	r2,r2,1
    cf90:	e0bffa15 	stw	r2,-24(fp)
      parm1 = (parm1 * 10) + (*ptr++ - '0');

    if (*ptr == ';')
    {
      ptr++;
      while (isdigit(*ptr))
    cf94:	e0bffa17 	ldw	r2,-24(fp)
    cf98:	10800003 	ldbu	r2,0(r2)
    cf9c:	10803fcc 	andi	r2,r2,255
    cfa0:	1080201c 	xori	r2,r2,128
    cfa4:	10bfe004 	addi	r2,r2,-128
    cfa8:	1007883a 	mov	r3,r2
    cfac:	00800074 	movhi	r2,1
    cfb0:	10853c04 	addi	r2,r2,5360
    cfb4:	10800017 	ldw	r2,0(r2)
    cfb8:	1885883a 	add	r2,r3,r2
    cfbc:	10800003 	ldbu	r2,0(r2)
    cfc0:	10803fcc 	andi	r2,r2,255
    cfc4:	1080010c 	andi	r2,r2,4
    cfc8:	1004c03a 	cmpne	r2,r2,zero
    cfcc:	103fe41e 	bne	r2,zero,cf60 <lcd_handle_escape+0xec>
    cfd0:	00000206 	br	cfdc <lcd_handle_escape+0x168>
        parm2 = (parm2 * 10) + (*ptr++ - '0');
    }
  }
  else
    parm1 = -1;
    cfd4:	00bfffc4 	movi	r2,-1
    cfd8:	e0bffc15 	stw	r2,-16(fp)

  switch (c)
    cfdc:	e0bffe07 	ldb	r2,-8(fp)
    cfe0:	e0bfff15 	stw	r2,-4(fp)
    cfe4:	e0ffff17 	ldw	r3,-4(fp)
    cfe8:	188012a0 	cmpeqi	r2,r3,74
    cfec:	10002f1e 	bne	r2,zero,d0ac <lcd_handle_escape+0x238>
    cff0:	e0ffff17 	ldw	r3,-4(fp)
    cff4:	188012c8 	cmpgei	r2,r3,75
    cff8:	1000041e 	bne	r2,zero,d00c <lcd_handle_escape+0x198>
    cffc:	e0ffff17 	ldw	r3,-4(fp)
    d000:	18801220 	cmpeqi	r2,r3,72
    d004:	1000081e 	bne	r2,zero,d028 <lcd_handle_escape+0x1b4>
    d008:	00004906 	br	d130 <lcd_handle_escape+0x2bc>
    d00c:	e0ffff17 	ldw	r3,-4(fp)
    d010:	188012e0 	cmpeqi	r2,r3,75
    d014:	10002b1e 	bne	r2,zero,d0c4 <lcd_handle_escape+0x250>
    d018:	e0ffff17 	ldw	r3,-4(fp)
    d01c:	188019a0 	cmpeqi	r2,r3,102
    d020:	1000011e 	bne	r2,zero,d028 <lcd_handle_escape+0x1b4>
    d024:	00004206 	br	d130 <lcd_handle_escape+0x2bc>
  {
  case 'H': /* ESC '[' <y> ';' <x> 'H'  : Move cursor to location */
  case 'f': /* Same as above */
    if (parm2 > 0)
    d028:	e0bffb17 	ldw	r2,-20(fp)
    d02c:	10800050 	cmplti	r2,r2,1
    d030:	1000051e 	bne	r2,zero,d048 <lcd_handle_escape+0x1d4>
      sp->x = parm2 - 1;
    d034:	e0bffb17 	ldw	r2,-20(fp)
    d038:	10bfffc4 	addi	r2,r2,-1
    d03c:	1007883a 	mov	r3,r2
    d040:	e0bffd17 	ldw	r2,-12(fp)
    d044:	10c00845 	stb	r3,33(r2)
    if (parm1 > 0)
    d048:	e0bffc17 	ldw	r2,-16(fp)
    d04c:	10800050 	cmplti	r2,r2,1
    d050:	1000371e 	bne	r2,zero,d130 <lcd_handle_escape+0x2bc>
    {
      sp->y = parm1 - 1;
    d054:	e0bffc17 	ldw	r2,-16(fp)
    d058:	10bfffc4 	addi	r2,r2,-1
    d05c:	1007883a 	mov	r3,r2
    d060:	e0bffd17 	ldw	r2,-12(fp)
    d064:	10c00885 	stb	r3,34(r2)
      if (sp->y > ALT_LCD_HEIGHT * 2)
    d068:	e0bffd17 	ldw	r2,-12(fp)
    d06c:	10800883 	ldbu	r2,34(r2)
    d070:	10803fcc 	andi	r2,r2,255
    d074:	10800170 	cmpltui	r2,r2,5
    d078:	1000061e 	bne	r2,zero,d094 <lcd_handle_escape+0x220>
        sp->y = ALT_LCD_HEIGHT * 2;
    d07c:	e0fffd17 	ldw	r3,-12(fp)
    d080:	00800104 	movi	r2,4
    d084:	18800885 	stb	r2,34(r3)
      while (sp->y > ALT_LCD_HEIGHT)
    d088:	00000206 	br	d094 <lcd_handle_escape+0x220>
        lcd_scroll_up(sp);
    d08c:	e13ffd17 	ldw	r4,-12(fp)
    d090:	000cdac0 	call	cdac <lcd_scroll_up>
    if (parm1 > 0)
    {
      sp->y = parm1 - 1;
      if (sp->y > ALT_LCD_HEIGHT * 2)
        sp->y = ALT_LCD_HEIGHT * 2;
      while (sp->y > ALT_LCD_HEIGHT)
    d094:	e0bffd17 	ldw	r2,-12(fp)
    d098:	10800883 	ldbu	r2,34(r2)
    d09c:	10803fcc 	andi	r2,r2,255
    d0a0:	108000e8 	cmpgeui	r2,r2,3
    d0a4:	103ff91e 	bne	r2,zero,d08c <lcd_handle_escape+0x218>
        lcd_scroll_up(sp);
    }
    break;
    d0a8:	00002106 	br	d130 <lcd_handle_escape+0x2bc>
    /*   ESC J      is clear to beginning of line    [unimplemented]
     *   ESC [ 0 J  is clear to bottom of screen     [unimplemented]
     *   ESC [ 1 J  is clear to beginning of screen  [unimplemented]
     *   ESC [ 2 J  is clear screen
     */
    if (parm1 == 2)
    d0ac:	e0bffc17 	ldw	r2,-16(fp)
    d0b0:	10800098 	cmpnei	r2,r2,2
    d0b4:	10001e1e 	bne	r2,zero,d130 <lcd_handle_escape+0x2bc>
      lcd_clear_screen(sp);
    d0b8:	e13ffd17 	ldw	r4,-12(fp)
    d0bc:	000cafc0 	call	cafc <lcd_clear_screen>
    break;
    d0c0:	00001b06 	br	d130 <lcd_handle_escape+0x2bc>
    /*   ESC K      is clear to end of line
     *   ESC [ 0 K  is clear to end of line
     *   ESC [ 1 K  is clear to beginning of line    [unimplemented]
     *   ESC [ 2 K  is clear line                    [unimplemented]
     */
    if (parm1 < 1)
    d0c4:	e0bffc17 	ldw	r2,-16(fp)
    d0c8:	10800048 	cmpgei	r2,r2,1
    d0cc:	1000181e 	bne	r2,zero,d130 <lcd_handle_escape+0x2bc>
    {
      if (sp->x < ALT_LCD_VIRTUAL_WIDTH)
    d0d0:	e0bffd17 	ldw	r2,-12(fp)
    d0d4:	10800843 	ldbu	r2,33(r2)
    d0d8:	10803fcc 	andi	r2,r2,255
    d0dc:	10801428 	cmpgeui	r2,r2,80
    d0e0:	1000131e 	bne	r2,zero,d130 <lcd_handle_escape+0x2bc>
        memset(sp->line[sp->y].data + sp->x, ' ', ALT_LCD_VIRTUAL_WIDTH - sp->x);
    d0e4:	e0bffd17 	ldw	r2,-12(fp)
    d0e8:	10800883 	ldbu	r2,34(r2)
    d0ec:	10803fcc 	andi	r2,r2,255
    d0f0:	108018e4 	muli	r2,r2,99
    d0f4:	10c01004 	addi	r3,r2,64
    d0f8:	e0bffd17 	ldw	r2,-12(fp)
    d0fc:	1887883a 	add	r3,r3,r2
    d100:	e0bffd17 	ldw	r2,-12(fp)
    d104:	10800843 	ldbu	r2,33(r2)
    d108:	10803fcc 	andi	r2,r2,255
    d10c:	1889883a 	add	r4,r3,r2
    d110:	e0bffd17 	ldw	r2,-12(fp)
    d114:	10800843 	ldbu	r2,33(r2)
    d118:	10c03fcc 	andi	r3,r2,255
    d11c:	00801404 	movi	r2,80
    d120:	10c5c83a 	sub	r2,r2,r3
    d124:	100d883a 	mov	r6,r2
    d128:	01400804 	movi	r5,32
    d12c:	00070c40 	call	70c4 <memset>
    }
    break;
  }
}
    d130:	e037883a 	mov	sp,fp
    d134:	dfc00117 	ldw	ra,4(sp)
    d138:	df000017 	ldw	fp,0(sp)
    d13c:	dec00204 	addi	sp,sp,8
    d140:	f800283a 	ret

0000d144 <altera_avalon_lcd_16207_write>:

/* --------------------------------------------------------------------- */

int altera_avalon_lcd_16207_write(altera_avalon_lcd_16207_state* sp, 
  const char* ptr, int len, int flags)
{
    d144:	defff204 	addi	sp,sp,-56
    d148:	dfc00d15 	stw	ra,52(sp)
    d14c:	df000c15 	stw	fp,48(sp)
    d150:	dc000b15 	stw	r16,44(sp)
    d154:	df000b04 	addi	fp,sp,44
    d158:	e13ffc15 	stw	r4,-16(fp)
    d15c:	e17ffd15 	stw	r5,-12(fp)
    d160:	e1bffe15 	stw	r6,-8(fp)
    d164:	e1ffff15 	stw	r7,-4(fp)
  const char* end = ptr + len;
    d168:	e0bffe17 	ldw	r2,-8(fp)
    d16c:	1007883a 	mov	r3,r2
    d170:	e0bffd17 	ldw	r2,-12(fp)
    d174:	10c5883a 	add	r2,r2,r3
    d178:	e0bffb15 	stw	r2,-20(fp)

  ALT_SEM_PEND (sp->write_lock, 0);

  /* Tell the routine which is called off the timer interrupt that the
   * foreground routines are active so it must not repaint the display. */
  sp->active = 1;
    d17c:	e0fffc17 	ldw	r3,-16(fp)
    d180:	00800044 	movi	r2,1
    d184:	188009c5 	stb	r2,39(r3)

  for ( ; ptr < end ; ptr++)
    d188:	0000a206 	br	d414 <altera_avalon_lcd_16207_write+0x2d0>
  {
    char c = *ptr;
    d18c:	e0bffd17 	ldw	r2,-12(fp)
    d190:	10800003 	ldbu	r2,0(r2)
    d194:	e0bff805 	stb	r2,-32(fp)

    if (sp->esccount >= 0)
    d198:	e0bffc17 	ldw	r2,-16(fp)
    d19c:	10800903 	ldbu	r2,36(r2)
    d1a0:	10803fcc 	andi	r2,r2,255
    d1a4:	1080201c 	xori	r2,r2,128
    d1a8:	10bfe004 	addi	r2,r2,-128
    d1ac:	1004803a 	cmplt	r2,r2,zero
    d1b0:	10003b1e 	bne	r2,zero,d2a0 <altera_avalon_lcd_16207_write+0x15c>
    {
      unsigned int esccount = sp->esccount;
    d1b4:	e0bffc17 	ldw	r2,-16(fp)
    d1b8:	10800903 	ldbu	r2,36(r2)
    d1bc:	10803fcc 	andi	r2,r2,255
    d1c0:	1080201c 	xori	r2,r2,128
    d1c4:	10bfe004 	addi	r2,r2,-128
    d1c8:	e0bff715 	stw	r2,-36(fp)

      /* Single character escape sequences can end with any character
       * Multi character escape sequences start with '[' and contain
       * digits and semicolons before terminating
       */
      if ((esccount == 0 && c != '[') ||
    d1cc:	e0bff717 	ldw	r2,-36(fp)
    d1d0:	1004c03a 	cmpne	r2,r2,zero
    d1d4:	1000031e 	bne	r2,zero,d1e4 <altera_avalon_lcd_16207_write+0xa0>
    d1d8:	e0bff807 	ldb	r2,-32(fp)
    d1dc:	108016d8 	cmpnei	r2,r2,91
    d1e0:	1000111e 	bne	r2,zero,d228 <altera_avalon_lcd_16207_write+0xe4>
    d1e4:	e0bff717 	ldw	r2,-36(fp)
    d1e8:	1005003a 	cmpeq	r2,r2,zero
    d1ec:	10001a1e 	bne	r2,zero,d258 <altera_avalon_lcd_16207_write+0x114>
    d1f0:	e0bff807 	ldb	r2,-32(fp)
    d1f4:	1007883a 	mov	r3,r2
    d1f8:	00800074 	movhi	r2,1
    d1fc:	10853c04 	addi	r2,r2,5360
    d200:	10800017 	ldw	r2,0(r2)
    d204:	1885883a 	add	r2,r3,r2
    d208:	10800003 	ldbu	r2,0(r2)
    d20c:	10803fcc 	andi	r2,r2,255
    d210:	1080010c 	andi	r2,r2,4
    d214:	1004c03a 	cmpne	r2,r2,zero
    d218:	10000f1e 	bne	r2,zero,d258 <altera_avalon_lcd_16207_write+0x114>
    d21c:	e0bff807 	ldb	r2,-32(fp)
    d220:	10800ee0 	cmpeqi	r2,r2,59
    d224:	10000c1e 	bne	r2,zero,d258 <altera_avalon_lcd_16207_write+0x114>
          (esccount > 0 && !isdigit(c) && c != ';'))
      {
        sp->escape[esccount] = 0;
    d228:	e0fff717 	ldw	r3,-36(fp)
    d22c:	e0bffc17 	ldw	r2,-16(fp)
    d230:	1885883a 	add	r2,r3,r2
    d234:	10800a04 	addi	r2,r2,40
    d238:	10000005 	stb	zero,0(r2)

        lcd_handle_escape(sp, c);
    d23c:	e17ff807 	ldb	r5,-32(fp)
    d240:	e13ffc17 	ldw	r4,-16(fp)
    d244:	000ce740 	call	ce74 <lcd_handle_escape>

        sp->esccount = -1;
    d248:	e0fffc17 	ldw	r3,-16(fp)
    d24c:	00bfffc4 	movi	r2,-1
    d250:	18800905 	stb	r2,36(r3)

      /* Single character escape sequences can end with any character
       * Multi character escape sequences start with '[' and contain
       * digits and semicolons before terminating
       */
      if ((esccount == 0 && c != '[') ||
    d254:	00006c06 	br	d408 <altera_avalon_lcd_16207_write+0x2c4>

        lcd_handle_escape(sp, c);

        sp->esccount = -1;
      }
      else if (sp->esccount < sizeof(sp->escape)-1)
    d258:	e0bffc17 	ldw	r2,-16(fp)
    d25c:	10800903 	ldbu	r2,36(r2)
    d260:	10803fcc 	andi	r2,r2,255
    d264:	108001e8 	cmpgeui	r2,r2,7
    d268:	1000671e 	bne	r2,zero,d408 <altera_avalon_lcd_16207_write+0x2c4>
      {
        sp->escape[esccount] = c;
    d26c:	e0fff717 	ldw	r3,-36(fp)
    d270:	e0bffc17 	ldw	r2,-16(fp)
    d274:	1885883a 	add	r2,r3,r2
    d278:	10c00a04 	addi	r3,r2,40
    d27c:	e0bff803 	ldbu	r2,-32(fp)
    d280:	18800005 	stb	r2,0(r3)
        sp->esccount++;
    d284:	e0bffc17 	ldw	r2,-16(fp)
    d288:	10800903 	ldbu	r2,36(r2)
    d28c:	10800044 	addi	r2,r2,1
    d290:	1007883a 	mov	r3,r2
    d294:	e0bffc17 	ldw	r2,-16(fp)
    d298:	10c00905 	stb	r3,36(r2)
    d29c:	00005a06 	br	d408 <altera_avalon_lcd_16207_write+0x2c4>
      }
    }
    else if (c == 27) /* ESC */
    d2a0:	e0bff807 	ldb	r2,-32(fp)
    d2a4:	108006d8 	cmpnei	r2,r2,27
    d2a8:	1000031e 	bne	r2,zero,d2b8 <altera_avalon_lcd_16207_write+0x174>
    {
      sp->esccount = 0;
    d2ac:	e0bffc17 	ldw	r2,-16(fp)
    d2b0:	10000905 	stb	zero,36(r2)
    d2b4:	00005406 	br	d408 <altera_avalon_lcd_16207_write+0x2c4>
    }
    else if (c == '\r')
    d2b8:	e0bff807 	ldb	r2,-32(fp)
    d2bc:	10800358 	cmpnei	r2,r2,13
    d2c0:	1000031e 	bne	r2,zero,d2d0 <altera_avalon_lcd_16207_write+0x18c>
    {
      sp->x = 0;
    d2c4:	e0bffc17 	ldw	r2,-16(fp)
    d2c8:	10000845 	stb	zero,33(r2)
    d2cc:	00004e06 	br	d408 <altera_avalon_lcd_16207_write+0x2c4>
    }
    else if (c == '\n')
    d2d0:	e0bff807 	ldb	r2,-32(fp)
    d2d4:	10800298 	cmpnei	r2,r2,10
    d2d8:	1000101e 	bne	r2,zero,d31c <altera_avalon_lcd_16207_write+0x1d8>
    {
      sp->x = 0;
    d2dc:	e0bffc17 	ldw	r2,-16(fp)
    d2e0:	10000845 	stb	zero,33(r2)
      sp->y++;
    d2e4:	e0bffc17 	ldw	r2,-16(fp)
    d2e8:	10800883 	ldbu	r2,34(r2)
    d2ec:	10800044 	addi	r2,r2,1
    d2f0:	1007883a 	mov	r3,r2
    d2f4:	e0bffc17 	ldw	r2,-16(fp)
    d2f8:	10c00885 	stb	r3,34(r2)

      /* Let the cursor sit at X=0, Y=HEIGHT without scrolling so the user
       * can print two lines of data without losing one.
       */
      if (sp->y > ALT_LCD_HEIGHT)
    d2fc:	e0bffc17 	ldw	r2,-16(fp)
    d300:	10800883 	ldbu	r2,34(r2)
    d304:	10803fcc 	andi	r2,r2,255
    d308:	108000f0 	cmpltui	r2,r2,3
    d30c:	10003e1e 	bne	r2,zero,d408 <altera_avalon_lcd_16207_write+0x2c4>
        lcd_scroll_up(sp);
    d310:	e13ffc17 	ldw	r4,-16(fp)
    d314:	000cdac0 	call	cdac <lcd_scroll_up>
    d318:	00003b06 	br	d408 <altera_avalon_lcd_16207_write+0x2c4>
    }
    else if (c == '\b')
    d31c:	e0bff807 	ldb	r2,-32(fp)
    d320:	10800218 	cmpnei	r2,r2,8
    d324:	10000c1e 	bne	r2,zero,d358 <altera_avalon_lcd_16207_write+0x214>
    {
      if (sp->x > 0)
    d328:	e0bffc17 	ldw	r2,-16(fp)
    d32c:	10800843 	ldbu	r2,33(r2)
    d330:	10803fcc 	andi	r2,r2,255
    d334:	1005003a 	cmpeq	r2,r2,zero
    d338:	1000331e 	bne	r2,zero,d408 <altera_avalon_lcd_16207_write+0x2c4>
        sp->x--;
    d33c:	e0bffc17 	ldw	r2,-16(fp)
    d340:	10800843 	ldbu	r2,33(r2)
    d344:	10bfffc4 	addi	r2,r2,-1
    d348:	1007883a 	mov	r3,r2
    d34c:	e0bffc17 	ldw	r2,-16(fp)
    d350:	10c00845 	stb	r3,33(r2)
    d354:	00002c06 	br	d408 <altera_avalon_lcd_16207_write+0x2c4>
    }
    else if (isprint(c))
    d358:	e0bff807 	ldb	r2,-32(fp)
    d35c:	1007883a 	mov	r3,r2
    d360:	00800074 	movhi	r2,1
    d364:	10853c04 	addi	r2,r2,5360
    d368:	10800017 	ldw	r2,0(r2)
    d36c:	1885883a 	add	r2,r3,r2
    d370:	10800003 	ldbu	r2,0(r2)
    d374:	10803fcc 	andi	r2,r2,255
    d378:	1080201c 	xori	r2,r2,128
    d37c:	10bfe004 	addi	r2,r2,-128
    d380:	108025cc 	andi	r2,r2,151
    d384:	1005003a 	cmpeq	r2,r2,zero
    d388:	10001f1e 	bne	r2,zero,d408 <altera_avalon_lcd_16207_write+0x2c4>
    {
      /* If we didn't scroll on the last linefeed then we might need to do
       * it now. */
      if (sp->y >= ALT_LCD_HEIGHT)
    d38c:	e0bffc17 	ldw	r2,-16(fp)
    d390:	10800883 	ldbu	r2,34(r2)
    d394:	10803fcc 	andi	r2,r2,255
    d398:	108000b0 	cmpltui	r2,r2,2
    d39c:	1000021e 	bne	r2,zero,d3a8 <altera_avalon_lcd_16207_write+0x264>
        lcd_scroll_up(sp);
    d3a0:	e13ffc17 	ldw	r4,-16(fp)
    d3a4:	000cdac0 	call	cdac <lcd_scroll_up>

      if (sp->x < ALT_LCD_VIRTUAL_WIDTH)
    d3a8:	e0bffc17 	ldw	r2,-16(fp)
    d3ac:	10800843 	ldbu	r2,33(r2)
    d3b0:	10803fcc 	andi	r2,r2,255
    d3b4:	10801428 	cmpgeui	r2,r2,80
    d3b8:	10000d1e 	bne	r2,zero,d3f0 <altera_avalon_lcd_16207_write+0x2ac>
        sp->line[sp->y].data[sp->x] = c;
    d3bc:	e0bffc17 	ldw	r2,-16(fp)
    d3c0:	10800883 	ldbu	r2,34(r2)
    d3c4:	11003fcc 	andi	r4,r2,255
    d3c8:	e0bffc17 	ldw	r2,-16(fp)
    d3cc:	10800843 	ldbu	r2,33(r2)
    d3d0:	11403fcc 	andi	r5,r2,255
    d3d4:	e0fffc17 	ldw	r3,-16(fp)
    d3d8:	208018e4 	muli	r2,r4,99
    d3dc:	10c5883a 	add	r2,r2,r3
    d3e0:	1145883a 	add	r2,r2,r5
    d3e4:	10c01004 	addi	r3,r2,64
    d3e8:	e0bff803 	ldbu	r2,-32(fp)
    d3ec:	18800005 	stb	r2,0(r3)

      sp->x++;
    d3f0:	e0bffc17 	ldw	r2,-16(fp)
    d3f4:	10800843 	ldbu	r2,33(r2)
    d3f8:	10800044 	addi	r2,r2,1
    d3fc:	1007883a 	mov	r3,r2
    d400:	e0bffc17 	ldw	r2,-16(fp)
    d404:	10c00845 	stb	r3,33(r2)

  /* Tell the routine which is called off the timer interrupt that the
   * foreground routines are active so it must not repaint the display. */
  sp->active = 1;

  for ( ; ptr < end ; ptr++)
    d408:	e0bffd17 	ldw	r2,-12(fp)
    d40c:	10800044 	addi	r2,r2,1
    d410:	e0bffd15 	stw	r2,-12(fp)
    d414:	e0fffd17 	ldw	r3,-12(fp)
    d418:	e0bffb17 	ldw	r2,-20(fp)
    d41c:	18bf5b36 	bltu	r3,r2,d18c <altera_avalon_lcd_16207_write+0x48>
      sp->x++;
    }
  }

  /* Recalculate the scrolling parameters */
  widthmax = ALT_LCD_WIDTH;
    d420:	00800404 	movi	r2,16
    d424:	e0bff915 	stw	r2,-28(fp)
  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
    d428:	e03ffa15 	stw	zero,-24(fp)
    d42c:	00003606 	br	d508 <altera_avalon_lcd_16207_write+0x3c4>
  {
    int width;
    for (width = ALT_LCD_VIRTUAL_WIDTH ; width > 0 ; width--)
    d430:	00801404 	movi	r2,80
    d434:	e0bff615 	stw	r2,-40(fp)
    d438:	00001106 	br	d480 <altera_avalon_lcd_16207_write+0x33c>
      if (sp->line[y].data[width-1] != ' ')
    d43c:	e13ffa17 	ldw	r4,-24(fp)
    d440:	e0bff617 	ldw	r2,-40(fp)
    d444:	117fffc4 	addi	r5,r2,-1
    d448:	e0fffc17 	ldw	r3,-16(fp)
    d44c:	208018e4 	muli	r2,r4,99
    d450:	10c5883a 	add	r2,r2,r3
    d454:	1145883a 	add	r2,r2,r5
    d458:	10801004 	addi	r2,r2,64
    d45c:	10800003 	ldbu	r2,0(r2)
    d460:	10803fcc 	andi	r2,r2,255
    d464:	1080201c 	xori	r2,r2,128
    d468:	10bfe004 	addi	r2,r2,-128
    d46c:	10800818 	cmpnei	r2,r2,32
    d470:	1000061e 	bne	r2,zero,d48c <altera_avalon_lcd_16207_write+0x348>
  /* Recalculate the scrolling parameters */
  widthmax = ALT_LCD_WIDTH;
  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
  {
    int width;
    for (width = ALT_LCD_VIRTUAL_WIDTH ; width > 0 ; width--)
    d474:	e0bff617 	ldw	r2,-40(fp)
    d478:	10bfffc4 	addi	r2,r2,-1
    d47c:	e0bff615 	stw	r2,-40(fp)
    d480:	e0bff617 	ldw	r2,-40(fp)
    d484:	10800048 	cmpgei	r2,r2,1
    d488:	103fec1e 	bne	r2,zero,d43c <altera_avalon_lcd_16207_write+0x2f8>

    /* The minimum width is the size of the LCD panel.  If the real width
     * is long enough to require scrolling then add an extra space so the
     * end of the message doesn't run into the beginning of it.
     */
    if (width <= ALT_LCD_WIDTH)
    d48c:	e0bff617 	ldw	r2,-40(fp)
    d490:	10800448 	cmpgei	r2,r2,17
    d494:	1000031e 	bne	r2,zero,d4a4 <altera_avalon_lcd_16207_write+0x360>
      width = ALT_LCD_WIDTH;
    d498:	00800404 	movi	r2,16
    d49c:	e0bff615 	stw	r2,-40(fp)
    d4a0:	00000306 	br	d4b0 <altera_avalon_lcd_16207_write+0x36c>
    else
      width++;
    d4a4:	e0bff617 	ldw	r2,-40(fp)
    d4a8:	10800044 	addi	r2,r2,1
    d4ac:	e0bff615 	stw	r2,-40(fp)

    sp->line[y].width = width;
    d4b0:	e13ffa17 	ldw	r4,-24(fp)
    d4b4:	e0bff617 	ldw	r2,-40(fp)
    d4b8:	100b883a 	mov	r5,r2
    d4bc:	e0fffc17 	ldw	r3,-16(fp)
    d4c0:	208018e4 	muli	r2,r4,99
    d4c4:	10c5883a 	add	r2,r2,r3
    d4c8:	10802404 	addi	r2,r2,144
    d4cc:	11400045 	stb	r5,1(r2)
    if (widthmax < width)
    d4d0:	e0fff917 	ldw	r3,-28(fp)
    d4d4:	e0bff617 	ldw	r2,-40(fp)
    d4d8:	1880020e 	bge	r3,r2,d4e4 <altera_avalon_lcd_16207_write+0x3a0>
      widthmax = width;
    d4dc:	e0bff617 	ldw	r2,-40(fp)
    d4e0:	e0bff915 	stw	r2,-28(fp)
    sp->line[y].speed = 0; /* By default lines don't scroll */
    d4e4:	e0bffa17 	ldw	r2,-24(fp)
    d4e8:	e0fffc17 	ldw	r3,-16(fp)
    d4ec:	108018e4 	muli	r2,r2,99
    d4f0:	10c5883a 	add	r2,r2,r3
    d4f4:	10802404 	addi	r2,r2,144
    d4f8:	10000085 	stb	zero,2(r2)
    }
  }

  /* Recalculate the scrolling parameters */
  widthmax = ALT_LCD_WIDTH;
  for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
    d4fc:	e0bffa17 	ldw	r2,-24(fp)
    d500:	10800044 	addi	r2,r2,1
    d504:	e0bffa15 	stw	r2,-24(fp)
    d508:	e0bffa17 	ldw	r2,-24(fp)
    d50c:	10800090 	cmplti	r2,r2,2
    d510:	103fc71e 	bne	r2,zero,d430 <altera_avalon_lcd_16207_write+0x2ec>
    if (widthmax < width)
      widthmax = width;
    sp->line[y].speed = 0; /* By default lines don't scroll */
  }

  if (widthmax <= ALT_LCD_WIDTH)
    d514:	e0bff917 	ldw	r2,-28(fp)
    d518:	10800448 	cmpgei	r2,r2,17
    d51c:	1000031e 	bne	r2,zero,d52c <altera_avalon_lcd_16207_write+0x3e8>
    sp->scrollmax = 0;
    d520:	e0bffc17 	ldw	r2,-16(fp)
    d524:	10000985 	stb	zero,38(r2)
    d528:	00002d06 	br	d5e0 <altera_avalon_lcd_16207_write+0x49c>
  else
  {
    widthmax *= 2;
    d52c:	e0bff917 	ldw	r2,-28(fp)
    d530:	1085883a 	add	r2,r2,r2
    d534:	e0bff915 	stw	r2,-28(fp)
    sp->scrollmax = widthmax;
    d538:	e0bff917 	ldw	r2,-28(fp)
    d53c:	1007883a 	mov	r3,r2
    d540:	e0bffc17 	ldw	r2,-16(fp)
    d544:	10c00985 	stb	r3,38(r2)

    /* Now calculate how fast each of the other lines should go */
    for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
    d548:	e03ffa15 	stw	zero,-24(fp)
    d54c:	00002106 	br	d5d4 <altera_avalon_lcd_16207_write+0x490>
      if (sp->line[y].width > ALT_LCD_WIDTH)
    d550:	e0bffa17 	ldw	r2,-24(fp)
    d554:	e0fffc17 	ldw	r3,-16(fp)
    d558:	108018e4 	muli	r2,r2,99
    d55c:	10c5883a 	add	r2,r2,r3
    d560:	10802404 	addi	r2,r2,144
    d564:	10800043 	ldbu	r2,1(r2)
    d568:	10803fcc 	andi	r2,r2,255
    d56c:	1080201c 	xori	r2,r2,128
    d570:	10bfe004 	addi	r2,r2,-128
    d574:	10800450 	cmplti	r2,r2,17
    d578:	1000131e 	bne	r2,zero,d5c8 <altera_avalon_lcd_16207_write+0x484>
         */
#if 1
        /* This option makes all the lines scroll round at different speeds
         * which are chosen so that all the scrolls finish at the same time.
         */
        sp->line[y].speed = 256 * sp->line[y].width / widthmax;
    d57c:	e43ffa17 	ldw	r16,-24(fp)
    d580:	e0bffa17 	ldw	r2,-24(fp)
    d584:	e0fffc17 	ldw	r3,-16(fp)
    d588:	108018e4 	muli	r2,r2,99
    d58c:	10c5883a 	add	r2,r2,r3
    d590:	10802404 	addi	r2,r2,144
    d594:	10800043 	ldbu	r2,1(r2)
    d598:	10803fcc 	andi	r2,r2,255
    d59c:	1080201c 	xori	r2,r2,128
    d5a0:	10bfe004 	addi	r2,r2,-128
    d5a4:	1008923a 	slli	r4,r2,8
    d5a8:	e17ff917 	ldw	r5,-28(fp)
    d5ac:	0001a440 	call	1a44 <__divsi3>
    d5b0:	1009883a 	mov	r4,r2
    d5b4:	e0fffc17 	ldw	r3,-16(fp)
    d5b8:	808018e4 	muli	r2,r16,99
    d5bc:	10c5883a 	add	r2,r2,r3
    d5c0:	10802404 	addi	r2,r2,144
    d5c4:	11000085 	stb	r4,2(r2)
  {
    widthmax *= 2;
    sp->scrollmax = widthmax;

    /* Now calculate how fast each of the other lines should go */
    for (y = 0 ; y < ALT_LCD_HEIGHT ; y++)
    d5c8:	e0bffa17 	ldw	r2,-24(fp)
    d5cc:	10800044 	addi	r2,r2,1
    d5d0:	e0bffa15 	stw	r2,-24(fp)
    d5d4:	e0bffa17 	ldw	r2,-24(fp)
    d5d8:	10800090 	cmplti	r2,r2,2
    d5dc:	103fdc1e 	bne	r2,zero,d550 <altera_avalon_lcd_16207_write+0x40c>
   * (because active was set when the timer interrupt occurred).  If there
   * has been a missed repaint then paint again.  And again.  etc.
   */
  for ( ; ; )
  {
    int old_scrollpos = sp->scrollpos;
    d5e0:	e0bffc17 	ldw	r2,-16(fp)
    d5e4:	10800943 	ldbu	r2,37(r2)
    d5e8:	10803fcc 	andi	r2,r2,255
    d5ec:	1080201c 	xori	r2,r2,128
    d5f0:	10bfe004 	addi	r2,r2,-128
    d5f4:	e0bff515 	stw	r2,-44(fp)

    lcd_repaint_screen(sp);
    d5f8:	e13ffc17 	ldw	r4,-16(fp)
    d5fc:	000cbc00 	call	cbc0 <lcd_repaint_screen>

    /* Let the timer routines repaint the display again */
    sp->active = 0;
    d600:	e0bffc17 	ldw	r2,-16(fp)
    d604:	100009c5 	stb	zero,39(r2)

    /* Have the timer routines tried to scroll while we were painting?
     * If not then we can exit */
    if (sp->scrollpos == old_scrollpos)
    d608:	e0bffc17 	ldw	r2,-16(fp)
    d60c:	10800943 	ldbu	r2,37(r2)
    d610:	10c03fcc 	andi	r3,r2,255
    d614:	18c0201c 	xori	r3,r3,128
    d618:	18ffe004 	addi	r3,r3,-128
    d61c:	e0bff517 	ldw	r2,-44(fp)
    d620:	18800426 	beq	r3,r2,d634 <altera_avalon_lcd_16207_write+0x4f0>
      break;

    /* We need to repaint again since the display scrolled while we were
     * painting last time */
    sp->active = 1;
    d624:	e0fffc17 	ldw	r3,-16(fp)
    d628:	00800044 	movi	r2,1
    d62c:	188009c5 	stb	r2,39(r3)
  }
    d630:	003feb06 	br	d5e0 <altera_avalon_lcd_16207_write+0x49c>
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->write_lock);

  return len;
    d634:	e0bffe17 	ldw	r2,-8(fp)
}
    d638:	e037883a 	mov	sp,fp
    d63c:	dfc00217 	ldw	ra,8(sp)
    d640:	df000117 	ldw	fp,4(sp)
    d644:	dc000017 	ldw	r16,0(sp)
    d648:	dec00304 	addi	sp,sp,12
    d64c:	f800283a 	ret

0000d650 <alt_lcd_16207_timeout>:
/*
 * Timeout routine is called every second
 */

static alt_u32 alt_lcd_16207_timeout(void* context) 
{
    d650:	defffc04 	addi	sp,sp,-16
    d654:	dfc00315 	stw	ra,12(sp)
    d658:	df000215 	stw	fp,8(sp)
    d65c:	df000204 	addi	fp,sp,8
    d660:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_lcd_16207_state* sp = (altera_avalon_lcd_16207_state*)context;
    d664:	e0bfff17 	ldw	r2,-4(fp)
    d668:	e0bffe15 	stw	r2,-8(fp)

  /* Update the scrolling position */
  if (sp->scrollpos + 1 >= sp->scrollmax)
    d66c:	e0bffe17 	ldw	r2,-8(fp)
    d670:	10800943 	ldbu	r2,37(r2)
    d674:	10803fcc 	andi	r2,r2,255
    d678:	1080201c 	xori	r2,r2,128
    d67c:	10bfe004 	addi	r2,r2,-128
    d680:	10c00044 	addi	r3,r2,1
    d684:	e0bffe17 	ldw	r2,-8(fp)
    d688:	10800983 	ldbu	r2,38(r2)
    d68c:	10803fcc 	andi	r2,r2,255
    d690:	1080201c 	xori	r2,r2,128
    d694:	10bfe004 	addi	r2,r2,-128
    d698:	18800316 	blt	r3,r2,d6a8 <alt_lcd_16207_timeout+0x58>
    sp->scrollpos = 0;
    d69c:	e0bffe17 	ldw	r2,-8(fp)
    d6a0:	10000945 	stb	zero,37(r2)
    d6a4:	00000606 	br	d6c0 <alt_lcd_16207_timeout+0x70>
  else
    sp->scrollpos = sp->scrollpos + 1;
    d6a8:	e0bffe17 	ldw	r2,-8(fp)
    d6ac:	10800943 	ldbu	r2,37(r2)
    d6b0:	10800044 	addi	r2,r2,1
    d6b4:	1007883a 	mov	r3,r2
    d6b8:	e0bffe17 	ldw	r2,-8(fp)
    d6bc:	10c00945 	stb	r3,37(r2)

  /* Repaint the panel unless the foreground will do it again soon */
  if (sp->scrollmax > 0 && !sp->active)
    d6c0:	e0bffe17 	ldw	r2,-8(fp)
    d6c4:	10800983 	ldbu	r2,38(r2)
    d6c8:	10803fcc 	andi	r2,r2,255
    d6cc:	1080201c 	xori	r2,r2,128
    d6d0:	10bfe004 	addi	r2,r2,-128
    d6d4:	10800050 	cmplti	r2,r2,1
    d6d8:	1000091e 	bne	r2,zero,d700 <alt_lcd_16207_timeout+0xb0>
    d6dc:	e0bffe17 	ldw	r2,-8(fp)
    d6e0:	108009c3 	ldbu	r2,39(r2)
    d6e4:	10803fcc 	andi	r2,r2,255
    d6e8:	1080201c 	xori	r2,r2,128
    d6ec:	10bfe004 	addi	r2,r2,-128
    d6f0:	1004c03a 	cmpne	r2,r2,zero
    d6f4:	1000021e 	bne	r2,zero,d700 <alt_lcd_16207_timeout+0xb0>
    lcd_repaint_screen(sp);
    d6f8:	e13ffe17 	ldw	r4,-8(fp)
    d6fc:	000cbc00 	call	cbc0 <lcd_repaint_screen>

  return sp->period;
    d700:	e0bffe17 	ldw	r2,-8(fp)
    d704:	10800717 	ldw	r2,28(r2)
}
    d708:	e037883a 	mov	sp,fp
    d70c:	dfc00117 	ldw	ra,4(sp)
    d710:	df000017 	ldw	fp,0(sp)
    d714:	dec00204 	addi	sp,sp,8
    d718:	f800283a 	ret

0000d71c <altera_avalon_lcd_16207_init>:

/*
 * Called at boot time to initialise the LCD driver
 */
void altera_avalon_lcd_16207_init(altera_avalon_lcd_16207_state* sp)
{
    d71c:	defffc04 	addi	sp,sp,-16
    d720:	dfc00315 	stw	ra,12(sp)
    d724:	df000215 	stw	fp,8(sp)
    d728:	df000204 	addi	fp,sp,8
    d72c:	e13fff15 	stw	r4,-4(fp)
  unsigned int base = sp->base;
    d730:	e0bfff17 	ldw	r2,-4(fp)
    d734:	10800017 	ldw	r2,0(r2)
    d738:	e0bffe15 	stw	r2,-8(fp)

  /* Mark the device as functional */
  sp->broken = 0;
    d73c:	e0bfff17 	ldw	r2,-4(fp)
    d740:	10000805 	stb	zero,32(r2)
   * the BUSY bit in the status register doesn't work until the display
   * has been reset three times.
   */

  /* Wait for 15 ms then reset */
  usleep(15000);
    d744:	010ea604 	movi	r4,15000
    d748:	000bc380 	call	bc38 <usleep>
  IOWR_ALTERA_AVALON_LCD_16207_COMMAND(base, LCD_CMD_FUNCTION_SET | LCD_CMD_8BIT);
    d74c:	e0bffe17 	ldw	r2,-8(fp)
    d750:	1007883a 	mov	r3,r2
    d754:	00800c04 	movi	r2,48
    d758:	18800035 	stwio	r2,0(r3)

  /* Wait for another 4.1ms and reset again */
  usleep(4100);  
    d75c:	01040104 	movi	r4,4100
    d760:	000bc380 	call	bc38 <usleep>
  IOWR_ALTERA_AVALON_LCD_16207_COMMAND(base, LCD_CMD_FUNCTION_SET | LCD_CMD_8BIT);
    d764:	e0bffe17 	ldw	r2,-8(fp)
    d768:	1007883a 	mov	r3,r2
    d76c:	00800c04 	movi	r2,48
    d770:	18800035 	stwio	r2,0(r3)

  /* Wait a further 1 ms and reset a third time */
  usleep(1000);
    d774:	0100fa04 	movi	r4,1000
    d778:	000bc380 	call	bc38 <usleep>
  IOWR_ALTERA_AVALON_LCD_16207_COMMAND(base, LCD_CMD_FUNCTION_SET | LCD_CMD_8BIT);
    d77c:	e0bffe17 	ldw	r2,-8(fp)
    d780:	1007883a 	mov	r3,r2
    d784:	00800c04 	movi	r2,48
    d788:	18800035 	stwio	r2,0(r3)

  /* Setup interface parameters: 8 bit bus, 2 rows, 5x7 font */
  lcd_write_command(sp, LCD_CMD_FUNCTION_SET | LCD_CMD_8BIT | LCD_CMD_TWO_LINE);
    d78c:	e13fff17 	ldw	r4,-4(fp)
    d790:	01400e04 	movi	r5,56
    d794:	000c9700 	call	c970 <lcd_write_command>
  
  /* Turn display off */
  lcd_write_command(sp, LCD_CMD_ONOFF);
    d798:	e13fff17 	ldw	r4,-4(fp)
    d79c:	01400204 	movi	r5,8
    d7a0:	000c9700 	call	c970 <lcd_write_command>

  /* Clear display */
  lcd_clear_screen(sp);
    d7a4:	e13fff17 	ldw	r4,-4(fp)
    d7a8:	000cafc0 	call	cafc <lcd_clear_screen>
  
  /* Set mode: increment after writing, don't shift display */
  lcd_write_command(sp, LCD_CMD_MODES | LCD_CMD_MODE_INC);
    d7ac:	e13fff17 	ldw	r4,-4(fp)
    d7b0:	01400184 	movi	r5,6
    d7b4:	000c9700 	call	c970 <lcd_write_command>

  /* Turn display on */
  lcd_write_command(sp, LCD_CMD_ONOFF | LCD_CMD_ENABLE_DISP);
    d7b8:	e13fff17 	ldw	r4,-4(fp)
    d7bc:	01400304 	movi	r5,12
    d7c0:	000c9700 	call	c970 <lcd_write_command>

  sp->esccount = -1;
    d7c4:	e0ffff17 	ldw	r3,-4(fp)
    d7c8:	00bfffc4 	movi	r2,-1
    d7cc:	18800905 	stb	r2,36(r3)
  memset(sp->escape, 0, sizeof(sp->escape));
    d7d0:	e0bfff17 	ldw	r2,-4(fp)
    d7d4:	11000a04 	addi	r4,r2,40
    d7d8:	000b883a 	mov	r5,zero
    d7dc:	01800204 	movi	r6,8
    d7e0:	00070c40 	call	70c4 <memset>

  sp->scrollpos = 0;
    d7e4:	e0bfff17 	ldw	r2,-4(fp)
    d7e8:	10000945 	stb	zero,37(r2)
  sp->scrollmax = 0;
    d7ec:	e0bfff17 	ldw	r2,-4(fp)
    d7f0:	10000985 	stb	zero,38(r2)
  sp->active = 0;
    d7f4:	e0bfff17 	ldw	r2,-4(fp)
    d7f8:	100009c5 	stb	zero,39(r2)
    d7fc:	00800074 	movhi	r2,1
    d800:	108c9304 	addi	r2,r2,12876
    d804:	10800017 	ldw	r2,0(r2)
    d808:	1009883a 	mov	r4,r2

  sp->period = alt_ticks_per_second() / 10; /* Call every 100ms */
    d80c:	01400284 	movi	r5,10
    d810:	0001b040 	call	1b04 <__udivsi3>
    d814:	1007883a 	mov	r3,r2
    d818:	e0bfff17 	ldw	r2,-4(fp)
    d81c:	10c00715 	stw	r3,28(r2)

  alt_alarm_start(&sp->alarm, sp->period, &alt_lcd_16207_timeout, sp);
    d820:	e0bfff17 	ldw	r2,-4(fp)
    d824:	11000104 	addi	r4,r2,4
    d828:	e0bfff17 	ldw	r2,-4(fp)
    d82c:	10800717 	ldw	r2,28(r2)
    d830:	100b883a 	mov	r5,r2
    d834:	01800074 	movhi	r6,1
    d838:	31b59404 	addi	r6,r6,-10672
    d83c:	e1ffff17 	ldw	r7,-4(fp)
    d840:	000d9b00 	call	d9b0 <alt_alarm_start>
}
    d844:	e037883a 	mov	sp,fp
    d848:	dfc00117 	ldw	ra,4(sp)
    d84c:	df000017 	ldw	fp,0(sp)
    d850:	dec00204 	addi	sp,sp,8
    d854:	f800283a 	ret

0000d858 <altera_avalon_lcd_16207_write_fd>:
extern int altera_avalon_lcd_16207_write(altera_avalon_lcd_16207_state* sp,
  const char* ptr, int count, int flags);

int 
altera_avalon_lcd_16207_write_fd(alt_fd* fd, const char* buffer, int space)
{
    d858:	defffa04 	addi	sp,sp,-24
    d85c:	dfc00515 	stw	ra,20(sp)
    d860:	df000415 	stw	fp,16(sp)
    d864:	df000404 	addi	fp,sp,16
    d868:	e13ffd15 	stw	r4,-12(fp)
    d86c:	e17ffe15 	stw	r5,-8(fp)
    d870:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_lcd_16207_dev* dev = (altera_avalon_lcd_16207_dev*) fd->dev; 
    d874:	e0bffd17 	ldw	r2,-12(fp)
    d878:	10800017 	ldw	r2,0(r2)
    d87c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_lcd_16207_write(&dev->state, buffer, space,
    d880:	e0bffc17 	ldw	r2,-16(fp)
    d884:	11000a04 	addi	r4,r2,40
    d888:	e0bffd17 	ldw	r2,-12(fp)
    d88c:	11c00217 	ldw	r7,8(r2)
    d890:	e17ffe17 	ldw	r5,-8(fp)
    d894:	e1bfff17 	ldw	r6,-4(fp)
    d898:	000d1440 	call	d144 <altera_avalon_lcd_16207_write>
      fd->fd_flags);
}
    d89c:	e037883a 	mov	sp,fp
    d8a0:	dfc00117 	ldw	ra,4(sp)
    d8a4:	df000017 	ldw	fp,0(sp)
    d8a8:	dec00204 	addi	sp,sp,8
    d8ac:	f800283a 	ret

0000d8b0 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
    d8b0:	defffa04 	addi	sp,sp,-24
    d8b4:	dfc00515 	stw	ra,20(sp)
    d8b8:	df000415 	stw	fp,16(sp)
    d8bc:	df000404 	addi	fp,sp,16
    d8c0:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
    d8c4:	e0bfff17 	ldw	r2,-4(fp)
    d8c8:	10000035 	stwio	zero,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
    d8cc:	e0bfff17 	ldw	r2,-4(fp)
    d8d0:	10800104 	addi	r2,r2,4
    d8d4:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    d8d8:	0005303a 	rdctl	r2,status
    d8dc:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    d8e0:	e0fffd17 	ldw	r3,-12(fp)
    d8e4:	00bfff84 	movi	r2,-2
    d8e8:	1884703a 	and	r2,r3,r2
    d8ec:	1001703a 	wrctl	status,r2
  
  return context;
    d8f0:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
    d8f4:	e0bffe15 	stw	r2,-8(fp)
  alt_tick ();
    d8f8:	000bb2c0 	call	bb2c <alt_tick>
    d8fc:	e0bffe17 	ldw	r2,-8(fp)
    d900:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    d904:	e0bffc17 	ldw	r2,-16(fp)
    d908:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
    d90c:	e037883a 	mov	sp,fp
    d910:	dfc00117 	ldw	ra,4(sp)
    d914:	df000017 	ldw	fp,0(sp)
    d918:	dec00204 	addi	sp,sp,8
    d91c:	f800283a 	ret

0000d920 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
    d920:	defff804 	addi	sp,sp,-32
    d924:	dfc00715 	stw	ra,28(sp)
    d928:	df000615 	stw	fp,24(sp)
    d92c:	df000604 	addi	fp,sp,24
    d930:	e13ffc15 	stw	r4,-16(fp)
    d934:	e17ffd15 	stw	r5,-12(fp)
    d938:	e1bffe15 	stw	r6,-8(fp)
    d93c:	e1ffff15 	stw	r7,-4(fp)
    d940:	e0bfff17 	ldw	r2,-4(fp)
    d944:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
    d948:	00800074 	movhi	r2,1
    d94c:	108c9304 	addi	r2,r2,12876
    d950:	10800017 	ldw	r2,0(r2)
    d954:	1004c03a 	cmpne	r2,r2,zero
    d958:	1000041e 	bne	r2,zero,d96c <alt_avalon_timer_sc_init+0x4c>
  {
    _alt_tick_rate = nticks;
    d95c:	00c00074 	movhi	r3,1
    d960:	18cc9304 	addi	r3,r3,12876
    d964:	e0bffb17 	ldw	r2,-20(fp)
    d968:	18800015 	stw	r2,0(r3)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
    d96c:	e0bffc17 	ldw	r2,-16(fp)
    d970:	10800104 	addi	r2,r2,4
    d974:	1007883a 	mov	r3,r2
    d978:	008001c4 	movi	r2,7
    d97c:	18800035 	stwio	r2,0(r3)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
    d980:	d8000015 	stw	zero,0(sp)
    d984:	e13ffd17 	ldw	r4,-12(fp)
    d988:	e17ffe17 	ldw	r5,-8(fp)
    d98c:	01800074 	movhi	r6,1
    d990:	31b62c04 	addi	r6,r6,-10064
    d994:	e1fffc17 	ldw	r7,-16(fp)
    d998:	000de780 	call	de78 <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
    d99c:	e037883a 	mov	sp,fp
    d9a0:	dfc00117 	ldw	ra,4(sp)
    d9a4:	df000017 	ldw	fp,0(sp)
    d9a8:	dec00204 	addi	sp,sp,8
    d9ac:	f800283a 	ret

0000d9b0 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
    d9b0:	defff404 	addi	sp,sp,-48
    d9b4:	df000b15 	stw	fp,44(sp)
    d9b8:	df000b04 	addi	fp,sp,44
    d9bc:	e13ffb15 	stw	r4,-20(fp)
    d9c0:	e17ffc15 	stw	r5,-16(fp)
    d9c4:	e1bffd15 	stw	r6,-12(fp)
    d9c8:	e1fffe15 	stw	r7,-8(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
    d9cc:	e03ff915 	stw	zero,-28(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
    d9d0:	00800074 	movhi	r2,1
    d9d4:	108c9304 	addi	r2,r2,12876
    d9d8:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
    d9dc:	1005003a 	cmpeq	r2,r2,zero
    d9e0:	1000411e 	bne	r2,zero,dae8 <alt_alarm_start+0x138>
  {
    if (alarm)
    d9e4:	e0bffb17 	ldw	r2,-20(fp)
    d9e8:	1005003a 	cmpeq	r2,r2,zero
    d9ec:	10003b1e 	bne	r2,zero,dadc <alt_alarm_start+0x12c>
    {
      alarm->callback = callback;
    d9f0:	e0fffb17 	ldw	r3,-20(fp)
    d9f4:	e0bffd17 	ldw	r2,-12(fp)
    d9f8:	18800315 	stw	r2,12(r3)
      alarm->context  = context;
    d9fc:	e0fffb17 	ldw	r3,-20(fp)
    da00:	e0bffe17 	ldw	r2,-8(fp)
    da04:	18800515 	stw	r2,20(r3)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    da08:	0005303a 	rdctl	r2,status
    da0c:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    da10:	e0fff817 	ldw	r3,-32(fp)
    da14:	00bfff84 	movi	r2,-2
    da18:	1884703a 	and	r2,r3,r2
    da1c:	1001703a 	wrctl	status,r2
  
  return context;
    da20:	e0bff817 	ldw	r2,-32(fp)
 
      irq_context = alt_irq_disable_all ();
    da24:	e0bffa15 	stw	r2,-24(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
    da28:	00800074 	movhi	r2,1
    da2c:	108c9404 	addi	r2,r2,12880
    da30:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
    da34:	e0bff915 	stw	r2,-28(fp)
      
      alarm->time = nticks + current_nticks + 1; 
    da38:	e0fffc17 	ldw	r3,-16(fp)
    da3c:	e0bff917 	ldw	r2,-28(fp)
    da40:	1885883a 	add	r2,r3,r2
    da44:	10c00044 	addi	r3,r2,1
    da48:	e0bffb17 	ldw	r2,-20(fp)
    da4c:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
    da50:	e0bffb17 	ldw	r2,-20(fp)
    da54:	10c00217 	ldw	r3,8(r2)
    da58:	e0bff917 	ldw	r2,-28(fp)
    da5c:	1880042e 	bgeu	r3,r2,da70 <alt_alarm_start+0xc0>
      {
        alarm->rollover = 1;
    da60:	e0fffb17 	ldw	r3,-20(fp)
    da64:	00800044 	movi	r2,1
    da68:	18800405 	stb	r2,16(r3)
    da6c:	00000206 	br	da78 <alt_alarm_start+0xc8>
      }
      else
      {
        alarm->rollover = 0;
    da70:	e0bffb17 	ldw	r2,-20(fp)
    da74:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
    da78:	e0fffb17 	ldw	r3,-20(fp)
    da7c:	00800074 	movhi	r2,1
    da80:	10853804 	addi	r2,r2,5344
    da84:	e0bff615 	stw	r2,-40(fp)
    da88:	e0fff715 	stw	r3,-36(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
    da8c:	e0fff717 	ldw	r3,-36(fp)
    da90:	e0bff617 	ldw	r2,-40(fp)
    da94:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
    da98:	e0bff617 	ldw	r2,-40(fp)
    da9c:	10c00017 	ldw	r3,0(r2)
    daa0:	e0bff717 	ldw	r2,-36(fp)
    daa4:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
    daa8:	e0bff617 	ldw	r2,-40(fp)
    daac:	10c00017 	ldw	r3,0(r2)
    dab0:	e0bff717 	ldw	r2,-36(fp)
    dab4:	18800115 	stw	r2,4(r3)
  list->next           = entry;
    dab8:	e0fff617 	ldw	r3,-40(fp)
    dabc:	e0bff717 	ldw	r2,-36(fp)
    dac0:	18800015 	stw	r2,0(r3)
    dac4:	e0bffa17 	ldw	r2,-24(fp)
    dac8:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    dacc:	e0bff517 	ldw	r2,-44(fp)
    dad0:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
    dad4:	e03fff15 	stw	zero,-4(fp)
    dad8:	00000506 	br	daf0 <alt_alarm_start+0x140>
    }
    else
    {
      return -EINVAL;
    dadc:	00bffa84 	movi	r2,-22
    dae0:	e0bfff15 	stw	r2,-4(fp)
    dae4:	00000206 	br	daf0 <alt_alarm_start+0x140>
    }
  }
  else
  {
    return -ENOTSUP;
    dae8:	00bfde84 	movi	r2,-134
    daec:	e0bfff15 	stw	r2,-4(fp)
    daf0:	e0bfff17 	ldw	r2,-4(fp)
  }
}
    daf4:	e037883a 	mov	sp,fp
    daf8:	df000017 	ldw	fp,0(sp)
    dafc:	dec00104 	addi	sp,sp,4
    db00:	f800283a 	ret

0000db04 <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
    db04:	defffa04 	addi	sp,sp,-24
    db08:	dfc00515 	stw	ra,20(sp)
    db0c:	df000415 	stw	fp,16(sp)
    db10:	df000404 	addi	fp,sp,16
    db14:	e13fff15 	stw	r4,-4(fp)
  {
    cycles_per_loop = 9;
  }
  else  
  {
    cycles_per_loop = 3;
    db18:	008000c4 	movi	r2,3
    db1c:	e0bffc15 	stw	r2,-16(fp)
  }
  

  big_loops = us / (INT_MAX/
    db20:	e0fffc17 	ldw	r3,-16(fp)
    db24:	008003f4 	movhi	r2,15
    db28:	10909004 	addi	r2,r2,16960
    db2c:	188b383a 	mul	r5,r3,r2
    db30:	01017db4 	movhi	r4,1526
    db34:	21384004 	addi	r4,r4,-7936
    db38:	0001b040 	call	1b04 <__udivsi3>
    db3c:	100b883a 	mov	r5,r2
    db40:	01200034 	movhi	r4,32768
    db44:	213fffc4 	addi	r4,r4,-1
    db48:	0001b040 	call	1b04 <__udivsi3>
    db4c:	100b883a 	mov	r5,r2
    db50:	e13fff17 	ldw	r4,-4(fp)
    db54:	0001b040 	call	1b04 <__udivsi3>
    db58:	e0bffd15 	stw	r2,-12(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
    db5c:	e0bffd17 	ldw	r2,-12(fp)
    db60:	1005003a 	cmpeq	r2,r2,zero
    db64:	1000281e 	bne	r2,zero,dc08 <alt_busy_sleep+0x104>
  {
    for(i=0;i<big_loops;i++)
    db68:	e03ffe15 	stw	zero,-8(fp)
    db6c:	00001606 	br	dbc8 <alt_busy_sleep+0xc4>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
    db70:	00a00034 	movhi	r2,32768
    db74:	10bfffc4 	addi	r2,r2,-1
    db78:	10bfffc4 	addi	r2,r2,-1
    db7c:	103ffe1e 	bne	r2,zero,db78 <alt_busy_sleep+0x74>
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
    db80:	e0fffc17 	ldw	r3,-16(fp)
    db84:	008003f4 	movhi	r2,15
    db88:	10909004 	addi	r2,r2,16960
    db8c:	188b383a 	mul	r5,r3,r2
    db90:	01017db4 	movhi	r4,1526
    db94:	21384004 	addi	r4,r4,-7936
    db98:	0001b040 	call	1b04 <__udivsi3>
    db9c:	100b883a 	mov	r5,r2
    dba0:	01200034 	movhi	r4,32768
    dba4:	213fffc4 	addi	r4,r4,-1
    dba8:	0001b040 	call	1b04 <__udivsi3>
    dbac:	1007883a 	mov	r3,r2
    dbb0:	e0bfff17 	ldw	r2,-4(fp)
    dbb4:	10c5c83a 	sub	r2,r2,r3
    dbb8:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
    dbbc:	e0bffe17 	ldw	r2,-8(fp)
    dbc0:	10800044 	addi	r2,r2,1
    dbc4:	e0bffe15 	stw	r2,-8(fp)
    dbc8:	e0fffe17 	ldw	r3,-8(fp)
    dbcc:	e0bffd17 	ldw	r2,-12(fp)
    dbd0:	18bfe716 	blt	r3,r2,db70 <alt_busy_sleep+0x6c>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
    dbd4:	e0fffc17 	ldw	r3,-16(fp)
    dbd8:	008003f4 	movhi	r2,15
    dbdc:	10909004 	addi	r2,r2,16960
    dbe0:	188b383a 	mul	r5,r3,r2
    dbe4:	01017db4 	movhi	r4,1526
    dbe8:	21384004 	addi	r4,r4,-7936
    dbec:	0001b040 	call	1b04 <__udivsi3>
    dbf0:	1007883a 	mov	r3,r2
    dbf4:	e0bfff17 	ldw	r2,-4(fp)
    dbf8:	1885383a 	mul	r2,r3,r2
    dbfc:	10bfffc4 	addi	r2,r2,-1
    dc00:	103ffe1e 	bne	r2,zero,dbfc <alt_busy_sleep+0xf8>
    dc04:	00000c06 	br	dc38 <alt_busy_sleep+0x134>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
    dc08:	e0fffc17 	ldw	r3,-16(fp)
    dc0c:	008003f4 	movhi	r2,15
    dc10:	10909004 	addi	r2,r2,16960
    dc14:	188b383a 	mul	r5,r3,r2
    dc18:	01017db4 	movhi	r4,1526
    dc1c:	21384004 	addi	r4,r4,-7936
    dc20:	0001b040 	call	1b04 <__udivsi3>
    dc24:	1007883a 	mov	r3,r2
    dc28:	e0bfff17 	ldw	r2,-4(fp)
    dc2c:	1885383a 	mul	r2,r3,r2
    dc30:	10bfffc4 	addi	r2,r2,-1
    dc34:	00bffe16 	blt	zero,r2,dc30 <alt_busy_sleep+0x12c>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
    dc38:	0005883a 	mov	r2,zero
}
    dc3c:	e037883a 	mov	sp,fp
    dc40:	dfc00117 	ldw	ra,4(sp)
    dc44:	df000017 	ldw	fp,0(sp)
    dc48:	dec00204 	addi	sp,sp,8
    dc4c:	f800283a 	ret

0000dc50 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
    dc50:	deffff04 	addi	sp,sp,-4
    dc54:	df000015 	stw	fp,0(sp)
    dc58:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
    dc5c:	e037883a 	mov	sp,fp
    dc60:	df000017 	ldw	fp,0(sp)
    dc64:	dec00104 	addi	sp,sp,4
    dc68:	f800283a 	ret

0000dc6c <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
    dc6c:	defff904 	addi	sp,sp,-28
    dc70:	dfc00615 	stw	ra,24(sp)
    dc74:	df000515 	stw	fp,20(sp)
    dc78:	df000504 	addi	fp,sp,20
    dc7c:	e13ffd15 	stw	r4,-12(fp)
    dc80:	e17ffe15 	stw	r5,-8(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
    dc84:	e0bffd17 	ldw	r2,-12(fp)
    dc88:	1005003a 	cmpeq	r2,r2,zero
    dc8c:	1000041e 	bne	r2,zero,dca0 <alt_dev_llist_insert+0x34>
    dc90:	e0bffd17 	ldw	r2,-12(fp)
    dc94:	10800217 	ldw	r2,8(r2)
    dc98:	1004c03a 	cmpne	r2,r2,zero
    dc9c:	1000071e 	bne	r2,zero,dcbc <alt_dev_llist_insert+0x50>
  {
    ALT_ERRNO = EINVAL;
    dca0:	000dd200 	call	dd20 <alt_get_errno>
    dca4:	1007883a 	mov	r3,r2
    dca8:	00800584 	movi	r2,22
    dcac:	18800015 	stw	r2,0(r3)
    return -EINVAL;
    dcb0:	00bffa84 	movi	r2,-22
    dcb4:	e0bfff15 	stw	r2,-4(fp)
    dcb8:	00001306 	br	dd08 <alt_dev_llist_insert+0x9c>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
    dcbc:	e0fffd17 	ldw	r3,-12(fp)
    dcc0:	e0bffe17 	ldw	r2,-8(fp)
    dcc4:	e0bffb15 	stw	r2,-20(fp)
    dcc8:	e0fffc15 	stw	r3,-16(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
    dccc:	e0fffc17 	ldw	r3,-16(fp)
    dcd0:	e0bffb17 	ldw	r2,-20(fp)
    dcd4:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
    dcd8:	e0bffb17 	ldw	r2,-20(fp)
    dcdc:	10c00017 	ldw	r3,0(r2)
    dce0:	e0bffc17 	ldw	r2,-16(fp)
    dce4:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
    dce8:	e0bffb17 	ldw	r2,-20(fp)
    dcec:	10c00017 	ldw	r3,0(r2)
    dcf0:	e0bffc17 	ldw	r2,-16(fp)
    dcf4:	18800115 	stw	r2,4(r3)
  list->next           = entry;
    dcf8:	e0fffb17 	ldw	r3,-20(fp)
    dcfc:	e0bffc17 	ldw	r2,-16(fp)
    dd00:	18800015 	stw	r2,0(r3)

  return 0;  
    dd04:	e03fff15 	stw	zero,-4(fp)
    dd08:	e0bfff17 	ldw	r2,-4(fp)
}
    dd0c:	e037883a 	mov	sp,fp
    dd10:	dfc00117 	ldw	ra,4(sp)
    dd14:	df000017 	ldw	fp,0(sp)
    dd18:	dec00204 	addi	sp,sp,8
    dd1c:	f800283a 	ret

0000dd20 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    dd20:	defffd04 	addi	sp,sp,-12
    dd24:	dfc00215 	stw	ra,8(sp)
    dd28:	df000115 	stw	fp,4(sp)
    dd2c:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
    dd30:	00800074 	movhi	r2,1
    dd34:	10853604 	addi	r2,r2,5336
    dd38:	10800017 	ldw	r2,0(r2)
    dd3c:	1005003a 	cmpeq	r2,r2,zero
    dd40:	1000061e 	bne	r2,zero,dd5c <alt_get_errno+0x3c>
    dd44:	00800074 	movhi	r2,1
    dd48:	10853604 	addi	r2,r2,5336
    dd4c:	10800017 	ldw	r2,0(r2)
    dd50:	103ee83a 	callr	r2
    dd54:	e0bfff15 	stw	r2,-4(fp)
    dd58:	00000306 	br	dd68 <alt_get_errno+0x48>
    dd5c:	00800074 	movhi	r2,1
    dd60:	108c8c04 	addi	r2,r2,12848
    dd64:	e0bfff15 	stw	r2,-4(fp)
    dd68:	e0bfff17 	ldw	r2,-4(fp)
}
    dd6c:	e037883a 	mov	sp,fp
    dd70:	dfc00117 	ldw	ra,4(sp)
    dd74:	df000017 	ldw	fp,0(sp)
    dd78:	dec00204 	addi	sp,sp,8
    dd7c:	f800283a 	ret

0000dd80 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
    dd80:	defffd04 	addi	sp,sp,-12
    dd84:	dfc00215 	stw	ra,8(sp)
    dd88:	df000115 	stw	fp,4(sp)
    dd8c:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
    dd90:	00bfff04 	movi	r2,-4
    dd94:	00c00074 	movhi	r3,1
    dd98:	18fb1b04 	addi	r3,r3,-5012
    dd9c:	1885883a 	add	r2,r3,r2
    dda0:	e0bfff15 	stw	r2,-4(fp)
    dda4:	00000606 	br	ddc0 <_do_ctors+0x40>
        (*ctor) (); 
    dda8:	e0bfff17 	ldw	r2,-4(fp)
    ddac:	10800017 	ldw	r2,0(r2)
    ddb0:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
    ddb4:	e0bfff17 	ldw	r2,-4(fp)
    ddb8:	10bfff04 	addi	r2,r2,-4
    ddbc:	e0bfff15 	stw	r2,-4(fp)
    ddc0:	e0ffff17 	ldw	r3,-4(fp)
    ddc4:	00800074 	movhi	r2,1
    ddc8:	10bb1a04 	addi	r2,r2,-5016
    ddcc:	18bff62e 	bgeu	r3,r2,dda8 <_do_ctors+0x28>
        (*ctor) (); 
}
    ddd0:	e037883a 	mov	sp,fp
    ddd4:	dfc00117 	ldw	ra,4(sp)
    ddd8:	df000017 	ldw	fp,0(sp)
    dddc:	dec00204 	addi	sp,sp,8
    dde0:	f800283a 	ret

0000dde4 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
    dde4:	defffd04 	addi	sp,sp,-12
    dde8:	dfc00215 	stw	ra,8(sp)
    ddec:	df000115 	stw	fp,4(sp)
    ddf0:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
    ddf4:	00bfff04 	movi	r2,-4
    ddf8:	00c00074 	movhi	r3,1
    ddfc:	18fb1b04 	addi	r3,r3,-5012
    de00:	1885883a 	add	r2,r3,r2
    de04:	e0bfff15 	stw	r2,-4(fp)
    de08:	00000606 	br	de24 <_do_dtors+0x40>
        (*dtor) (); 
    de0c:	e0bfff17 	ldw	r2,-4(fp)
    de10:	10800017 	ldw	r2,0(r2)
    de14:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
    de18:	e0bfff17 	ldw	r2,-4(fp)
    de1c:	10bfff04 	addi	r2,r2,-4
    de20:	e0bfff15 	stw	r2,-4(fp)
    de24:	e0ffff17 	ldw	r3,-4(fp)
    de28:	00800074 	movhi	r2,1
    de2c:	10bb1b04 	addi	r2,r2,-5012
    de30:	18bff62e 	bgeu	r3,r2,de0c <_do_dtors+0x28>
        (*dtor) (); 
}
    de34:	e037883a 	mov	sp,fp
    de38:	dfc00117 	ldw	ra,4(sp)
    de3c:	df000017 	ldw	fp,0(sp)
    de40:	dec00204 	addi	sp,sp,8
    de44:	f800283a 	ret

0000de48 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
    de48:	defffe04 	addi	sp,sp,-8
    de4c:	dfc00115 	stw	ra,4(sp)
    de50:	df000015 	stw	fp,0(sp)
    de54:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
    de58:	0009883a 	mov	r4,zero
    de5c:	01440004 	movi	r5,4096
    de60:	000e7d00 	call	e7d0 <alt_icache_flush>
#endif
}
    de64:	e037883a 	mov	sp,fp
    de68:	dfc00117 	ldw	ra,4(sp)
    de6c:	df000017 	ldw	fp,0(sp)
    de70:	dec00204 	addi	sp,sp,8
    de74:	f800283a 	ret

0000de78 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
    de78:	defff904 	addi	sp,sp,-28
    de7c:	dfc00615 	stw	ra,24(sp)
    de80:	df000515 	stw	fp,20(sp)
    de84:	df000504 	addi	fp,sp,20
    de88:	e13ffc15 	stw	r4,-16(fp)
    de8c:	e17ffd15 	stw	r5,-12(fp)
    de90:	e1bffe15 	stw	r6,-8(fp)
    de94:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
    de98:	e0800217 	ldw	r2,8(fp)
    de9c:	d8800015 	stw	r2,0(sp)
    dea0:	e13ffc17 	ldw	r4,-16(fp)
    dea4:	e17ffd17 	ldw	r5,-12(fp)
    dea8:	e1bffe17 	ldw	r6,-8(fp)
    deac:	e1ffff17 	ldw	r7,-4(fp)
    deb0:	000e04c0 	call	e04c <alt_iic_isr_register>
}  
    deb4:	e037883a 	mov	sp,fp
    deb8:	dfc00117 	ldw	ra,4(sp)
    debc:	df000017 	ldw	fp,0(sp)
    dec0:	dec00204 	addi	sp,sp,8
    dec4:	f800283a 	ret

0000dec8 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
    dec8:	defff904 	addi	sp,sp,-28
    decc:	df000615 	stw	fp,24(sp)
    ded0:	df000604 	addi	fp,sp,24
    ded4:	e13ffe15 	stw	r4,-8(fp)
    ded8:	e17fff15 	stw	r5,-4(fp)
    dedc:	e0bfff17 	ldw	r2,-4(fp)
    dee0:	e0bffc15 	stw	r2,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    dee4:	0005303a 	rdctl	r2,status
    dee8:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    deec:	e0fffb17 	ldw	r3,-20(fp)
    def0:	00bfff84 	movi	r2,-2
    def4:	1884703a 	and	r2,r3,r2
    def8:	1001703a 	wrctl	status,r2
  
  return context;
    defc:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
    df00:	e0bffd15 	stw	r2,-12(fp)

  alt_irq_active |= (1 << id);
    df04:	e0fffc17 	ldw	r3,-16(fp)
    df08:	00800044 	movi	r2,1
    df0c:	10c4983a 	sll	r2,r2,r3
    df10:	1007883a 	mov	r3,r2
    df14:	00800074 	movhi	r2,1
    df18:	108c9504 	addi	r2,r2,12884
    df1c:	10800017 	ldw	r2,0(r2)
    df20:	1886b03a 	or	r3,r3,r2
    df24:	00800074 	movhi	r2,1
    df28:	108c9504 	addi	r2,r2,12884
    df2c:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
    df30:	00800074 	movhi	r2,1
    df34:	108c9504 	addi	r2,r2,12884
    df38:	10800017 	ldw	r2,0(r2)
    df3c:	100170fa 	wrctl	ienable,r2
    df40:	e0bffd17 	ldw	r2,-12(fp)
    df44:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    df48:	e0bffa17 	ldw	r2,-24(fp)
    df4c:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
    df50:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
}
    df54:	e037883a 	mov	sp,fp
    df58:	df000017 	ldw	fp,0(sp)
    df5c:	dec00104 	addi	sp,sp,4
    df60:	f800283a 	ret

0000df64 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
    df64:	defff904 	addi	sp,sp,-28
    df68:	df000615 	stw	fp,24(sp)
    df6c:	df000604 	addi	fp,sp,24
    df70:	e13ffe15 	stw	r4,-8(fp)
    df74:	e17fff15 	stw	r5,-4(fp)
    df78:	e0bfff17 	ldw	r2,-4(fp)
    df7c:	e0bffc15 	stw	r2,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    df80:	0005303a 	rdctl	r2,status
    df84:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    df88:	e0fffb17 	ldw	r3,-20(fp)
    df8c:	00bfff84 	movi	r2,-2
    df90:	1884703a 	and	r2,r3,r2
    df94:	1001703a 	wrctl	status,r2
  
  return context;
    df98:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
    df9c:	e0bffd15 	stw	r2,-12(fp)

  alt_irq_active &= ~(1 << id);
    dfa0:	e0fffc17 	ldw	r3,-16(fp)
    dfa4:	00800044 	movi	r2,1
    dfa8:	10c4983a 	sll	r2,r2,r3
    dfac:	0084303a 	nor	r2,zero,r2
    dfb0:	1007883a 	mov	r3,r2
    dfb4:	00800074 	movhi	r2,1
    dfb8:	108c9504 	addi	r2,r2,12884
    dfbc:	10800017 	ldw	r2,0(r2)
    dfc0:	1886703a 	and	r3,r3,r2
    dfc4:	00800074 	movhi	r2,1
    dfc8:	108c9504 	addi	r2,r2,12884
    dfcc:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
    dfd0:	00800074 	movhi	r2,1
    dfd4:	108c9504 	addi	r2,r2,12884
    dfd8:	10800017 	ldw	r2,0(r2)
    dfdc:	100170fa 	wrctl	ienable,r2
    dfe0:	e0bffd17 	ldw	r2,-12(fp)
    dfe4:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    dfe8:	e0bffa17 	ldw	r2,-24(fp)
    dfec:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
    dff0:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
}
    dff4:	e037883a 	mov	sp,fp
    dff8:	df000017 	ldw	fp,0(sp)
    dffc:	dec00104 	addi	sp,sp,4
    e000:	f800283a 	ret

0000e004 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
    e004:	defffc04 	addi	sp,sp,-16
    e008:	df000315 	stw	fp,12(sp)
    e00c:	df000304 	addi	fp,sp,12
    e010:	e13ffe15 	stw	r4,-8(fp)
    e014:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
    e018:	000530fa 	rdctl	r2,ienable
    e01c:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
    e020:	e0ffff17 	ldw	r3,-4(fp)
    e024:	00800044 	movi	r2,1
    e028:	10c4983a 	sll	r2,r2,r3
    e02c:	1007883a 	mov	r3,r2
    e030:	e0bffd17 	ldw	r2,-12(fp)
    e034:	1884703a 	and	r2,r3,r2
    e038:	1004c03a 	cmpne	r2,r2,zero
}
    e03c:	e037883a 	mov	sp,fp
    e040:	df000017 	ldw	fp,0(sp)
    e044:	dec00104 	addi	sp,sp,4
    e048:	f800283a 	ret

0000e04c <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
    e04c:	defff404 	addi	sp,sp,-48
    e050:	dfc00b15 	stw	ra,44(sp)
    e054:	df000a15 	stw	fp,40(sp)
    e058:	df000a04 	addi	fp,sp,40
    e05c:	e13ffb15 	stw	r4,-20(fp)
    e060:	e17ffc15 	stw	r5,-16(fp)
    e064:	e1bffd15 	stw	r6,-12(fp)
    e068:	e1fffe15 	stw	r7,-8(fp)
  int rc = -EINVAL;  
    e06c:	00bffa84 	movi	r2,-22
    e070:	e0bffa15 	stw	r2,-24(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
    e074:	e0bffc17 	ldw	r2,-16(fp)
    e078:	e0bff915 	stw	r2,-28(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
    e07c:	e0bff917 	ldw	r2,-28(fp)
    e080:	10800808 	cmpgei	r2,r2,32
    e084:	1000291e 	bne	r2,zero,e12c <alt_iic_isr_register+0xe0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    e088:	0005303a 	rdctl	r2,status
    e08c:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    e090:	e0fff717 	ldw	r3,-36(fp)
    e094:	00bfff84 	movi	r2,-2
    e098:	1884703a 	and	r2,r3,r2
    e09c:	1001703a 	wrctl	status,r2
  
  return context;
    e0a0:	e0bff717 	ldw	r2,-36(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
    e0a4:	e0bff815 	stw	r2,-32(fp)

    alt_irq[id].handler = isr;
    e0a8:	e0bff917 	ldw	r2,-28(fp)
    e0ac:	00c00074 	movhi	r3,1
    e0b0:	18cca504 	addi	r3,r3,12948
    e0b4:	100490fa 	slli	r2,r2,3
    e0b8:	10c7883a 	add	r3,r2,r3
    e0bc:	e0bffd17 	ldw	r2,-12(fp)
    e0c0:	18800015 	stw	r2,0(r3)
    alt_irq[id].context = isr_context;
    e0c4:	e0bff917 	ldw	r2,-28(fp)
    e0c8:	00c00074 	movhi	r3,1
    e0cc:	18cca504 	addi	r3,r3,12948
    e0d0:	100490fa 	slli	r2,r2,3
    e0d4:	10c5883a 	add	r2,r2,r3
    e0d8:	10c00104 	addi	r3,r2,4
    e0dc:	e0bffe17 	ldw	r2,-8(fp)
    e0e0:	18800015 	stw	r2,0(r3)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
    e0e4:	e0bffd17 	ldw	r2,-12(fp)
    e0e8:	1005003a 	cmpeq	r2,r2,zero
    e0ec:	1000051e 	bne	r2,zero,e104 <alt_iic_isr_register+0xb8>
    e0f0:	e17ff917 	ldw	r5,-28(fp)
    e0f4:	e13ffb17 	ldw	r4,-20(fp)
    e0f8:	000dec80 	call	dec8 <alt_ic_irq_enable>
    e0fc:	e0bfff15 	stw	r2,-4(fp)
    e100:	00000406 	br	e114 <alt_iic_isr_register+0xc8>
    e104:	e17ff917 	ldw	r5,-28(fp)
    e108:	e13ffb17 	ldw	r4,-20(fp)
    e10c:	000df640 	call	df64 <alt_ic_irq_disable>
    e110:	e0bfff15 	stw	r2,-4(fp)
    e114:	e0bfff17 	ldw	r2,-4(fp)
    e118:	e0bffa15 	stw	r2,-24(fp)
    e11c:	e0bff817 	ldw	r2,-32(fp)
    e120:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    e124:	e0bff617 	ldw	r2,-40(fp)
    e128:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
    e12c:	e0bffa17 	ldw	r2,-24(fp)
}
    e130:	e037883a 	mov	sp,fp
    e134:	dfc00117 	ldw	ra,4(sp)
    e138:	df000017 	ldw	fp,0(sp)
    e13c:	dec00204 	addi	sp,sp,8
    e140:	f800283a 	ret

0000e144 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
    e144:	defff904 	addi	sp,sp,-28
    e148:	dfc00615 	stw	ra,24(sp)
    e14c:	df000515 	stw	fp,20(sp)
    e150:	df000504 	addi	fp,sp,20
    e154:	e13ffc15 	stw	r4,-16(fp)
    e158:	e17ffd15 	stw	r5,-12(fp)
    e15c:	e1bffe15 	stw	r6,-8(fp)
    e160:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
    e164:	e13ffd17 	ldw	r4,-12(fp)
    e168:	e17ffe17 	ldw	r5,-8(fp)
    e16c:	e1bfff17 	ldw	r6,-4(fp)
    e170:	000e35c0 	call	e35c <open>
    e174:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
    e178:	e0bffb17 	ldw	r2,-20(fp)
    e17c:	1004803a 	cmplt	r2,r2,zero
    e180:	10001c1e 	bne	r2,zero,e1f4 <alt_open_fd+0xb0>
  {
    fd->dev      = alt_fd_list[old].dev;
    e184:	e0bffb17 	ldw	r2,-20(fp)
    e188:	00c00074 	movhi	r3,1
    e18c:	18c06b04 	addi	r3,r3,428
    e190:	10800324 	muli	r2,r2,12
    e194:	10c5883a 	add	r2,r2,r3
    e198:	10c00017 	ldw	r3,0(r2)
    e19c:	e0bffc17 	ldw	r2,-16(fp)
    e1a0:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
    e1a4:	e0bffb17 	ldw	r2,-20(fp)
    e1a8:	00c00074 	movhi	r3,1
    e1ac:	18c06b04 	addi	r3,r3,428
    e1b0:	10800324 	muli	r2,r2,12
    e1b4:	10c5883a 	add	r2,r2,r3
    e1b8:	10800104 	addi	r2,r2,4
    e1bc:	10c00017 	ldw	r3,0(r2)
    e1c0:	e0bffc17 	ldw	r2,-16(fp)
    e1c4:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
    e1c8:	e0bffb17 	ldw	r2,-20(fp)
    e1cc:	00c00074 	movhi	r3,1
    e1d0:	18c06b04 	addi	r3,r3,428
    e1d4:	10800324 	muli	r2,r2,12
    e1d8:	10c5883a 	add	r2,r2,r3
    e1dc:	10800204 	addi	r2,r2,8
    e1e0:	10c00017 	ldw	r3,0(r2)
    e1e4:	e0bffc17 	ldw	r2,-16(fp)
    e1e8:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
    e1ec:	e13ffb17 	ldw	r4,-20(fp)
    e1f0:	000b9780 	call	b978 <alt_release_fd>
  }
} 
    e1f4:	e037883a 	mov	sp,fp
    e1f8:	dfc00117 	ldw	ra,4(sp)
    e1fc:	df000017 	ldw	fp,0(sp)
    e200:	dec00204 	addi	sp,sp,8
    e204:	f800283a 	ret

0000e208 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
    e208:	defffb04 	addi	sp,sp,-20
    e20c:	dfc00415 	stw	ra,16(sp)
    e210:	df000315 	stw	fp,12(sp)
    e214:	df000304 	addi	fp,sp,12
    e218:	e13ffd15 	stw	r4,-12(fp)
    e21c:	e17ffe15 	stw	r5,-8(fp)
    e220:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
    e224:	01000074 	movhi	r4,1
    e228:	21006e04 	addi	r4,r4,440
    e22c:	e17ffd17 	ldw	r5,-12(fp)
    e230:	01800044 	movi	r6,1
    e234:	01c07fc4 	movi	r7,511
    e238:	000e1440 	call	e144 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
    e23c:	01000074 	movhi	r4,1
    e240:	21006b04 	addi	r4,r4,428
    e244:	e17ffe17 	ldw	r5,-8(fp)
    e248:	000d883a 	mov	r6,zero
    e24c:	01c07fc4 	movi	r7,511
    e250:	000e1440 	call	e144 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
    e254:	01000074 	movhi	r4,1
    e258:	21007104 	addi	r4,r4,452
    e25c:	e17fff17 	ldw	r5,-4(fp)
    e260:	01800044 	movi	r6,1
    e264:	01c07fc4 	movi	r7,511
    e268:	000e1440 	call	e144 <alt_open_fd>
}  
    e26c:	e037883a 	mov	sp,fp
    e270:	dfc00117 	ldw	ra,4(sp)
    e274:	df000017 	ldw	fp,0(sp)
    e278:	dec00204 	addi	sp,sp,8
    e27c:	f800283a 	ret

0000e280 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
    e280:	defffc04 	addi	sp,sp,-16
    e284:	df000315 	stw	fp,12(sp)
    e288:	df000304 	addi	fp,sp,12
    e28c:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
    e290:	e0bffe17 	ldw	r2,-8(fp)
    e294:	10800217 	ldw	r2,8(r2)
    e298:	10d00034 	orhi	r3,r2,16384
    e29c:	e0bffe17 	ldw	r2,-8(fp)
    e2a0:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
    e2a4:	e03ffd15 	stw	zero,-12(fp)
    e2a8:	00002006 	br	e32c <alt_file_locked+0xac>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
    e2ac:	e0bffd17 	ldw	r2,-12(fp)
    e2b0:	00c00074 	movhi	r3,1
    e2b4:	18c06b04 	addi	r3,r3,428
    e2b8:	10800324 	muli	r2,r2,12
    e2bc:	10c5883a 	add	r2,r2,r3
    e2c0:	10c00017 	ldw	r3,0(r2)
    e2c4:	e0bffe17 	ldw	r2,-8(fp)
    e2c8:	10800017 	ldw	r2,0(r2)
    e2cc:	1880141e 	bne	r3,r2,e320 <alt_file_locked+0xa0>
    e2d0:	e0bffd17 	ldw	r2,-12(fp)
    e2d4:	00c00074 	movhi	r3,1
    e2d8:	18c06b04 	addi	r3,r3,428
    e2dc:	10800324 	muli	r2,r2,12
    e2e0:	10c5883a 	add	r2,r2,r3
    e2e4:	10800204 	addi	r2,r2,8
    e2e8:	10800017 	ldw	r2,0(r2)
    e2ec:	1004403a 	cmpge	r2,r2,zero
    e2f0:	10000b1e 	bne	r2,zero,e320 <alt_file_locked+0xa0>
    e2f4:	e0bffd17 	ldw	r2,-12(fp)
    e2f8:	10800324 	muli	r2,r2,12
    e2fc:	1007883a 	mov	r3,r2
    e300:	00800074 	movhi	r2,1
    e304:	10806b04 	addi	r2,r2,428
    e308:	1887883a 	add	r3,r3,r2
    e30c:	e0bffe17 	ldw	r2,-8(fp)
    e310:	18800326 	beq	r3,r2,e320 <alt_file_locked+0xa0>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
    e314:	00bffcc4 	movi	r2,-13
    e318:	e0bfff15 	stw	r2,-4(fp)
    e31c:	00000a06 	br	e348 <alt_file_locked+0xc8>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
    e320:	e0bffd17 	ldw	r2,-12(fp)
    e324:	10800044 	addi	r2,r2,1
    e328:	e0bffd15 	stw	r2,-12(fp)
    e32c:	00800074 	movhi	r2,1
    e330:	10853504 	addi	r2,r2,5332
    e334:	10800017 	ldw	r2,0(r2)
    e338:	1007883a 	mov	r3,r2
    e33c:	e0bffd17 	ldw	r2,-12(fp)
    e340:	18bfda2e 	bgeu	r3,r2,e2ac <alt_file_locked+0x2c>
    }
  }
  
  /* The device is not locked */
 
  return 0;
    e344:	e03fff15 	stw	zero,-4(fp)
    e348:	e0bfff17 	ldw	r2,-4(fp)
}
    e34c:	e037883a 	mov	sp,fp
    e350:	df000017 	ldw	fp,0(sp)
    e354:	dec00104 	addi	sp,sp,4
    e358:	f800283a 	ret

0000e35c <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
    e35c:	defff404 	addi	sp,sp,-48
    e360:	dfc00b15 	stw	ra,44(sp)
    e364:	df000a15 	stw	fp,40(sp)
    e368:	df000a04 	addi	fp,sp,40
    e36c:	e13ffb15 	stw	r4,-20(fp)
    e370:	e17ffc15 	stw	r5,-16(fp)
    e374:	e1bffd15 	stw	r6,-12(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
    e378:	00bfffc4 	movi	r2,-1
    e37c:	e0bff815 	stw	r2,-32(fp)
  int status = -ENODEV;
    e380:	00bffb44 	movi	r2,-19
    e384:	e0bff715 	stw	r2,-36(fp)
  int isafs = 0;
    e388:	e03ff615 	stw	zero,-40(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
    e38c:	e13ffb17 	ldw	r4,-20(fp)
    e390:	01400074 	movhi	r5,1
    e394:	29453304 	addi	r5,r5,5324
    e398:	000e5640 	call	e564 <alt_find_dev>
    e39c:	e0bffa15 	stw	r2,-24(fp)
    e3a0:	e0bffa17 	ldw	r2,-24(fp)
    e3a4:	1004c03a 	cmpne	r2,r2,zero
    e3a8:	1000051e 	bne	r2,zero,e3c0 <open+0x64>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
    e3ac:	e13ffb17 	ldw	r4,-20(fp)
    e3b0:	000e5f80 	call	e5f8 <alt_find_file>
    e3b4:	e0bffa15 	stw	r2,-24(fp)
    isafs = 1;
    e3b8:	00800044 	movi	r2,1
    e3bc:	e0bff615 	stw	r2,-40(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
    e3c0:	e0bffa17 	ldw	r2,-24(fp)
    e3c4:	1005003a 	cmpeq	r2,r2,zero
    e3c8:	1000301e 	bne	r2,zero,e48c <open+0x130>
  {
    if ((index = alt_get_fd (dev)) < 0)
    e3cc:	e13ffa17 	ldw	r4,-24(fp)
    e3d0:	000e7180 	call	e718 <alt_get_fd>
    e3d4:	e0bff815 	stw	r2,-32(fp)
    e3d8:	e0bff817 	ldw	r2,-32(fp)
    e3dc:	1004403a 	cmpge	r2,r2,zero
    e3e0:	1000031e 	bne	r2,zero,e3f0 <open+0x94>
    {
      status = index;
    e3e4:	e0bff817 	ldw	r2,-32(fp)
    e3e8:	e0bff715 	stw	r2,-36(fp)
    e3ec:	00002906 	br	e494 <open+0x138>
    }
    else
    {
      fd = &alt_fd_list[index];
    e3f0:	e0bff817 	ldw	r2,-32(fp)
    e3f4:	10800324 	muli	r2,r2,12
    e3f8:	1007883a 	mov	r3,r2
    e3fc:	00800074 	movhi	r2,1
    e400:	10806b04 	addi	r2,r2,428
    e404:	1885883a 	add	r2,r3,r2
    e408:	e0bff915 	stw	r2,-28(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
    e40c:	e0fffc17 	ldw	r3,-16(fp)
    e410:	00900034 	movhi	r2,16384
    e414:	10bfffc4 	addi	r2,r2,-1
    e418:	1886703a 	and	r3,r3,r2
    e41c:	e0bff917 	ldw	r2,-28(fp)
    e420:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
    e424:	e0bff617 	ldw	r2,-40(fp)
    e428:	1004c03a 	cmpne	r2,r2,zero
    e42c:	1000061e 	bne	r2,zero,e448 <open+0xec>
    e430:	e13ff917 	ldw	r4,-28(fp)
    e434:	000e2800 	call	e280 <alt_file_locked>
    e438:	e0bff715 	stw	r2,-36(fp)
    e43c:	e0bff717 	ldw	r2,-36(fp)
    e440:	1004803a 	cmplt	r2,r2,zero
    e444:	1000131e 	bne	r2,zero,e494 <open+0x138>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
    e448:	e0bffa17 	ldw	r2,-24(fp)
    e44c:	10800317 	ldw	r2,12(r2)
    e450:	1005003a 	cmpeq	r2,r2,zero
    e454:	1000091e 	bne	r2,zero,e47c <open+0x120>
    e458:	e0bffa17 	ldw	r2,-24(fp)
    e45c:	10800317 	ldw	r2,12(r2)
    e460:	e13ff917 	ldw	r4,-28(fp)
    e464:	e17ffb17 	ldw	r5,-20(fp)
    e468:	e1bffc17 	ldw	r6,-16(fp)
    e46c:	e1fffd17 	ldw	r7,-12(fp)
    e470:	103ee83a 	callr	r2
    e474:	e0bfff15 	stw	r2,-4(fp)
    e478:	00000106 	br	e480 <open+0x124>
    e47c:	e03fff15 	stw	zero,-4(fp)
    e480:	e0bfff17 	ldw	r2,-4(fp)
    e484:	e0bff715 	stw	r2,-36(fp)
    e488:	00000206 	br	e494 <open+0x138>
      }
    }
  }
  else
  {
    status = -ENODEV;
    e48c:	00bffb44 	movi	r2,-19
    e490:	e0bff715 	stw	r2,-36(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
    e494:	e0bff717 	ldw	r2,-36(fp)
    e498:	1004403a 	cmpge	r2,r2,zero
    e49c:	1000091e 	bne	r2,zero,e4c4 <open+0x168>
  {
    alt_release_fd (index);  
    e4a0:	e13ff817 	ldw	r4,-32(fp)
    e4a4:	000b9780 	call	b978 <alt_release_fd>
    ALT_ERRNO = -status;
    e4a8:	000e4e40 	call	e4e4 <alt_get_errno>
    e4ac:	e0fff717 	ldw	r3,-36(fp)
    e4b0:	00c7c83a 	sub	r3,zero,r3
    e4b4:	10c00015 	stw	r3,0(r2)
    return -1;
    e4b8:	00bfffc4 	movi	r2,-1
    e4bc:	e0bffe15 	stw	r2,-8(fp)
    e4c0:	00000206 	br	e4cc <open+0x170>
  }
  
  /* return the reference upon success */

  return index;
    e4c4:	e0bff817 	ldw	r2,-32(fp)
    e4c8:	e0bffe15 	stw	r2,-8(fp)
    e4cc:	e0bffe17 	ldw	r2,-8(fp)
}
    e4d0:	e037883a 	mov	sp,fp
    e4d4:	dfc00117 	ldw	ra,4(sp)
    e4d8:	df000017 	ldw	fp,0(sp)
    e4dc:	dec00204 	addi	sp,sp,8
    e4e0:	f800283a 	ret

0000e4e4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    e4e4:	defffd04 	addi	sp,sp,-12
    e4e8:	dfc00215 	stw	ra,8(sp)
    e4ec:	df000115 	stw	fp,4(sp)
    e4f0:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
    e4f4:	00800074 	movhi	r2,1
    e4f8:	10853604 	addi	r2,r2,5336
    e4fc:	10800017 	ldw	r2,0(r2)
    e500:	1005003a 	cmpeq	r2,r2,zero
    e504:	1000061e 	bne	r2,zero,e520 <alt_get_errno+0x3c>
    e508:	00800074 	movhi	r2,1
    e50c:	10853604 	addi	r2,r2,5336
    e510:	10800017 	ldw	r2,0(r2)
    e514:	103ee83a 	callr	r2
    e518:	e0bfff15 	stw	r2,-4(fp)
    e51c:	00000306 	br	e52c <alt_get_errno+0x48>
    e520:	00800074 	movhi	r2,1
    e524:	108c8c04 	addi	r2,r2,12848
    e528:	e0bfff15 	stw	r2,-4(fp)
    e52c:	e0bfff17 	ldw	r2,-4(fp)
}
    e530:	e037883a 	mov	sp,fp
    e534:	dfc00117 	ldw	ra,4(sp)
    e538:	df000017 	ldw	fp,0(sp)
    e53c:	dec00204 	addi	sp,sp,8
    e540:	f800283a 	ret

0000e544 <altera_nios2_qsys_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
    e544:	deffff04 	addi	sp,sp,-4
    e548:	df000015 	stw	fp,0(sp)
    e54c:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
    e550:	000170fa 	wrctl	ienable,zero
}
    e554:	e037883a 	mov	sp,fp
    e558:	df000017 	ldw	fp,0(sp)
    e55c:	dec00104 	addi	sp,sp,4
    e560:	f800283a 	ret

0000e564 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
    e564:	defff904 	addi	sp,sp,-28
    e568:	dfc00615 	stw	ra,24(sp)
    e56c:	df000515 	stw	fp,20(sp)
    e570:	df000504 	addi	fp,sp,20
    e574:	e13ffd15 	stw	r4,-12(fp)
    e578:	e17ffe15 	stw	r5,-8(fp)
  alt_dev* next = (alt_dev*) llist->next;
    e57c:	e0bffe17 	ldw	r2,-8(fp)
    e580:	10800017 	ldw	r2,0(r2)
    e584:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
    e588:	e13ffd17 	ldw	r4,-12(fp)
    e58c:	00024180 	call	2418 <strlen>
    e590:	10800044 	addi	r2,r2,1
    e594:	e0bffb15 	stw	r2,-20(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
    e598:	00000d06 	br	e5d0 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
    e59c:	e0bffc17 	ldw	r2,-16(fp)
    e5a0:	11000217 	ldw	r4,8(r2)
    e5a4:	e1bffb17 	ldw	r6,-20(fp)
    e5a8:	e17ffd17 	ldw	r5,-12(fp)
    e5ac:	000e8ac0 	call	e8ac <memcmp>
    e5b0:	1004c03a 	cmpne	r2,r2,zero
    e5b4:	1000031e 	bne	r2,zero,e5c4 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
    e5b8:	e0bffc17 	ldw	r2,-16(fp)
    e5bc:	e0bfff15 	stw	r2,-4(fp)
    e5c0:	00000706 	br	e5e0 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
    e5c4:	e0bffc17 	ldw	r2,-16(fp)
    e5c8:	10800017 	ldw	r2,0(r2)
    e5cc:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
    e5d0:	e0fffe17 	ldw	r3,-8(fp)
    e5d4:	e0bffc17 	ldw	r2,-16(fp)
    e5d8:	10fff01e 	bne	r2,r3,e59c <alt_find_dev+0x38>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
    e5dc:	e03fff15 	stw	zero,-4(fp)
    e5e0:	e0bfff17 	ldw	r2,-4(fp)
}
    e5e4:	e037883a 	mov	sp,fp
    e5e8:	dfc00117 	ldw	ra,4(sp)
    e5ec:	df000017 	ldw	fp,0(sp)
    e5f0:	dec00204 	addi	sp,sp,8
    e5f4:	f800283a 	ret

0000e5f8 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
    e5f8:	defffa04 	addi	sp,sp,-24
    e5fc:	dfc00515 	stw	ra,20(sp)
    e600:	df000415 	stw	fp,16(sp)
    e604:	df000404 	addi	fp,sp,16
    e608:	e13ffe15 	stw	r4,-8(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
    e60c:	00800074 	movhi	r2,1
    e610:	10853104 	addi	r2,r2,5316
    e614:	10800017 	ldw	r2,0(r2)
    e618:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
    e61c:	00003306 	br	e6ec <alt_find_file+0xf4>
  {
    len = strlen(next->name);
    e620:	e0bffd17 	ldw	r2,-12(fp)
    e624:	11000217 	ldw	r4,8(r2)
    e628:	00024180 	call	2418 <strlen>
    e62c:	e0bffc15 	stw	r2,-16(fp)
    
    if (next->name[len-1] == '/')
    e630:	e0bffd17 	ldw	r2,-12(fp)
    e634:	10c00217 	ldw	r3,8(r2)
    e638:	e0bffc17 	ldw	r2,-16(fp)
    e63c:	1885883a 	add	r2,r3,r2
    e640:	10bfffc4 	addi	r2,r2,-1
    e644:	10800003 	ldbu	r2,0(r2)
    e648:	10803fcc 	andi	r2,r2,255
    e64c:	1080201c 	xori	r2,r2,128
    e650:	10bfe004 	addi	r2,r2,-128
    e654:	10800bd8 	cmpnei	r2,r2,47
    e658:	1000031e 	bne	r2,zero,e668 <alt_find_file+0x70>
    {
      len -= 1;
    e65c:	e0bffc17 	ldw	r2,-16(fp)
    e660:	10bfffc4 	addi	r2,r2,-1
    e664:	e0bffc15 	stw	r2,-16(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
    e668:	e0bffc17 	ldw	r2,-16(fp)
    e66c:	1007883a 	mov	r3,r2
    e670:	e0bffe17 	ldw	r2,-8(fp)
    e674:	1885883a 	add	r2,r3,r2
    e678:	10800003 	ldbu	r2,0(r2)
    e67c:	10803fcc 	andi	r2,r2,255
    e680:	1080201c 	xori	r2,r2,128
    e684:	10bfe004 	addi	r2,r2,-128
    e688:	10800be0 	cmpeqi	r2,r2,47
    e68c:	10000a1e 	bne	r2,zero,e6b8 <alt_find_file+0xc0>
    e690:	e0bffc17 	ldw	r2,-16(fp)
    e694:	1007883a 	mov	r3,r2
    e698:	e0bffe17 	ldw	r2,-8(fp)
    e69c:	1885883a 	add	r2,r3,r2
    e6a0:	10800003 	ldbu	r2,0(r2)
    e6a4:	10803fcc 	andi	r2,r2,255
    e6a8:	1080201c 	xori	r2,r2,128
    e6ac:	10bfe004 	addi	r2,r2,-128
    e6b0:	1004c03a 	cmpne	r2,r2,zero
    e6b4:	10000a1e 	bne	r2,zero,e6e0 <alt_find_file+0xe8>
    e6b8:	e0bffd17 	ldw	r2,-12(fp)
    e6bc:	11000217 	ldw	r4,8(r2)
    e6c0:	e1bffc17 	ldw	r6,-16(fp)
    e6c4:	e17ffe17 	ldw	r5,-8(fp)
    e6c8:	000e8ac0 	call	e8ac <memcmp>
    e6cc:	1004c03a 	cmpne	r2,r2,zero
    e6d0:	1000031e 	bne	r2,zero,e6e0 <alt_find_file+0xe8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
    e6d4:	e0bffd17 	ldw	r2,-12(fp)
    e6d8:	e0bfff15 	stw	r2,-4(fp)
    e6dc:	00000806 	br	e700 <alt_find_file+0x108>
    }
    next = (alt_dev*) next->llist.next;
    e6e0:	e0bffd17 	ldw	r2,-12(fp)
    e6e4:	10800017 	ldw	r2,0(r2)
    e6e8:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
    e6ec:	00c00074 	movhi	r3,1
    e6f0:	18c53104 	addi	r3,r3,5316
    e6f4:	e0bffd17 	ldw	r2,-12(fp)
    e6f8:	10ffc91e 	bne	r2,r3,e620 <alt_find_file+0x28>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
    e6fc:	e03fff15 	stw	zero,-4(fp)
    e700:	e0bfff17 	ldw	r2,-4(fp)
}
    e704:	e037883a 	mov	sp,fp
    e708:	dfc00117 	ldw	ra,4(sp)
    e70c:	df000017 	ldw	fp,0(sp)
    e710:	dec00204 	addi	sp,sp,8
    e714:	f800283a 	ret

0000e718 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
    e718:	defffc04 	addi	sp,sp,-16
    e71c:	df000315 	stw	fp,12(sp)
    e720:	df000304 	addi	fp,sp,12
    e724:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
    e728:	00bffa04 	movi	r2,-24
    e72c:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
    e730:	e03ffe15 	stw	zero,-8(fp)
    e734:	00001e06 	br	e7b0 <alt_get_fd+0x98>
  {
    if (!alt_fd_list[i].dev)
    e738:	e0bffe17 	ldw	r2,-8(fp)
    e73c:	00c00074 	movhi	r3,1
    e740:	18c06b04 	addi	r3,r3,428
    e744:	10800324 	muli	r2,r2,12
    e748:	10c5883a 	add	r2,r2,r3
    e74c:	10800017 	ldw	r2,0(r2)
    e750:	1004c03a 	cmpne	r2,r2,zero
    e754:	1000131e 	bne	r2,zero,e7a4 <alt_get_fd+0x8c>
    {
      alt_fd_list[i].dev = dev;
    e758:	e0bffe17 	ldw	r2,-8(fp)
    e75c:	00c00074 	movhi	r3,1
    e760:	18c06b04 	addi	r3,r3,428
    e764:	10800324 	muli	r2,r2,12
    e768:	10c7883a 	add	r3,r2,r3
    e76c:	e0bfff17 	ldw	r2,-4(fp)
    e770:	18800015 	stw	r2,0(r3)
      if (i > alt_max_fd)
    e774:	00800074 	movhi	r2,1
    e778:	10853504 	addi	r2,r2,5332
    e77c:	10c00017 	ldw	r3,0(r2)
    e780:	e0bffe17 	ldw	r2,-8(fp)
    e784:	1880040e 	bge	r3,r2,e798 <alt_get_fd+0x80>
      {
        alt_max_fd = i;
    e788:	00c00074 	movhi	r3,1
    e78c:	18c53504 	addi	r3,r3,5332
    e790:	e0bffe17 	ldw	r2,-8(fp)
    e794:	18800015 	stw	r2,0(r3)
      }
      rc = i;
    e798:	e0bffe17 	ldw	r2,-8(fp)
    e79c:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
    e7a0:	00000606 	br	e7bc <alt_get_fd+0xa4>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
    e7a4:	e0bffe17 	ldw	r2,-8(fp)
    e7a8:	10800044 	addi	r2,r2,1
    e7ac:	e0bffe15 	stw	r2,-8(fp)
    e7b0:	e0bffe17 	ldw	r2,-8(fp)
    e7b4:	10800810 	cmplti	r2,r2,32
    e7b8:	103fdf1e 	bne	r2,zero,e738 <alt_get_fd+0x20>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
    e7bc:	e0bffd17 	ldw	r2,-12(fp)
}
    e7c0:	e037883a 	mov	sp,fp
    e7c4:	df000017 	ldw	fp,0(sp)
    e7c8:	dec00104 	addi	sp,sp,4
    e7cc:	f800283a 	ret

0000e7d0 <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
    e7d0:	defffb04 	addi	sp,sp,-20
    e7d4:	df000415 	stw	fp,16(sp)
    e7d8:	df000404 	addi	fp,sp,16
    e7dc:	e13ffe15 	stw	r4,-8(fp)
    e7e0:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
    e7e4:	e0bfff17 	ldw	r2,-4(fp)
    e7e8:	10840070 	cmpltui	r2,r2,4097
    e7ec:	1000021e 	bne	r2,zero,e7f8 <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
    e7f0:	00840004 	movi	r2,4096
    e7f4:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
    e7f8:	e0fffe17 	ldw	r3,-8(fp)
    e7fc:	e0bfff17 	ldw	r2,-4(fp)
    e800:	1885883a 	add	r2,r3,r2
    e804:	e0bffc15 	stw	r2,-16(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
    e808:	e0bffe17 	ldw	r2,-8(fp)
    e80c:	e0bffd15 	stw	r2,-12(fp)
    e810:	00000506 	br	e828 <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
    e814:	e0bffd17 	ldw	r2,-12(fp)
    e818:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
    e81c:	e0bffd17 	ldw	r2,-12(fp)
    e820:	10800804 	addi	r2,r2,32
    e824:	e0bffd15 	stw	r2,-12(fp)
    e828:	e0fffd17 	ldw	r3,-12(fp)
    e82c:	e0bffc17 	ldw	r2,-16(fp)
    e830:	18bff836 	bltu	r3,r2,e814 <alt_icache_flush+0x44>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
    e834:	e0bffe17 	ldw	r2,-8(fp)
    e838:	108007cc 	andi	r2,r2,31
    e83c:	1005003a 	cmpeq	r2,r2,zero
    e840:	1000021e 	bne	r2,zero,e84c <alt_icache_flush+0x7c>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
    e844:	e0bffd17 	ldw	r2,-12(fp)
    e848:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
    e84c:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
    e850:	e037883a 	mov	sp,fp
    e854:	df000017 	ldw	fp,0(sp)
    e858:	dec00104 	addi	sp,sp,4
    e85c:	f800283a 	ret

0000e860 <atexit>:
    e860:	200b883a 	mov	r5,r4
    e864:	000d883a 	mov	r6,zero
    e868:	0009883a 	mov	r4,zero
    e86c:	000f883a 	mov	r7,zero
    e870:	000e9201 	jmpi	e920 <__register_exitproc>

0000e874 <exit>:
    e874:	defffe04 	addi	sp,sp,-8
    e878:	000b883a 	mov	r5,zero
    e87c:	dc000015 	stw	r16,0(sp)
    e880:	dfc00115 	stw	ra,4(sp)
    e884:	2021883a 	mov	r16,r4
    e888:	000ea580 	call	ea58 <__call_exitprocs>
    e88c:	00800074 	movhi	r2,1
    e890:	10852e04 	addi	r2,r2,5304
    e894:	11000017 	ldw	r4,0(r2)
    e898:	20800f17 	ldw	r2,60(r4)
    e89c:	10000126 	beq	r2,zero,e8a4 <exit+0x30>
    e8a0:	103ee83a 	callr	r2
    e8a4:	8009883a 	mov	r4,r16
    e8a8:	000ec480 	call	ec48 <_exit>

0000e8ac <memcmp>:
    e8ac:	00c000c4 	movi	r3,3
    e8b0:	1980032e 	bgeu	r3,r6,e8c0 <memcmp+0x14>
    e8b4:	2144b03a 	or	r2,r4,r5
    e8b8:	10c4703a 	and	r2,r2,r3
    e8bc:	10000f26 	beq	r2,zero,e8fc <memcmp+0x50>
    e8c0:	31ffffc4 	addi	r7,r6,-1
    e8c4:	3000061e 	bne	r6,zero,e8e0 <memcmp+0x34>
    e8c8:	00000a06 	br	e8f4 <memcmp+0x48>
    e8cc:	39ffffc4 	addi	r7,r7,-1
    e8d0:	00bfffc4 	movi	r2,-1
    e8d4:	21000044 	addi	r4,r4,1
    e8d8:	29400044 	addi	r5,r5,1
    e8dc:	38800526 	beq	r7,r2,e8f4 <memcmp+0x48>
    e8e0:	20c00003 	ldbu	r3,0(r4)
    e8e4:	28800003 	ldbu	r2,0(r5)
    e8e8:	18bff826 	beq	r3,r2,e8cc <memcmp+0x20>
    e8ec:	1885c83a 	sub	r2,r3,r2
    e8f0:	f800283a 	ret
    e8f4:	0005883a 	mov	r2,zero
    e8f8:	f800283a 	ret
    e8fc:	180f883a 	mov	r7,r3
    e900:	20c00017 	ldw	r3,0(r4)
    e904:	28800017 	ldw	r2,0(r5)
    e908:	18bfed1e 	bne	r3,r2,e8c0 <memcmp+0x14>
    e90c:	31bfff04 	addi	r6,r6,-4
    e910:	21000104 	addi	r4,r4,4
    e914:	29400104 	addi	r5,r5,4
    e918:	39bff936 	bltu	r7,r6,e900 <memcmp+0x54>
    e91c:	003fe806 	br	e8c0 <memcmp+0x14>

0000e920 <__register_exitproc>:
    e920:	defffa04 	addi	sp,sp,-24
    e924:	00800074 	movhi	r2,1
    e928:	10852e04 	addi	r2,r2,5304
    e92c:	dc000015 	stw	r16,0(sp)
    e930:	14000017 	ldw	r16,0(r2)
    e934:	dd000415 	stw	r20,16(sp)
    e938:	2829883a 	mov	r20,r5
    e93c:	81405217 	ldw	r5,328(r16)
    e940:	dcc00315 	stw	r19,12(sp)
    e944:	dc800215 	stw	r18,8(sp)
    e948:	dc400115 	stw	r17,4(sp)
    e94c:	dfc00515 	stw	ra,20(sp)
    e950:	2023883a 	mov	r17,r4
    e954:	3027883a 	mov	r19,r6
    e958:	3825883a 	mov	r18,r7
    e95c:	28002526 	beq	r5,zero,e9f4 <__register_exitproc+0xd4>
    e960:	29000117 	ldw	r4,4(r5)
    e964:	008007c4 	movi	r2,31
    e968:	11002716 	blt	r2,r4,ea08 <__register_exitproc+0xe8>
    e96c:	8800101e 	bne	r17,zero,e9b0 <__register_exitproc+0x90>
    e970:	2105883a 	add	r2,r4,r4
    e974:	1085883a 	add	r2,r2,r2
    e978:	20c00044 	addi	r3,r4,1
    e97c:	1145883a 	add	r2,r2,r5
    e980:	0009883a 	mov	r4,zero
    e984:	15000215 	stw	r20,8(r2)
    e988:	28c00115 	stw	r3,4(r5)
    e98c:	2005883a 	mov	r2,r4
    e990:	dfc00517 	ldw	ra,20(sp)
    e994:	dd000417 	ldw	r20,16(sp)
    e998:	dcc00317 	ldw	r19,12(sp)
    e99c:	dc800217 	ldw	r18,8(sp)
    e9a0:	dc400117 	ldw	r17,4(sp)
    e9a4:	dc000017 	ldw	r16,0(sp)
    e9a8:	dec00604 	addi	sp,sp,24
    e9ac:	f800283a 	ret
    e9b0:	29802204 	addi	r6,r5,136
    e9b4:	00800044 	movi	r2,1
    e9b8:	110e983a 	sll	r7,r2,r4
    e9bc:	30c04017 	ldw	r3,256(r6)
    e9c0:	2105883a 	add	r2,r4,r4
    e9c4:	1085883a 	add	r2,r2,r2
    e9c8:	1185883a 	add	r2,r2,r6
    e9cc:	19c6b03a 	or	r3,r3,r7
    e9d0:	14802015 	stw	r18,128(r2)
    e9d4:	14c00015 	stw	r19,0(r2)
    e9d8:	00800084 	movi	r2,2
    e9dc:	30c04015 	stw	r3,256(r6)
    e9e0:	88bfe31e 	bne	r17,r2,e970 <__register_exitproc+0x50>
    e9e4:	30804117 	ldw	r2,260(r6)
    e9e8:	11c4b03a 	or	r2,r2,r7
    e9ec:	30804115 	stw	r2,260(r6)
    e9f0:	003fdf06 	br	e970 <__register_exitproc+0x50>
    e9f4:	00800074 	movhi	r2,1
    e9f8:	108ce504 	addi	r2,r2,13204
    e9fc:	100b883a 	mov	r5,r2
    ea00:	80805215 	stw	r2,328(r16)
    ea04:	003fd606 	br	e960 <__register_exitproc+0x40>
    ea08:	00800034 	movhi	r2,0
    ea0c:	1086ca04 	addi	r2,r2,6952
    ea10:	1000021e 	bne	r2,zero,ea1c <__register_exitproc+0xfc>
    ea14:	013fffc4 	movi	r4,-1
    ea18:	003fdc06 	br	e98c <__register_exitproc+0x6c>
    ea1c:	01006404 	movi	r4,400
    ea20:	103ee83a 	callr	r2
    ea24:	1007883a 	mov	r3,r2
    ea28:	103ffa26 	beq	r2,zero,ea14 <__register_exitproc+0xf4>
    ea2c:	80805217 	ldw	r2,328(r16)
    ea30:	180b883a 	mov	r5,r3
    ea34:	18000115 	stw	zero,4(r3)
    ea38:	18800015 	stw	r2,0(r3)
    ea3c:	80c05215 	stw	r3,328(r16)
    ea40:	18006215 	stw	zero,392(r3)
    ea44:	18006315 	stw	zero,396(r3)
    ea48:	0009883a 	mov	r4,zero
    ea4c:	883fc826 	beq	r17,zero,e970 <__register_exitproc+0x50>
    ea50:	003fd706 	br	e9b0 <__register_exitproc+0x90>

0000ea54 <register_fini>:
    ea54:	f800283a 	ret

0000ea58 <__call_exitprocs>:
    ea58:	00800074 	movhi	r2,1
    ea5c:	10852e04 	addi	r2,r2,5304
    ea60:	10800017 	ldw	r2,0(r2)
    ea64:	defff304 	addi	sp,sp,-52
    ea68:	df000b15 	stw	fp,44(sp)
    ea6c:	d8800115 	stw	r2,4(sp)
    ea70:	00800034 	movhi	r2,0
    ea74:	1086c504 	addi	r2,r2,6932
    ea78:	1005003a 	cmpeq	r2,r2,zero
    ea7c:	d8800215 	stw	r2,8(sp)
    ea80:	d8800117 	ldw	r2,4(sp)
    ea84:	dd400815 	stw	r21,32(sp)
    ea88:	dd000715 	stw	r20,28(sp)
    ea8c:	10805204 	addi	r2,r2,328
    ea90:	dfc00c15 	stw	ra,48(sp)
    ea94:	ddc00a15 	stw	r23,40(sp)
    ea98:	dd800915 	stw	r22,36(sp)
    ea9c:	dcc00615 	stw	r19,24(sp)
    eaa0:	dc800515 	stw	r18,20(sp)
    eaa4:	dc400415 	stw	r17,16(sp)
    eaa8:	dc000315 	stw	r16,12(sp)
    eaac:	282b883a 	mov	r21,r5
    eab0:	2039883a 	mov	fp,r4
    eab4:	d8800015 	stw	r2,0(sp)
    eab8:	2829003a 	cmpeq	r20,r5,zero
    eabc:	d8800117 	ldw	r2,4(sp)
    eac0:	14405217 	ldw	r17,328(r2)
    eac4:	88001026 	beq	r17,zero,eb08 <__call_exitprocs+0xb0>
    eac8:	ddc00017 	ldw	r23,0(sp)
    eacc:	88800117 	ldw	r2,4(r17)
    ead0:	8c802204 	addi	r18,r17,136
    ead4:	143fffc4 	addi	r16,r2,-1
    ead8:	80000916 	blt	r16,zero,eb00 <__call_exitprocs+0xa8>
    eadc:	05bfffc4 	movi	r22,-1
    eae0:	a000151e 	bne	r20,zero,eb38 <__call_exitprocs+0xe0>
    eae4:	8409883a 	add	r4,r16,r16
    eae8:	2105883a 	add	r2,r4,r4
    eaec:	1485883a 	add	r2,r2,r18
    eaf0:	10c02017 	ldw	r3,128(r2)
    eaf4:	a8c01126 	beq	r21,r3,eb3c <__call_exitprocs+0xe4>
    eaf8:	843fffc4 	addi	r16,r16,-1
    eafc:	85bff81e 	bne	r16,r22,eae0 <__call_exitprocs+0x88>
    eb00:	d8800217 	ldw	r2,8(sp)
    eb04:	10003126 	beq	r2,zero,ebcc <__call_exitprocs+0x174>
    eb08:	dfc00c17 	ldw	ra,48(sp)
    eb0c:	df000b17 	ldw	fp,44(sp)
    eb10:	ddc00a17 	ldw	r23,40(sp)
    eb14:	dd800917 	ldw	r22,36(sp)
    eb18:	dd400817 	ldw	r21,32(sp)
    eb1c:	dd000717 	ldw	r20,28(sp)
    eb20:	dcc00617 	ldw	r19,24(sp)
    eb24:	dc800517 	ldw	r18,20(sp)
    eb28:	dc400417 	ldw	r17,16(sp)
    eb2c:	dc000317 	ldw	r16,12(sp)
    eb30:	dec00d04 	addi	sp,sp,52
    eb34:	f800283a 	ret
    eb38:	8409883a 	add	r4,r16,r16
    eb3c:	88c00117 	ldw	r3,4(r17)
    eb40:	2105883a 	add	r2,r4,r4
    eb44:	1445883a 	add	r2,r2,r17
    eb48:	18ffffc4 	addi	r3,r3,-1
    eb4c:	11800217 	ldw	r6,8(r2)
    eb50:	1c001526 	beq	r3,r16,eba8 <__call_exitprocs+0x150>
    eb54:	10000215 	stw	zero,8(r2)
    eb58:	303fe726 	beq	r6,zero,eaf8 <__call_exitprocs+0xa0>
    eb5c:	00c00044 	movi	r3,1
    eb60:	1c06983a 	sll	r3,r3,r16
    eb64:	90804017 	ldw	r2,256(r18)
    eb68:	8cc00117 	ldw	r19,4(r17)
    eb6c:	1884703a 	and	r2,r3,r2
    eb70:	10001426 	beq	r2,zero,ebc4 <__call_exitprocs+0x16c>
    eb74:	90804117 	ldw	r2,260(r18)
    eb78:	1884703a 	and	r2,r3,r2
    eb7c:	10000c1e 	bne	r2,zero,ebb0 <__call_exitprocs+0x158>
    eb80:	2105883a 	add	r2,r4,r4
    eb84:	1485883a 	add	r2,r2,r18
    eb88:	11400017 	ldw	r5,0(r2)
    eb8c:	e009883a 	mov	r4,fp
    eb90:	303ee83a 	callr	r6
    eb94:	88800117 	ldw	r2,4(r17)
    eb98:	98bfc81e 	bne	r19,r2,eabc <__call_exitprocs+0x64>
    eb9c:	b8800017 	ldw	r2,0(r23)
    eba0:	147fd526 	beq	r2,r17,eaf8 <__call_exitprocs+0xa0>
    eba4:	003fc506 	br	eabc <__call_exitprocs+0x64>
    eba8:	8c000115 	stw	r16,4(r17)
    ebac:	003fea06 	br	eb58 <__call_exitprocs+0x100>
    ebb0:	2105883a 	add	r2,r4,r4
    ebb4:	1485883a 	add	r2,r2,r18
    ebb8:	11000017 	ldw	r4,0(r2)
    ebbc:	303ee83a 	callr	r6
    ebc0:	003ff406 	br	eb94 <__call_exitprocs+0x13c>
    ebc4:	303ee83a 	callr	r6
    ebc8:	003ff206 	br	eb94 <__call_exitprocs+0x13c>
    ebcc:	88800117 	ldw	r2,4(r17)
    ebd0:	1000081e 	bne	r2,zero,ebf4 <__call_exitprocs+0x19c>
    ebd4:	89000017 	ldw	r4,0(r17)
    ebd8:	20000726 	beq	r4,zero,ebf8 <__call_exitprocs+0x1a0>
    ebdc:	b9000015 	stw	r4,0(r23)
    ebe0:	8809883a 	mov	r4,r17
    ebe4:	0001b140 	call	1b14 <free>
    ebe8:	bc400017 	ldw	r17,0(r23)
    ebec:	883fb71e 	bne	r17,zero,eacc <__call_exitprocs+0x74>
    ebf0:	003fc506 	br	eb08 <__call_exitprocs+0xb0>
    ebf4:	89000017 	ldw	r4,0(r17)
    ebf8:	882f883a 	mov	r23,r17
    ebfc:	2023883a 	mov	r17,r4
    ec00:	883fb21e 	bne	r17,zero,eacc <__call_exitprocs+0x74>
    ec04:	003fc006 	br	eb08 <__call_exitprocs+0xb0>

0000ec08 <alt_sim_halt>:

/*
 * Routine called on exit.
 */
static ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
    ec08:	defffd04 	addi	sp,sp,-12
    ec0c:	df000215 	stw	fp,8(sp)
    ec10:	df000204 	addi	fp,sp,8
    ec14:	e13fff15 	stw	r4,-4(fp)
  int r2 = exit_code;
    ec18:	e0bfff17 	ldw	r2,-4(fp)
    ec1c:	e0bffe15 	stw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "D02"(r2), "D03"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
    ec20:	e0bffe17 	ldw	r2,-8(fp)
    ec24:	1005003a 	cmpeq	r2,r2,zero
    ec28:	1000021e 	bne	r2,zero,ec34 <alt_sim_halt+0x2c>
    ALT_SIM_FAIL();
    ec2c:	002af070 	cmpltui	zero,zero,43969
    ec30:	00000106 	br	ec38 <alt_sim_halt+0x30>
  } else {
    ALT_SIM_PASS();
    ec34:	002af0b0 	cmpltui	zero,zero,43970
  }
#endif /* DEBUG_STUB */
}
    ec38:	e037883a 	mov	sp,fp
    ec3c:	df000017 	ldw	fp,0(sp)
    ec40:	dec00104 	addi	sp,sp,4
    ec44:	f800283a 	ret

0000ec48 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
    ec48:	defffd04 	addi	sp,sp,-12
    ec4c:	dfc00215 	stw	ra,8(sp)
    ec50:	df000115 	stw	fp,4(sp)
    ec54:	df000104 	addi	fp,sp,4
    ec58:	e13fff15 	stw	r4,-4(fp)
  ALT_OS_STOP();

  /* Provide notification to the simulator that we've stopped */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_SIM_HALT().\r\n");
  ALT_SIM_HALT(exit_code);
    ec5c:	e13fff17 	ldw	r4,-4(fp)
    ec60:	000ec080 	call	ec08 <alt_sim_halt>

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
    ec64:	003fff06 	br	ec64 <_exit+0x1c>
    ec68:	0000ea54 	movui	zero,937
